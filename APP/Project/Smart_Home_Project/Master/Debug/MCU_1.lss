
MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000170  00800060  000042be  00004352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008001d0  008001d0  000044c2  2**0
                  ALLOC
  3 .stab         00003768  00000000  00000000  000044c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015b5  00000000  00000000  00007c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000091e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009321  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009491  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b0da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bfc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cd74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ced4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d161  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d92f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3d       	cpi	r26, 0xD9	; 217
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 69 14 	call	0x28d2	; 0x28d2 <main>
      8a:	0c 94 5d 21 	jmp	0x42ba	; 0x42ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 26 21 	jmp	0x424c	; 0x424c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ea       	ldi	r26, 0xA8	; 168
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 42 21 	jmp	0x4284	; 0x4284 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 32 21 	jmp	0x4264	; 0x4264 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4e 21 	jmp	0x429c	; 0x429c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 32 21 	jmp	0x4264	; 0x4264 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4e 21 	jmp	0x429c	; 0x429c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 21 	jmp	0x424c	; 0x424c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ea       	ldi	r24, 0xA8	; 168
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 42 21 	jmp	0x4284	; 0x4284 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 32 21 	jmp	0x4264	; 0x4264 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4e 21 	jmp	0x429c	; 0x429c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 32 21 	jmp	0x4264	; 0x4264 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4e 21 	jmp	0x429c	; 0x429c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 32 21 	jmp	0x4264	; 0x4264 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4e 21 	jmp	0x429c	; 0x429c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 36 21 	jmp	0x426c	; 0x426c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 52 21 	jmp	0x42a4	; 0x42a4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTIMER1_voidInitFastPwm>:
#include "MTIMERS_Config.h"

/************************** TIMER_1 ***********************************/

void MTIMER1_voidInitFastPwm()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* set OC1A as output pin */
	SET_BIT(DDRD,5);
     b4e:	a1 e3       	ldi	r26, 0x31	; 49
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e3       	ldi	r30, 0x31	; 49
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 62       	ori	r24, 0x20	; 32
     b5a:	8c 93       	st	X, r24

	/* select fast PWM mode with TOP:ICR1*/
	CLR_BIT(TCCR1A,WGM10);
     b5c:	af e4       	ldi	r26, 0x4F	; 79
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e4       	ldi	r30, 0x4F	; 79
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8e 7f       	andi	r24, 0xFE	; 254
     b68:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
     b6a:	af e4       	ldi	r26, 0x4F	; 79
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e4       	ldi	r30, 0x4F	; 79
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
     b78:	ae e4       	ldi	r26, 0x4E	; 78
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ee e4       	ldi	r30, 0x4E	; 78
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
     b86:	ae e4       	ldi	r26, 0x4E	; 78
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	ee e4       	ldi	r30, 0x4E	; 78
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 61       	ori	r24, 0x10	; 16
     b92:	8c 93       	st	X, r24

	/* load a value in ICR1 */
	ICR1=19999;
     b94:	e6 e4       	ldi	r30, 0x46	; 70
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	8f e1       	ldi	r24, 0x1F	; 31
     b9a:	9e e4       	ldi	r25, 0x4E	; 78
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	80 83       	st	Z, r24

	/* select timer TIMER1_PRESCALLER = 8*/
	TCCR1B= (TCCR1B &0b11111000) | TIMER1_PRESCALLER ;
     ba0:	ae e4       	ldi	r26, 0x4E	; 78
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	ee e4       	ldi	r30, 0x4E	; 78
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	88 7f       	andi	r24, 0xF8	; 248
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	8c 93       	st	X, r24

	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
     bb0:	af e4       	ldi	r26, 0x4F	; 79
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ef e4       	ldi	r30, 0x4F	; 79
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
     bbe:	af e4       	ldi	r26, 0x4F	; 79
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	ef e4       	ldi	r30, 0x4F	; 79
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 62       	ori	r24, 0x20	; 32
     bca:	8c 93       	st	X, r24

	// initialize counter
	TCNT1 = 0 ;
     bcc:	ec e4       	ldi	r30, 0x4C	; 76
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	11 82       	std	Z+1, r1	; 0x01
     bd2:	10 82       	st	Z, r1
}
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <MTIMER1_voidSetPinACompareMatch>:

void MTIMER1_voidSetPinACompareMatch(u16 Copy_u16Value)
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <MTIMER1_voidSetPinACompareMatch+0x6>
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16Value ;
     be8:	ea e4       	ldi	r30, 0x4A	; 74
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	91 83       	std	Z+1, r25	; 0x01
     bf2:	80 83       	st	Z, r24
}
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <SPI_voidInitMaster>:
#include "SPI_private.h"
#include "SPI_config.h"
#include "../MDIO/MDIO.h"

void SPI_voidInitMaster(void)
{
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
	/*Set MOSI, SS, and SCK pins as output*/
	MDIO_voidSetPinDirection(1 , 4 , 1); // SS
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	64 e0       	ldi	r22, 0x04	; 4
     c0a:	41 e0       	ldi	r20, 0x01	; 1
     c0c:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(1 , 5 , 1); // MOSI
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	65 e0       	ldi	r22, 0x05	; 5
     c14:	41 e0       	ldi	r20, 0x01	; 1
     c16:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(1 , 6 , 1); // MISO
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	66 e0       	ldi	r22, 0x06	; 6
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(1 , 7 , 1); // SCK
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	67 e0       	ldi	r22, 0x07	; 7
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>

	/* Disable interrupt */
	CLR_BIT(SPCR , SPCR_SPIE);
     c2e:	ad e2       	ldi	r26, 0x2D	; 45
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	ed e2       	ldi	r30, 0x2D	; 45
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8f 77       	andi	r24, 0x7F	; 127
     c3a:	8c 93       	st	X, r24

	/* MSB First */
	CLR_BIT(SPCR , SPCR_DORD) ;
     c3c:	ad e2       	ldi	r26, 0x2D	; 45
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	ed e2       	ldi	r30, 0x2D	; 45
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8f 7d       	andi	r24, 0xDF	; 223
     c48:	8c 93       	st	X, r24

	/* Master select */
	SET_BIT(SPCR, SPCR_MSTR);
     c4a:	ad e2       	ldi	r26, 0x2D	; 45
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	ed e2       	ldi	r30, 0x2D	; 45
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	80 61       	ori	r24, 0x10	; 16
     c56:	8c 93       	st	X, r24

	/* Clk idle low |  Leading edge is rising */
	CLR_BIT(SPCR, SPCR_CPOL);
     c58:	ad e2       	ldi	r26, 0x2D	; 45
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	ed e2       	ldi	r30, 0x2D	; 45
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	87 7f       	andi	r24, 0xF7	; 247
     c64:	8c 93       	st	X, r24

	/* Sample at leading edge */
	CLR_BIT(SPCR, SPCR_CPHA);
     c66:	ad e2       	ldi	r26, 0x2D	; 45
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	ed e2       	ldi	r30, 0x2D	; 45
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8b 7f       	andi	r24, 0xFB	; 251
     c72:	8c 93       	st	X, r24

	/* Freq / 16 */
	SET_BIT(SPCR, SPCR_SPR0);
     c74:	ad e2       	ldi	r26, 0x2D	; 45
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	ed e2       	ldi	r30, 0x2D	; 45
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	81 60       	ori	r24, 0x01	; 1
     c80:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
     c82:	ad e2       	ldi	r26, 0x2D	; 45
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	ed e2       	ldi	r30, 0x2D	; 45
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	8d 7f       	andi	r24, 0xFD	; 253
     c8e:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
     c90:	ae e2       	ldi	r26, 0x2E	; 46
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	ee e2       	ldi	r30, 0x2E	; 46
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	8e 7f       	andi	r24, 0xFE	; 254
     c9c:	8c 93       	st	X, r24

	/* SPI Enable */
	SET_BIT(SPCR, SPCR_SPE);
     c9e:	ad e2       	ldi	r26, 0x2D	; 45
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	ed e2       	ldi	r30, 0x2D	; 45
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 64       	ori	r24, 0x40	; 64
     caa:	8c 93       	st	X, r24

	/*Write Logic High to SS pin*/
	MDIO_voidSetPinValue(1 , 4 , 1);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	64 e0       	ldi	r22, 0x04	; 4
     cb0:	41 e0       	ldi	r20, 0x01	; 1
     cb2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <SPI_voidInitSlave>:

void SPI_voidInitSlave(void)
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	/* Init pins for SPI */
	MDIO_voidSetPinDirection(MDIO_PORTB , PIN4 , INPUT);  //SS
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	64 e0       	ldi	r22, 0x04	; 4
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(MDIO_PORTB , PIN5 , INPUT);  // MOSI
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	65 e0       	ldi	r22, 0x05	; 5
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(MDIO_PORTB , PIN6 , OUTPUT); // MISO
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	66 e0       	ldi	r22, 0x06	; 6
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(MDIO_PORTB , PIN7 , INPUT);  // SCK
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	67 e0       	ldi	r22, 0x07	; 7
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>

	/* Disable interrupt */
	CLR_BIT(SPCR , SPCR_SPIE);
     cec:	ad e2       	ldi	r26, 0x2D	; 45
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ed e2       	ldi	r30, 0x2D	; 45
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 77       	andi	r24, 0x7F	; 127
     cf8:	8c 93       	st	X, r24

	/* MSB First */
	CLR_BIT(SPCR , SPCR_DORD);
     cfa:	ad e2       	ldi	r26, 0x2D	; 45
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ed e2       	ldi	r30, 0x2D	; 45
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 7d       	andi	r24, 0xDF	; 223
     d06:	8c 93       	st	X, r24

	/* Slave select */
	CLR_BIT(SPCR, SPCR_MSTR);
     d08:	ad e2       	ldi	r26, 0x2D	; 45
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ed e2       	ldi	r30, 0x2D	; 45
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8f 7e       	andi	r24, 0xEF	; 239
     d14:	8c 93       	st	X, r24

	/* Clk idle low |  Leading edge is rising */
	CLR_BIT(SPCR, SPCR_CPOL);
     d16:	ad e2       	ldi	r26, 0x2D	; 45
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	ed e2       	ldi	r30, 0x2D	; 45
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	87 7f       	andi	r24, 0xF7	; 247
     d22:	8c 93       	st	X, r24

	/* Sample at leading edge */
	CLR_BIT(SPCR, SPCR_CPHA);
     d24:	ad e2       	ldi	r26, 0x2D	; 45
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ed e2       	ldi	r30, 0x2D	; 45
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8b 7f       	andi	r24, 0xFB	; 251
     d30:	8c 93       	st	X, r24

	/* SPI Enable */
	SET_BIT(SPCR, SPCR_SPE);
     d32:	ad e2       	ldi	r26, 0x2D	; 45
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ed e2       	ldi	r30, 0x2D	; 45
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 64       	ori	r24, 0x40	; 64
     d3e:	8c 93       	st	X, r24

}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <SPI_voidTransmit>:

void SPI_voidTransmit(u8 Cpy_data)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <SPI_voidTransmit+0x6>
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	89 83       	std	Y+1, r24	; 0x01
	/*Clear SS pin to send data*/
	MDIO_voidSetPinValue(1 , 4 , 0);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	64 e0       	ldi	r22, 0x04	; 4
     d56:	40 e0       	ldi	r20, 0x00	; 0
     d58:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>

    /* Send Data */
    SPDR = Cpy_data;
     d5c:	ef e2       	ldi	r30, 0x2F	; 47
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	80 83       	st	Z, r24

    /* Wait till data is sent */
    while (READ_BIT(SPSR, SPSR_SPIF) == 0);
     d64:	ee e2       	ldi	r30, 0x2E	; 46
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
}
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <SPI_u8Receive>:

/* Function to receive data over SPI */
u8 SPI_u8Receive()
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
    /* Wait till reception is complete */
    while (READ_BIT(SPSR, SPSR_SPIF) == 0);
     d7e:	ee e2       	ldi	r30, 0x2E	; 46
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z

    /* Return received data */
    return SPDR;
     d84:	ef e2       	ldi	r30, 0x2F	; 47
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
}
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <MDIO_voidSetPinDirection>:
 */

#include "MDIO.h"

void MDIO_voidSetPinDirection(port A_PortName,pin A_PinNO,u8 A_u8Direction)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	2d 97       	sbiw	r28, 0x0d	; 13
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	6a 83       	std	Y+2, r22	; 0x02
     daa:	4b 83       	std	Y+3, r20	; 0x03
if((A_PortName <= MDIO_PORTD)&&(A_PinNO <= PIN7)&&(A_u8Direction <= OUTPUT)){
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	84 30       	cpi	r24, 0x04	; 4
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <MDIO_voidSetPinDirection+0x22>
     db2:	08 c1       	rjmp	.+528    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	88 30       	cpi	r24, 0x08	; 8
     db8:	08 f0       	brcs	.+2      	; 0xdbc <MDIO_voidSetPinDirection+0x2a>
     dba:	04 c1       	rjmp	.+520    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	08 f0       	brcs	.+2      	; 0xdc4 <MDIO_voidSetPinDirection+0x32>
     dc2:	00 c1       	rjmp	.+512    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>

	switch(A_PortName)
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	3d 87       	std	Y+13, r19	; 0x0d
     dcc:	2c 87       	std	Y+12, r18	; 0x0c
     dce:	8c 85       	ldd	r24, Y+12	; 0x0c
     dd0:	9d 85       	ldd	r25, Y+13	; 0x0d
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	91 05       	cpc	r25, r1
     dd6:	09 f4       	brne	.+2      	; 0xdda <MDIO_voidSetPinDirection+0x48>
     dd8:	4f c0       	rjmp	.+158    	; 0xe78 <MDIO_voidSetPinDirection+0xe6>
     dda:	2c 85       	ldd	r18, Y+12	; 0x0c
     ddc:	3d 85       	ldd	r19, Y+13	; 0x0d
     dde:	22 30       	cpi	r18, 0x02	; 2
     de0:	31 05       	cpc	r19, r1
     de2:	2c f4       	brge	.+10     	; 0xdee <MDIO_voidSetPinDirection+0x5c>
     de4:	8c 85       	ldd	r24, Y+12	; 0x0c
     de6:	9d 85       	ldd	r25, Y+13	; 0x0d
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	71 f0       	breq	.+28     	; 0xe08 <MDIO_voidSetPinDirection+0x76>
     dec:	eb c0       	rjmp	.+470    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
     dee:	2c 85       	ldd	r18, Y+12	; 0x0c
     df0:	3d 85       	ldd	r19, Y+13	; 0x0d
     df2:	22 30       	cpi	r18, 0x02	; 2
     df4:	31 05       	cpc	r19, r1
     df6:	09 f4       	brne	.+2      	; 0xdfa <MDIO_voidSetPinDirection+0x68>
     df8:	77 c0       	rjmp	.+238    	; 0xee8 <MDIO_voidSetPinDirection+0x156>
     dfa:	8c 85       	ldd	r24, Y+12	; 0x0c
     dfc:	9d 85       	ldd	r25, Y+13	; 0x0d
     dfe:	83 30       	cpi	r24, 0x03	; 3
     e00:	91 05       	cpc	r25, r1
     e02:	09 f4       	brne	.+2      	; 0xe06 <MDIO_voidSetPinDirection+0x74>
     e04:	a9 c0       	rjmp	.+338    	; 0xf58 <MDIO_voidSetPinDirection+0x1c6>
     e06:	de c0       	rjmp	.+444    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
	{


		case MDIO_PORTA:
					switch(A_u8Direction)
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	3b 87       	std	Y+11, r19	; 0x0b
     e10:	2a 87       	std	Y+10, r18	; 0x0a
     e12:	8a 85       	ldd	r24, Y+10	; 0x0a
     e14:	9b 85       	ldd	r25, Y+11	; 0x0b
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	d1 f0       	breq	.+52     	; 0xe4e <MDIO_voidSetPinDirection+0xbc>
     e1a:	2a 85       	ldd	r18, Y+10	; 0x0a
     e1c:	3b 85       	ldd	r19, Y+11	; 0x0b
     e1e:	21 30       	cpi	r18, 0x01	; 1
     e20:	31 05       	cpc	r19, r1
     e22:	09 f0       	breq	.+2      	; 0xe26 <MDIO_voidSetPinDirection+0x94>
     e24:	cf c0       	rjmp	.+414    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
					{
						case OUTPUT: SET_BIT(DDRA,A_PinNO); break;
     e26:	aa e3       	ldi	r26, 0x3A	; 58
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ea e3       	ldi	r30, 0x3A	; 58
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <MDIO_voidSetPinDirection+0xb2>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <MDIO_voidSetPinDirection+0xae>
     e48:	84 2b       	or	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	bb c0       	rjmp	.+374    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
						case INPUT:  CLR_BIT(DDRA,A_PinNO); break;
     e4e:	aa e3       	ldi	r26, 0x3A	; 58
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ea e3       	ldi	r30, 0x3A	; 58
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <MDIO_voidSetPinDirection+0xda>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <MDIO_voidSetPinDirection+0xd6>
     e70:	80 95       	com	r24
     e72:	84 23       	and	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	a6 c0       	rjmp	.+332    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
					}break;

		case MDIO_PORTB:
					switch(A_u8Direction)
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	39 87       	std	Y+9, r19	; 0x09
     e80:	28 87       	std	Y+8, r18	; 0x08
     e82:	88 85       	ldd	r24, Y+8	; 0x08
     e84:	99 85       	ldd	r25, Y+9	; 0x09
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	d1 f0       	breq	.+52     	; 0xebe <MDIO_voidSetPinDirection+0x12c>
     e8a:	28 85       	ldd	r18, Y+8	; 0x08
     e8c:	39 85       	ldd	r19, Y+9	; 0x09
     e8e:	21 30       	cpi	r18, 0x01	; 1
     e90:	31 05       	cpc	r19, r1
     e92:	09 f0       	breq	.+2      	; 0xe96 <MDIO_voidSetPinDirection+0x104>
     e94:	97 c0       	rjmp	.+302    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
					{
						case OUTPUT: SET_BIT(DDRB,A_PinNO); break;
     e96:	a7 e3       	ldi	r26, 0x37	; 55
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e7 e3       	ldi	r30, 0x37	; 55
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <MDIO_voidSetPinDirection+0x122>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <MDIO_voidSetPinDirection+0x11e>
     eb8:	84 2b       	or	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	83 c0       	rjmp	.+262    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
						case INPUT:  CLR_BIT(DDRB,A_PinNO); break;
     ebe:	a7 e3       	ldi	r26, 0x37	; 55
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e7 e3       	ldi	r30, 0x37	; 55
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <MDIO_voidSetPinDirection+0x14a>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <MDIO_voidSetPinDirection+0x146>
     ee0:	80 95       	com	r24
     ee2:	84 23       	and	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	6e c0       	rjmp	.+220    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
					}break;

		case MDIO_PORTC:
					switch(A_u8Direction)
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3f 83       	std	Y+7, r19	; 0x07
     ef0:	2e 83       	std	Y+6, r18	; 0x06
     ef2:	8e 81       	ldd	r24, Y+6	; 0x06
     ef4:	9f 81       	ldd	r25, Y+7	; 0x07
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	d1 f0       	breq	.+52     	; 0xf2e <MDIO_voidSetPinDirection+0x19c>
     efa:	2e 81       	ldd	r18, Y+6	; 0x06
     efc:	3f 81       	ldd	r19, Y+7	; 0x07
     efe:	21 30       	cpi	r18, 0x01	; 1
     f00:	31 05       	cpc	r19, r1
     f02:	09 f0       	breq	.+2      	; 0xf06 <MDIO_voidSetPinDirection+0x174>
     f04:	5f c0       	rjmp	.+190    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
					{
						case OUTPUT: SET_BIT(DDRC,A_PinNO); break;
     f06:	a4 e3       	ldi	r26, 0x34	; 52
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e4 e3       	ldi	r30, 0x34	; 52
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <MDIO_voidSetPinDirection+0x192>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <MDIO_voidSetPinDirection+0x18e>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	4b c0       	rjmp	.+150    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
						case INPUT:  CLR_BIT(DDRC,A_PinNO); break;
     f2e:	a4 e3       	ldi	r26, 0x34	; 52
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e4 e3       	ldi	r30, 0x34	; 52
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <MDIO_voidSetPinDirection+0x1ba>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <MDIO_voidSetPinDirection+0x1b6>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	36 c0       	rjmp	.+108    	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
					}break;

		case MDIO_PORTD:
					switch(A_u8Direction)
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3d 83       	std	Y+5, r19	; 0x05
     f60:	2c 83       	std	Y+4, r18	; 0x04
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	9d 81       	ldd	r25, Y+5	; 0x05
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	c9 f0       	breq	.+50     	; 0xf9c <MDIO_voidSetPinDirection+0x20a>
     f6a:	2c 81       	ldd	r18, Y+4	; 0x04
     f6c:	3d 81       	ldd	r19, Y+5	; 0x05
     f6e:	21 30       	cpi	r18, 0x01	; 1
     f70:	31 05       	cpc	r19, r1
     f72:	41 f5       	brne	.+80     	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
					{
						case OUTPUT: SET_BIT(DDRD,A_PinNO); break;
     f74:	a1 e3       	ldi	r26, 0x31	; 49
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e1 e3       	ldi	r30, 0x31	; 49
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <MDIO_voidSetPinDirection+0x200>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <MDIO_voidSetPinDirection+0x1fc>
     f96:	84 2b       	or	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	14 c0       	rjmp	.+40     	; 0xfc4 <MDIO_voidSetPinDirection+0x232>
						case INPUT:  CLR_BIT(DDRD,A_PinNO); break;
     f9c:	a1 e3       	ldi	r26, 0x31	; 49
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e1 e3       	ldi	r30, 0x31	; 49
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <MDIO_voidSetPinDirection+0x228>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <MDIO_voidSetPinDirection+0x224>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
					}break;

	} /*end if*/}
}
     fc4:	2d 96       	adiw	r28, 0x0d	; 13
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(port A_PortName,pin A_PinNO,u8 A_u8Value)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	2d 97       	sbiw	r28, 0x0d	; 13
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	6a 83       	std	Y+2, r22	; 0x02
     fee:	4b 83       	std	Y+3, r20	; 0x03
if((A_PortName <= MDIO_PORTD)&&(A_PinNO <= PIN7)&&(A_u8Value <= HIGH)){
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <MDIO_voidSetPinValue+0x22>
     ff6:	08 c1       	rjmp	.+528    	; 0x1208 <MDIO_voidSetPinValue+0x232>
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	88 30       	cpi	r24, 0x08	; 8
     ffc:	08 f0       	brcs	.+2      	; 0x1000 <MDIO_voidSetPinValue+0x2a>
     ffe:	04 c1       	rjmp	.+520    	; 0x1208 <MDIO_voidSetPinValue+0x232>
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	08 f0       	brcs	.+2      	; 0x1008 <MDIO_voidSetPinValue+0x32>
    1006:	00 c1       	rjmp	.+512    	; 0x1208 <MDIO_voidSetPinValue+0x232>

	switch(A_PortName)
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3d 87       	std	Y+13, r19	; 0x0d
    1010:	2c 87       	std	Y+12, r18	; 0x0c
    1012:	8c 85       	ldd	r24, Y+12	; 0x0c
    1014:	9d 85       	ldd	r25, Y+13	; 0x0d
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <MDIO_voidSetPinValue+0x48>
    101c:	4f c0       	rjmp	.+158    	; 0x10bc <MDIO_voidSetPinValue+0xe6>
    101e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1020:	3d 85       	ldd	r19, Y+13	; 0x0d
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	2c f4       	brge	.+10     	; 0x1032 <MDIO_voidSetPinValue+0x5c>
    1028:	8c 85       	ldd	r24, Y+12	; 0x0c
    102a:	9d 85       	ldd	r25, Y+13	; 0x0d
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	71 f0       	breq	.+28     	; 0x104c <MDIO_voidSetPinValue+0x76>
    1030:	eb c0       	rjmp	.+470    	; 0x1208 <MDIO_voidSetPinValue+0x232>
    1032:	2c 85       	ldd	r18, Y+12	; 0x0c
    1034:	3d 85       	ldd	r19, Y+13	; 0x0d
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	09 f4       	brne	.+2      	; 0x103e <MDIO_voidSetPinValue+0x68>
    103c:	77 c0       	rjmp	.+238    	; 0x112c <MDIO_voidSetPinValue+0x156>
    103e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1040:	9d 85       	ldd	r25, Y+13	; 0x0d
    1042:	83 30       	cpi	r24, 0x03	; 3
    1044:	91 05       	cpc	r25, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <MDIO_voidSetPinValue+0x74>
    1048:	a9 c0       	rjmp	.+338    	; 0x119c <MDIO_voidSetPinValue+0x1c6>
    104a:	de c0       	rjmp	.+444    	; 0x1208 <MDIO_voidSetPinValue+0x232>
	{
		case MDIO_PORTA:
					switch(A_u8Value)
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3b 87       	std	Y+11, r19	; 0x0b
    1054:	2a 87       	std	Y+10, r18	; 0x0a
    1056:	8a 85       	ldd	r24, Y+10	; 0x0a
    1058:	9b 85       	ldd	r25, Y+11	; 0x0b
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	d1 f0       	breq	.+52     	; 0x1092 <MDIO_voidSetPinValue+0xbc>
    105e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1060:	3b 85       	ldd	r19, Y+11	; 0x0b
    1062:	21 30       	cpi	r18, 0x01	; 1
    1064:	31 05       	cpc	r19, r1
    1066:	09 f0       	breq	.+2      	; 0x106a <MDIO_voidSetPinValue+0x94>
    1068:	cf c0       	rjmp	.+414    	; 0x1208 <MDIO_voidSetPinValue+0x232>
					{
						case HIGH: SET_BIT(PORTA,A_PinNO); break;
    106a:	ab e3       	ldi	r26, 0x3B	; 59
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	eb e3       	ldi	r30, 0x3B	; 59
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <MDIO_voidSetPinValue+0xb2>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <MDIO_voidSetPinValue+0xae>
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	bb c0       	rjmp	.+374    	; 0x1208 <MDIO_voidSetPinValue+0x232>
						case LOW:  CLR_BIT(PORTA,A_PinNO); break;
    1092:	ab e3       	ldi	r26, 0x3B	; 59
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	eb e3       	ldi	r30, 0x3B	; 59
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <MDIO_voidSetPinValue+0xda>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <MDIO_voidSetPinValue+0xd6>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	a6 c0       	rjmp	.+332    	; 0x1208 <MDIO_voidSetPinValue+0x232>
					}break;

		case MDIO_PORTB:
					switch(A_u8Value)
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	39 87       	std	Y+9, r19	; 0x09
    10c4:	28 87       	std	Y+8, r18	; 0x08
    10c6:	88 85       	ldd	r24, Y+8	; 0x08
    10c8:	99 85       	ldd	r25, Y+9	; 0x09
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	d1 f0       	breq	.+52     	; 0x1102 <MDIO_voidSetPinValue+0x12c>
    10ce:	28 85       	ldd	r18, Y+8	; 0x08
    10d0:	39 85       	ldd	r19, Y+9	; 0x09
    10d2:	21 30       	cpi	r18, 0x01	; 1
    10d4:	31 05       	cpc	r19, r1
    10d6:	09 f0       	breq	.+2      	; 0x10da <MDIO_voidSetPinValue+0x104>
    10d8:	97 c0       	rjmp	.+302    	; 0x1208 <MDIO_voidSetPinValue+0x232>
					{
						case HIGH: SET_BIT(PORTB,A_PinNO); break;
    10da:	a8 e3       	ldi	r26, 0x38	; 56
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e8 e3       	ldi	r30, 0x38	; 56
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <MDIO_voidSetPinValue+0x122>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <MDIO_voidSetPinValue+0x11e>
    10fc:	84 2b       	or	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	83 c0       	rjmp	.+262    	; 0x1208 <MDIO_voidSetPinValue+0x232>
						case LOW:  CLR_BIT(PORTB,A_PinNO); break;
    1102:	a8 e3       	ldi	r26, 0x38	; 56
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e8 e3       	ldi	r30, 0x38	; 56
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <MDIO_voidSetPinValue+0x14a>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <MDIO_voidSetPinValue+0x146>
    1124:	80 95       	com	r24
    1126:	84 23       	and	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	6e c0       	rjmp	.+220    	; 0x1208 <MDIO_voidSetPinValue+0x232>
					}break;

		case MDIO_PORTC:
					switch(A_u8Value)
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	3f 83       	std	Y+7, r19	; 0x07
    1134:	2e 83       	std	Y+6, r18	; 0x06
    1136:	8e 81       	ldd	r24, Y+6	; 0x06
    1138:	9f 81       	ldd	r25, Y+7	; 0x07
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	d1 f0       	breq	.+52     	; 0x1172 <MDIO_voidSetPinValue+0x19c>
    113e:	2e 81       	ldd	r18, Y+6	; 0x06
    1140:	3f 81       	ldd	r19, Y+7	; 0x07
    1142:	21 30       	cpi	r18, 0x01	; 1
    1144:	31 05       	cpc	r19, r1
    1146:	09 f0       	breq	.+2      	; 0x114a <MDIO_voidSetPinValue+0x174>
    1148:	5f c0       	rjmp	.+190    	; 0x1208 <MDIO_voidSetPinValue+0x232>
					{
						case HIGH: SET_BIT(PORTC,A_PinNO); break;
    114a:	a5 e3       	ldi	r26, 0x35	; 53
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e3       	ldi	r30, 0x35	; 53
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <MDIO_voidSetPinValue+0x192>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <MDIO_voidSetPinValue+0x18e>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	4b c0       	rjmp	.+150    	; 0x1208 <MDIO_voidSetPinValue+0x232>
						case LOW:  CLR_BIT(PORTC,A_PinNO); break;
    1172:	a5 e3       	ldi	r26, 0x35	; 53
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e3       	ldi	r30, 0x35	; 53
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <MDIO_voidSetPinValue+0x1ba>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <MDIO_voidSetPinValue+0x1b6>
    1194:	80 95       	com	r24
    1196:	84 23       	and	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	36 c0       	rjmp	.+108    	; 0x1208 <MDIO_voidSetPinValue+0x232>
					}break;

		case MDIO_PORTD:
					switch(A_u8Value)
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	3d 83       	std	Y+5, r19	; 0x05
    11a4:	2c 83       	std	Y+4, r18	; 0x04
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	9d 81       	ldd	r25, Y+5	; 0x05
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	c9 f0       	breq	.+50     	; 0x11e0 <MDIO_voidSetPinValue+0x20a>
    11ae:	2c 81       	ldd	r18, Y+4	; 0x04
    11b0:	3d 81       	ldd	r19, Y+5	; 0x05
    11b2:	21 30       	cpi	r18, 0x01	; 1
    11b4:	31 05       	cpc	r19, r1
    11b6:	41 f5       	brne	.+80     	; 0x1208 <MDIO_voidSetPinValue+0x232>
					{
						case HIGH: SET_BIT(PORTD,A_PinNO); break;
    11b8:	a2 e3       	ldi	r26, 0x32	; 50
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e2 e3       	ldi	r30, 0x32	; 50
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <MDIO_voidSetPinValue+0x200>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <MDIO_voidSetPinValue+0x1fc>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	14 c0       	rjmp	.+40     	; 0x1208 <MDIO_voidSetPinValue+0x232>
						case LOW:  CLR_BIT(PORTD,A_PinNO); break;
    11e0:	a2 e3       	ldi	r26, 0x32	; 50
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e2 e3       	ldi	r30, 0x32	; 50
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <MDIO_voidSetPinValue+0x228>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <MDIO_voidSetPinValue+0x224>
    1202:	80 95       	com	r24
    1204:	84 23       	and	r24, r20
    1206:	8c 93       	st	X, r24
					}break;

	}/*end if*/}
}
    1208:	2d 96       	adiw	r28, 0x0d	; 13
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <MDIO_U8ReadPinValue>:

u8 MDIO_U8ReadPinValue(port A_PortName,pin A_PinNO)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <MDIO_U8ReadPinValue+0x6>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <MDIO_U8ReadPinValue+0x8>
    1222:	0f 92       	push	r0
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	8a 83       	std	Y+2, r24	; 0x02
    122a:	6b 83       	std	Y+3, r22	; 0x03
u8 L_u8PinValue=3;
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	89 83       	std	Y+1, r24	; 0x01

if((A_PortName <= MDIO_PORTD)&&(A_PinNO <= PIN7)){
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	84 30       	cpi	r24, 0x04	; 4
    1234:	08 f0       	brcs	.+2      	; 0x1238 <MDIO_U8ReadPinValue+0x1e>
    1236:	6b c0       	rjmp	.+214    	; 0x130e <MDIO_U8ReadPinValue+0xf4>
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	88 30       	cpi	r24, 0x08	; 8
    123c:	08 f0       	brcs	.+2      	; 0x1240 <MDIO_U8ReadPinValue+0x26>
    123e:	67 c0       	rjmp	.+206    	; 0x130e <MDIO_U8ReadPinValue+0xf4>

	switch(A_PortName)
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3d 83       	std	Y+5, r19	; 0x05
    1248:	2c 83       	std	Y+4, r18	; 0x04
    124a:	4c 81       	ldd	r20, Y+4	; 0x04
    124c:	5d 81       	ldd	r21, Y+5	; 0x05
    124e:	41 30       	cpi	r20, 0x01	; 1
    1250:	51 05       	cpc	r21, r1
    1252:	41 f1       	breq	.+80     	; 0x12a4 <MDIO_U8ReadPinValue+0x8a>
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	9d 81       	ldd	r25, Y+5	; 0x05
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	91 05       	cpc	r25, r1
    125c:	34 f4       	brge	.+12     	; 0x126a <MDIO_U8ReadPinValue+0x50>
    125e:	2c 81       	ldd	r18, Y+4	; 0x04
    1260:	3d 81       	ldd	r19, Y+5	; 0x05
    1262:	21 15       	cp	r18, r1
    1264:	31 05       	cpc	r19, r1
    1266:	61 f0       	breq	.+24     	; 0x1280 <MDIO_U8ReadPinValue+0x66>
    1268:	52 c0       	rjmp	.+164    	; 0x130e <MDIO_U8ReadPinValue+0xf4>
    126a:	4c 81       	ldd	r20, Y+4	; 0x04
    126c:	5d 81       	ldd	r21, Y+5	; 0x05
    126e:	42 30       	cpi	r20, 0x02	; 2
    1270:	51 05       	cpc	r21, r1
    1272:	51 f1       	breq	.+84     	; 0x12c8 <MDIO_U8ReadPinValue+0xae>
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	b9 f1       	breq	.+110    	; 0x12ec <MDIO_U8ReadPinValue+0xd2>
    127e:	47 c0       	rjmp	.+142    	; 0x130e <MDIO_U8ReadPinValue+0xf4>
	{
		case MDIO_PORTA: L_u8PinValue=READ_BIT(PINA,A_PinNO); break;
    1280:	e9 e3       	ldi	r30, 0x39	; 57
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <MDIO_U8ReadPinValue+0x7e>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <MDIO_U8ReadPinValue+0x7a>
    129c:	ca 01       	movw	r24, r20
    129e:	81 70       	andi	r24, 0x01	; 1
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	35 c0       	rjmp	.+106    	; 0x130e <MDIO_U8ReadPinValue+0xf4>

		case MDIO_PORTB: L_u8PinValue=READ_BIT(PINB,A_PinNO); break;
    12a4:	e6 e3       	ldi	r30, 0x36	; 54
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a9 01       	movw	r20, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <MDIO_U8ReadPinValue+0xa2>
    12b8:	55 95       	asr	r21
    12ba:	47 95       	ror	r20
    12bc:	8a 95       	dec	r24
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <MDIO_U8ReadPinValue+0x9e>
    12c0:	ca 01       	movw	r24, r20
    12c2:	81 70       	andi	r24, 0x01	; 1
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	23 c0       	rjmp	.+70     	; 0x130e <MDIO_U8ReadPinValue+0xf4>

		case MDIO_PORTC: L_u8PinValue=READ_BIT(PINC,A_PinNO); break;
    12c8:	e3 e3       	ldi	r30, 0x33	; 51
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <MDIO_U8ReadPinValue+0xc6>
    12dc:	55 95       	asr	r21
    12de:	47 95       	ror	r20
    12e0:	8a 95       	dec	r24
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <MDIO_U8ReadPinValue+0xc2>
    12e4:	ca 01       	movw	r24, r20
    12e6:	81 70       	andi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	11 c0       	rjmp	.+34     	; 0x130e <MDIO_U8ReadPinValue+0xf4>

		case MDIO_PORTD: L_u8PinValue=READ_BIT(PIND,A_PinNO); break;
    12ec:	e0 e3       	ldi	r30, 0x30	; 48
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a9 01       	movw	r20, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <MDIO_U8ReadPinValue+0xea>
    1300:	55 95       	asr	r21
    1302:	47 95       	ror	r20
    1304:	8a 95       	dec	r24
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <MDIO_U8ReadPinValue+0xe6>
    1308:	ca 01       	movw	r24, r20
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01

	}/*end if*/}
	return L_u8PinValue;
    130e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue(port A_PortName,pin A_PinNO)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <MDIO_voidTogglePinValue+0x6>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <MDIO_voidTogglePinValue+0x8>
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	6a 83       	std	Y+2, r22	; 0x02
if((A_PortName <= MDIO_PORTD)&&(A_PinNO <= PIN7)){
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	84 30       	cpi	r24, 0x04	; 4
    1334:	08 f0       	brcs	.+2      	; 0x1338 <MDIO_voidTogglePinValue+0x18>
    1336:	72 c0       	rjmp	.+228    	; 0x141c <MDIO_voidTogglePinValue+0xfc>
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	88 30       	cpi	r24, 0x08	; 8
    133c:	08 f0       	brcs	.+2      	; 0x1340 <MDIO_voidTogglePinValue+0x20>
    133e:	6e c0       	rjmp	.+220    	; 0x141c <MDIO_voidTogglePinValue+0xfc>

	switch(A_PortName)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	3c 83       	std	Y+4, r19	; 0x04
    1348:	2b 83       	std	Y+3, r18	; 0x03
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	91 05       	cpc	r25, r1
    1352:	49 f1       	breq	.+82     	; 0x13a6 <MDIO_voidTogglePinValue+0x86>
    1354:	2b 81       	ldd	r18, Y+3	; 0x03
    1356:	3c 81       	ldd	r19, Y+4	; 0x04
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <MDIO_voidTogglePinValue+0x48>
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	61 f0       	breq	.+24     	; 0x137e <MDIO_voidTogglePinValue+0x5e>
    1366:	5a c0       	rjmp	.+180    	; 0x141c <MDIO_voidTogglePinValue+0xfc>
    1368:	2b 81       	ldd	r18, Y+3	; 0x03
    136a:	3c 81       	ldd	r19, Y+4	; 0x04
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	71 f1       	breq	.+92     	; 0x13ce <MDIO_voidTogglePinValue+0xae>
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	91 05       	cpc	r25, r1
    137a:	e9 f1       	breq	.+122    	; 0x13f6 <MDIO_voidTogglePinValue+0xd6>
    137c:	4f c0       	rjmp	.+158    	; 0x141c <MDIO_voidTogglePinValue+0xfc>
	{
		case MDIO_PORTA: TOG_BIT(PORTA,A_PinNO); break;
    137e:	ab e3       	ldi	r26, 0x3B	; 59
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	eb e3       	ldi	r30, 0x3B	; 59
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <MDIO_voidTogglePinValue+0x7c>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <MDIO_voidTogglePinValue+0x78>
    13a0:	84 27       	eor	r24, r20
    13a2:	8c 93       	st	X, r24
    13a4:	3b c0       	rjmp	.+118    	; 0x141c <MDIO_voidTogglePinValue+0xfc>

		case MDIO_PORTB: TOG_BIT(PORTA,A_PinNO); break;
    13a6:	ab e3       	ldi	r26, 0x3B	; 59
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	eb e3       	ldi	r30, 0x3B	; 59
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 2e       	mov	r0, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <MDIO_voidTogglePinValue+0xa4>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	0a 94       	dec	r0
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <MDIO_voidTogglePinValue+0xa0>
    13c8:	84 27       	eor	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	27 c0       	rjmp	.+78     	; 0x141c <MDIO_voidTogglePinValue+0xfc>

		case MDIO_PORTC: TOG_BIT(PORTA,A_PinNO); break;
    13ce:	ab e3       	ldi	r26, 0x3B	; 59
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	eb e3       	ldi	r30, 0x3B	; 59
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <MDIO_voidTogglePinValue+0xcc>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <MDIO_voidTogglePinValue+0xc8>
    13f0:	84 27       	eor	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	13 c0       	rjmp	.+38     	; 0x141c <MDIO_voidTogglePinValue+0xfc>

		case MDIO_PORTD: TOG_BIT(PORTA,A_PinNO); break;
    13f6:	ab e3       	ldi	r26, 0x3B	; 59
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	eb e3       	ldi	r30, 0x3B	; 59
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <MDIO_voidTogglePinValue+0xf4>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <MDIO_voidTogglePinValue+0xf0>
    1418:	84 27       	eor	r24, r20
    141a:	8c 93       	st	X, r24

	}/*end if*/}
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(port A_PortName,u8 A_u8PortDirection)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <MDIO_voidSetPortDirection+0x6>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <MDIO_voidSetPortDirection+0x8>
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	6a 83       	std	Y+2, r22	; 0x02
if((A_PortName <= MDIO_PORTD)&&(A_u8PortDirection <= 0xFF)){
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	84 30       	cpi	r24, 0x04	; 4
    143e:	90 f5       	brcc	.+100    	; 0x14a4 <MDIO_voidSetPortDirection+0x7a>

	switch(A_PortName)
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3c 83       	std	Y+4, r19	; 0x04
    1448:	2b 83       	std	Y+3, r18	; 0x03
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	91 05       	cpc	r25, r1
    1452:	d1 f0       	breq	.+52     	; 0x1488 <MDIO_voidSetPortDirection+0x5e>
    1454:	2b 81       	ldd	r18, Y+3	; 0x03
    1456:	3c 81       	ldd	r19, Y+4	; 0x04
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	2c f4       	brge	.+10     	; 0x1468 <MDIO_voidSetPortDirection+0x3e>
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	61 f0       	breq	.+24     	; 0x147e <MDIO_voidSetPortDirection+0x54>
    1466:	1e c0       	rjmp	.+60     	; 0x14a4 <MDIO_voidSetPortDirection+0x7a>
    1468:	2b 81       	ldd	r18, Y+3	; 0x03
    146a:	3c 81       	ldd	r19, Y+4	; 0x04
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	31 05       	cpc	r19, r1
    1470:	81 f0       	breq	.+32     	; 0x1492 <MDIO_voidSetPortDirection+0x68>
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	91 05       	cpc	r25, r1
    147a:	81 f0       	breq	.+32     	; 0x149c <MDIO_voidSetPortDirection+0x72>
    147c:	13 c0       	rjmp	.+38     	; 0x14a4 <MDIO_voidSetPortDirection+0x7a>
	{
		case MDIO_PORTA: DDRA=A_u8PortDirection; break;
    147e:	ea e3       	ldi	r30, 0x3A	; 58
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	80 83       	st	Z, r24
    1486:	0e c0       	rjmp	.+28     	; 0x14a4 <MDIO_voidSetPortDirection+0x7a>

		case MDIO_PORTB: DDRB=A_u8PortDirection; break;
    1488:	e7 e3       	ldi	r30, 0x37	; 55
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	80 83       	st	Z, r24
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <MDIO_voidSetPortDirection+0x7a>

		case MDIO_PORTC: DDRC=A_u8PortDirection; break;
    1492:	e4 e3       	ldi	r30, 0x34	; 52
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	80 83       	st	Z, r24
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <MDIO_voidSetPortDirection+0x7a>

		case MDIO_PORTD: DDRD=A_u8PortDirection; break;
    149c:	e1 e3       	ldi	r30, 0x31	; 49
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	80 83       	st	Z, r24

	}/*end if*/}
}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(port A_PortName,u8 A_u8PortValue)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <MDIO_voidSetPortValue+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <MDIO_voidSetPortValue+0x8>
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	6a 83       	std	Y+2, r22	; 0x02
if((A_PortName <= MDIO_PORTD)&&(A_u8PortValue <= 0xFF)){
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	84 30       	cpi	r24, 0x04	; 4
    14c6:	90 f5       	brcc	.+100    	; 0x152c <MDIO_voidSetPortValue+0x7a>

	switch(A_PortName)
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3c 83       	std	Y+4, r19	; 0x04
    14d0:	2b 83       	std	Y+3, r18	; 0x03
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	91 05       	cpc	r25, r1
    14da:	d1 f0       	breq	.+52     	; 0x1510 <MDIO_voidSetPortValue+0x5e>
    14dc:	2b 81       	ldd	r18, Y+3	; 0x03
    14de:	3c 81       	ldd	r19, Y+4	; 0x04
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <MDIO_voidSetPortValue+0x3e>
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	61 f0       	breq	.+24     	; 0x1506 <MDIO_voidSetPortValue+0x54>
    14ee:	1e c0       	rjmp	.+60     	; 0x152c <MDIO_voidSetPortValue+0x7a>
    14f0:	2b 81       	ldd	r18, Y+3	; 0x03
    14f2:	3c 81       	ldd	r19, Y+4	; 0x04
    14f4:	22 30       	cpi	r18, 0x02	; 2
    14f6:	31 05       	cpc	r19, r1
    14f8:	81 f0       	breq	.+32     	; 0x151a <MDIO_voidSetPortValue+0x68>
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	91 05       	cpc	r25, r1
    1502:	81 f0       	breq	.+32     	; 0x1524 <MDIO_voidSetPortValue+0x72>
    1504:	13 c0       	rjmp	.+38     	; 0x152c <MDIO_voidSetPortValue+0x7a>
	{
		case MDIO_PORTA: PORTA=A_u8PortValue; break;
    1506:	eb e3       	ldi	r30, 0x3B	; 59
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	80 83       	st	Z, r24
    150e:	0e c0       	rjmp	.+28     	; 0x152c <MDIO_voidSetPortValue+0x7a>

		case MDIO_PORTB: PORTB=A_u8PortValue; break;
    1510:	e8 e3       	ldi	r30, 0x38	; 56
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	80 83       	st	Z, r24
    1518:	09 c0       	rjmp	.+18     	; 0x152c <MDIO_voidSetPortValue+0x7a>

		case MDIO_PORTC: PORTC=A_u8PortValue; break;
    151a:	e5 e3       	ldi	r30, 0x35	; 53
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	80 83       	st	Z, r24
    1522:	04 c0       	rjmp	.+8      	; 0x152c <MDIO_voidSetPortValue+0x7a>

		case MDIO_PORTD: PORTD=A_u8PortValue; break;
    1524:	e2 e3       	ldi	r30, 0x32	; 50
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	80 83       	st	Z, r24

	}/*end if*/}
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <MDIO_U8ReadPortValue>:

u8 MDIO_U8ReadPortValue(port A_PortName)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <MDIO_U8ReadPortValue+0x6>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <MDIO_U8ReadPortValue+0x8>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	8a 83       	std	Y+2, r24	; 0x02
u8 L_u8PortValue=0;
    1548:	19 82       	std	Y+1, r1	; 0x01

if(A_PortName <= MDIO_PORTD){
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	84 30       	cpi	r24, 0x04	; 4
    154e:	90 f5       	brcc	.+100    	; 0x15b4 <MDIO_U8ReadPortValue+0x7a>

	switch(A_PortName)
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	3c 83       	std	Y+4, r19	; 0x04
    1558:	2b 83       	std	Y+3, r18	; 0x03
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	91 05       	cpc	r25, r1
    1562:	d1 f0       	breq	.+52     	; 0x1598 <MDIO_U8ReadPortValue+0x5e>
    1564:	2b 81       	ldd	r18, Y+3	; 0x03
    1566:	3c 81       	ldd	r19, Y+4	; 0x04
    1568:	22 30       	cpi	r18, 0x02	; 2
    156a:	31 05       	cpc	r19, r1
    156c:	2c f4       	brge	.+10     	; 0x1578 <MDIO_U8ReadPortValue+0x3e>
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	9c 81       	ldd	r25, Y+4	; 0x04
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	61 f0       	breq	.+24     	; 0x158e <MDIO_U8ReadPortValue+0x54>
    1576:	1e c0       	rjmp	.+60     	; 0x15b4 <MDIO_U8ReadPortValue+0x7a>
    1578:	2b 81       	ldd	r18, Y+3	; 0x03
    157a:	3c 81       	ldd	r19, Y+4	; 0x04
    157c:	22 30       	cpi	r18, 0x02	; 2
    157e:	31 05       	cpc	r19, r1
    1580:	81 f0       	breq	.+32     	; 0x15a2 <MDIO_U8ReadPortValue+0x68>
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	83 30       	cpi	r24, 0x03	; 3
    1588:	91 05       	cpc	r25, r1
    158a:	81 f0       	breq	.+32     	; 0x15ac <MDIO_U8ReadPortValue+0x72>
    158c:	13 c0       	rjmp	.+38     	; 0x15b4 <MDIO_U8ReadPortValue+0x7a>
	{
		case MDIO_PORTA: L_u8PortValue=PINA; break;
    158e:	e9 e3       	ldi	r30, 0x39	; 57
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	0e c0       	rjmp	.+28     	; 0x15b4 <MDIO_U8ReadPortValue+0x7a>

		case MDIO_PORTB: L_u8PortValue=PINB; break;
    1598:	e6 e3       	ldi	r30, 0x36	; 54
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	09 c0       	rjmp	.+18     	; 0x15b4 <MDIO_U8ReadPortValue+0x7a>

		case MDIO_PORTC: L_u8PortValue=PINC; break;
    15a2:	e3 e3       	ldi	r30, 0x33	; 51
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	04 c0       	rjmp	.+8      	; 0x15b4 <MDIO_U8ReadPortValue+0x7a>

		case MDIO_PORTD: L_u8PortValue=PIND; break;
    15ac:	e0 e3       	ldi	r30, 0x30	; 48
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	89 83       	std	Y+1, r24	; 0x01

	}/*end if*/}
	return L_u8PortValue;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <MDIO_voidSetLowNibbleDirection>:

void MDIO_voidSetLowNibbleDirection(port A_PortName)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <MDIO_voidSetLowNibbleDirection+0x6>
    15ca:	0f 92       	push	r0
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	89 83       	std	Y+1, r24	; 0x01
	if((A_PortName <= MDIO_PORTD)){
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	84 30       	cpi	r24, 0x04	; 4
    15d6:	08 f0       	brcs	.+2      	; 0x15da <MDIO_voidSetLowNibbleDirection+0x16>
    15d8:	94 c0       	rjmp	.+296    	; 0x1702 <MDIO_voidSetLowNibbleDirection+0x13e>

		switch(A_PortName)
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3b 83       	std	Y+3, r19	; 0x03
    15e2:	2a 83       	std	Y+2, r18	; 0x02
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	9b 81       	ldd	r25, Y+3	; 0x03
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	91 05       	cpc	r25, r1
    15ec:	a1 f1       	breq	.+104    	; 0x1656 <MDIO_voidSetLowNibbleDirection+0x92>
    15ee:	2a 81       	ldd	r18, Y+2	; 0x02
    15f0:	3b 81       	ldd	r19, Y+3	; 0x03
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	2c f4       	brge	.+10     	; 0x1602 <MDIO_voidSetLowNibbleDirection+0x3e>
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	71 f0       	breq	.+28     	; 0x161c <MDIO_voidSetLowNibbleDirection+0x58>
    1600:	80 c0       	rjmp	.+256    	; 0x1702 <MDIO_voidSetLowNibbleDirection+0x13e>
    1602:	2a 81       	ldd	r18, Y+2	; 0x02
    1604:	3b 81       	ldd	r19, Y+3	; 0x03
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <MDIO_voidSetLowNibbleDirection+0x4a>
    160c:	41 c0       	rjmp	.+130    	; 0x1690 <MDIO_voidSetLowNibbleDirection+0xcc>
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	9b 81       	ldd	r25, Y+3	; 0x03
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <MDIO_voidSetLowNibbleDirection+0x56>
    1618:	58 c0       	rjmp	.+176    	; 0x16ca <MDIO_voidSetLowNibbleDirection+0x106>
    161a:	73 c0       	rjmp	.+230    	; 0x1702 <MDIO_voidSetLowNibbleDirection+0x13e>
		{
			case MDIO_PORTA:

				MDIO_voidSetPinDirection(PORTA,0,OUTPUT);
    161c:	eb e3       	ldi	r30, 0x3B	; 59
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,1,OUTPUT);
    162a:	eb e3       	ldi	r30, 0x3B	; 59
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	41 e0       	ldi	r20, 0x01	; 1
    1634:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,2,OUTPUT);
    1638:	eb e3       	ldi	r30, 0x3B	; 59
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	62 e0       	ldi	r22, 0x02	; 2
    1640:	41 e0       	ldi	r20, 0x01	; 1
    1642:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,3,OUTPUT);
    1646:	eb e3       	ldi	r30, 0x3B	; 59
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	63 e0       	ldi	r22, 0x03	; 3
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
    1654:	56 c0       	rjmp	.+172    	; 0x1702 <MDIO_voidSetLowNibbleDirection+0x13e>
				break;

			case MDIO_PORTB:

				MDIO_voidSetPinDirection(PORTB,0,OUTPUT);
    1656:	e8 e3       	ldi	r30, 0x38	; 56
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,1,OUTPUT);
    1664:	e8 e3       	ldi	r30, 0x38	; 56
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,2,OUTPUT);
    1672:	e8 e3       	ldi	r30, 0x38	; 56
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	41 e0       	ldi	r20, 0x01	; 1
    167c:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,3,OUTPUT);
    1680:	e8 e3       	ldi	r30, 0x38	; 56
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	63 e0       	ldi	r22, 0x03	; 3
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
    168e:	39 c0       	rjmp	.+114    	; 0x1702 <MDIO_voidSetLowNibbleDirection+0x13e>
				break;

			case MDIO_PORTC:

				MDIO_voidSetPinDirection(PORTC,0,OUTPUT);
    1690:	e5 e3       	ldi	r30, 0x35	; 53
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	41 e0       	ldi	r20, 0x01	; 1
    169a:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,1,OUTPUT);
    169e:	e5 e3       	ldi	r30, 0x35	; 53
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,2,OUTPUT);
    16ac:	e5 e3       	ldi	r30, 0x35	; 53
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	62 e0       	ldi	r22, 0x02	; 2
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,3,OUTPUT);
    16ba:	e5 e3       	ldi	r30, 0x35	; 53
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	63 e0       	ldi	r22, 0x03	; 3
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
    16c8:	1c c0       	rjmp	.+56     	; 0x1702 <MDIO_voidSetLowNibbleDirection+0x13e>
				break;

			case MDIO_PORTD:

				MDIO_voidSetPinDirection(PORTD,0,OUTPUT);
    16ca:	e2 e3       	ldi	r30, 0x32	; 50
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,1,OUTPUT);
    16d8:	e2 e3       	ldi	r30, 0x32	; 50
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,2,OUTPUT);
    16e6:	e2 e3       	ldi	r30, 0x32	; 50
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	62 e0       	ldi	r22, 0x02	; 2
    16ee:	41 e0       	ldi	r20, 0x01	; 1
    16f0:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,3,OUTPUT);
    16f4:	e2 e3       	ldi	r30, 0x32	; 50
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	63 e0       	ldi	r22, 0x03	; 3
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				break;

		}/*end if*/}
}
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <MDIO_voidSetHighNibbleDirection>:

void MDIO_voidSetHighNibbleDirection(port A_PortName)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <MDIO_voidSetHighNibbleDirection+0x6>
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
	if((A_PortName <= MDIO_PORTD)){
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	84 30       	cpi	r24, 0x04	; 4
    1720:	08 f0       	brcs	.+2      	; 0x1724 <MDIO_voidSetHighNibbleDirection+0x16>
    1722:	94 c0       	rjmp	.+296    	; 0x184c <MDIO_voidSetHighNibbleDirection+0x13e>

		switch(A_PortName)
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	3b 83       	std	Y+3, r19	; 0x03
    172c:	2a 83       	std	Y+2, r18	; 0x02
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	9b 81       	ldd	r25, Y+3	; 0x03
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	a1 f1       	breq	.+104    	; 0x17a0 <MDIO_voidSetHighNibbleDirection+0x92>
    1738:	2a 81       	ldd	r18, Y+2	; 0x02
    173a:	3b 81       	ldd	r19, Y+3	; 0x03
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	2c f4       	brge	.+10     	; 0x174c <MDIO_voidSetHighNibbleDirection+0x3e>
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	9b 81       	ldd	r25, Y+3	; 0x03
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	71 f0       	breq	.+28     	; 0x1766 <MDIO_voidSetHighNibbleDirection+0x58>
    174a:	80 c0       	rjmp	.+256    	; 0x184c <MDIO_voidSetHighNibbleDirection+0x13e>
    174c:	2a 81       	ldd	r18, Y+2	; 0x02
    174e:	3b 81       	ldd	r19, Y+3	; 0x03
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	09 f4       	brne	.+2      	; 0x1758 <MDIO_voidSetHighNibbleDirection+0x4a>
    1756:	41 c0       	rjmp	.+130    	; 0x17da <MDIO_voidSetHighNibbleDirection+0xcc>
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	9b 81       	ldd	r25, Y+3	; 0x03
    175c:	83 30       	cpi	r24, 0x03	; 3
    175e:	91 05       	cpc	r25, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <MDIO_voidSetHighNibbleDirection+0x56>
    1762:	58 c0       	rjmp	.+176    	; 0x1814 <MDIO_voidSetHighNibbleDirection+0x106>
    1764:	73 c0       	rjmp	.+230    	; 0x184c <MDIO_voidSetHighNibbleDirection+0x13e>
		{
			case MDIO_PORTA:

				MDIO_voidSetPinDirection(PORTA,4,OUTPUT);
    1766:	eb e3       	ldi	r30, 0x3B	; 59
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	64 e0       	ldi	r22, 0x04	; 4
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,5,OUTPUT);
    1774:	eb e3       	ldi	r30, 0x3B	; 59
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	65 e0       	ldi	r22, 0x05	; 5
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,6,OUTPUT);
    1782:	eb e3       	ldi	r30, 0x3B	; 59
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	66 e0       	ldi	r22, 0x06	; 6
    178a:	41 e0       	ldi	r20, 0x01	; 1
    178c:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,7,OUTPUT);
    1790:	eb e3       	ldi	r30, 0x3B	; 59
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	67 e0       	ldi	r22, 0x07	; 7
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
    179e:	56 c0       	rjmp	.+172    	; 0x184c <MDIO_voidSetHighNibbleDirection+0x13e>
				break;

			case MDIO_PORTB:

				MDIO_voidSetPinDirection(PORTB,4,OUTPUT);
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	64 e0       	ldi	r22, 0x04	; 4
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,5,OUTPUT);
    17ae:	e8 e3       	ldi	r30, 0x38	; 56
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	65 e0       	ldi	r22, 0x05	; 5
    17b6:	41 e0       	ldi	r20, 0x01	; 1
    17b8:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,6,OUTPUT);
    17bc:	e8 e3       	ldi	r30, 0x38	; 56
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	66 e0       	ldi	r22, 0x06	; 6
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,7,OUTPUT);
    17ca:	e8 e3       	ldi	r30, 0x38	; 56
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	67 e0       	ldi	r22, 0x07	; 7
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
    17d8:	39 c0       	rjmp	.+114    	; 0x184c <MDIO_voidSetHighNibbleDirection+0x13e>
				break;

			case MDIO_PORTC:

				MDIO_voidSetPinDirection(PORTC,4,OUTPUT);
    17da:	e5 e3       	ldi	r30, 0x35	; 53
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	64 e0       	ldi	r22, 0x04	; 4
    17e2:	41 e0       	ldi	r20, 0x01	; 1
    17e4:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,5,OUTPUT);
    17e8:	e5 e3       	ldi	r30, 0x35	; 53
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	65 e0       	ldi	r22, 0x05	; 5
    17f0:	41 e0       	ldi	r20, 0x01	; 1
    17f2:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,6,OUTPUT);
    17f6:	e5 e3       	ldi	r30, 0x35	; 53
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	66 e0       	ldi	r22, 0x06	; 6
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,7,OUTPUT);
    1804:	e5 e3       	ldi	r30, 0x35	; 53
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	67 e0       	ldi	r22, 0x07	; 7
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
    1812:	1c c0       	rjmp	.+56     	; 0x184c <MDIO_voidSetHighNibbleDirection+0x13e>
				break;

			case MDIO_PORTD:

				MDIO_voidSetPinDirection(PORTD,4,OUTPUT);
    1814:	e2 e3       	ldi	r30, 0x32	; 50
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	64 e0       	ldi	r22, 0x04	; 4
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,5,OUTPUT);
    1822:	e2 e3       	ldi	r30, 0x32	; 50
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	65 e0       	ldi	r22, 0x05	; 5
    182a:	41 e0       	ldi	r20, 0x01	; 1
    182c:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,6,OUTPUT);
    1830:	e2 e3       	ldi	r30, 0x32	; 50
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	66 e0       	ldi	r22, 0x06	; 6
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,7,OUTPUT);
    183e:	e2 e3       	ldi	r30, 0x32	; 50
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	67 e0       	ldi	r22, 0x07	; 7
    1846:	41 e0       	ldi	r20, 0x01	; 1
    1848:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
				break;

		}/*end if*/}
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <MDIO_voidSetLowNibble>:

void MDIO_voidSetLowNibble(port A_PortName,u8 A_u8Value)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	00 d0       	rcall	.+0      	; 0x185e <MDIO_voidSetLowNibble+0x6>
    185e:	00 d0       	rcall	.+0      	; 0x1860 <MDIO_voidSetLowNibble+0x8>
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	6a 83       	std	Y+2, r22	; 0x02
	A_u8Value &= 0x0F;
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	8f 70       	andi	r24, 0x0F	; 15
    186c:	8a 83       	std	Y+2, r24	; 0x02

	if((A_PortName <= MDIO_PORTD)){
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	84 30       	cpi	r24, 0x04	; 4
    1872:	08 f0       	brcs	.+2      	; 0x1876 <MDIO_voidSetLowNibble+0x1e>
    1874:	5e c0       	rjmp	.+188    	; 0x1932 <MDIO_voidSetLowNibble+0xda>

		switch(A_PortName)
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	3c 83       	std	Y+4, r19	; 0x04
    187e:	2b 83       	std	Y+3, r18	; 0x03
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	91 05       	cpc	r25, r1
    1888:	29 f1       	breq	.+74     	; 0x18d4 <MDIO_voidSetLowNibble+0x7c>
    188a:	2b 81       	ldd	r18, Y+3	; 0x03
    188c:	3c 81       	ldd	r19, Y+4	; 0x04
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	2c f4       	brge	.+10     	; 0x189e <MDIO_voidSetLowNibble+0x46>
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	61 f0       	breq	.+24     	; 0x18b4 <MDIO_voidSetLowNibble+0x5c>
    189c:	4a c0       	rjmp	.+148    	; 0x1932 <MDIO_voidSetLowNibble+0xda>
    189e:	2b 81       	ldd	r18, Y+3	; 0x03
    18a0:	3c 81       	ldd	r19, Y+4	; 0x04
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	31 f1       	breq	.+76     	; 0x18f4 <MDIO_voidSetLowNibble+0x9c>
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	91 05       	cpc	r25, r1
    18b0:	89 f1       	breq	.+98     	; 0x1914 <MDIO_voidSetLowNibble+0xbc>
    18b2:	3f c0       	rjmp	.+126    	; 0x1932 <MDIO_voidSetLowNibble+0xda>
		{
			case MDIO_PORTA: PORTA &= 0xF0; PORTA |= A_u8Value; break;
    18b4:	ab e3       	ldi	r26, 0x3B	; 59
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	eb e3       	ldi	r30, 0x3B	; 59
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	80 7f       	andi	r24, 0xF0	; 240
    18c0:	8c 93       	st	X, r24
    18c2:	ab e3       	ldi	r26, 0x3B	; 59
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	eb e3       	ldi	r30, 0x3B	; 59
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	90 81       	ld	r25, Z
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	89 2b       	or	r24, r25
    18d0:	8c 93       	st	X, r24
    18d2:	2f c0       	rjmp	.+94     	; 0x1932 <MDIO_voidSetLowNibble+0xda>

			case MDIO_PORTB: PORTB &= 0xF0; PORTB |= A_u8Value; break;
    18d4:	a8 e3       	ldi	r26, 0x38	; 56
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e8 e3       	ldi	r30, 0x38	; 56
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 7f       	andi	r24, 0xF0	; 240
    18e0:	8c 93       	st	X, r24
    18e2:	a8 e3       	ldi	r26, 0x38	; 56
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	90 81       	ld	r25, Z
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	89 2b       	or	r24, r25
    18f0:	8c 93       	st	X, r24
    18f2:	1f c0       	rjmp	.+62     	; 0x1932 <MDIO_voidSetLowNibble+0xda>

			case MDIO_PORTC: PORTC &= 0xF0; PORTC |= A_u8Value; break;
    18f4:	a5 e3       	ldi	r26, 0x35	; 53
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e3       	ldi	r30, 0x35	; 53
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	80 7f       	andi	r24, 0xF0	; 240
    1900:	8c 93       	st	X, r24
    1902:	a5 e3       	ldi	r26, 0x35	; 53
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e3       	ldi	r30, 0x35	; 53
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	90 81       	ld	r25, Z
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	89 2b       	or	r24, r25
    1910:	8c 93       	st	X, r24
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <MDIO_voidSetLowNibble+0xda>

			case MDIO_PORTD: PORTD &= 0xF0; PORTD |= A_u8Value; break;
    1914:	a2 e3       	ldi	r26, 0x32	; 50
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e2 e3       	ldi	r30, 0x32	; 50
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	80 7f       	andi	r24, 0xF0	; 240
    1920:	8c 93       	st	X, r24
    1922:	a2 e3       	ldi	r26, 0x32	; 50
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e2 e3       	ldi	r30, 0x32	; 50
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	90 81       	ld	r25, Z
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	89 2b       	or	r24, r25
    1930:	8c 93       	st	X, r24

		}/*end if*/}
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <MDIO_voidSetHighNibble>:

void MDIO_voidSetHighNibble(port A_PortName,u8 A_u8Value)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <MDIO_voidSetHighNibble+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <MDIO_voidSetHighNibble+0x8>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	6a 83       	std	Y+2, r22	; 0x02
	A_u8Value <<=4;
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	82 95       	swap	r24
    1954:	80 7f       	andi	r24, 0xF0	; 240
    1956:	8a 83       	std	Y+2, r24	; 0x02
	A_u8Value &= 0xF0;
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	80 7f       	andi	r24, 0xF0	; 240
    195c:	8a 83       	std	Y+2, r24	; 0x02

	if((A_PortName <= MDIO_PORTD)){
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	84 30       	cpi	r24, 0x04	; 4
    1962:	08 f0       	brcs	.+2      	; 0x1966 <MDIO_voidSetHighNibble+0x26>
    1964:	5e c0       	rjmp	.+188    	; 0x1a22 <MDIO_voidSetHighNibble+0xe2>

		switch(A_PortName)
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	3c 83       	std	Y+4, r19	; 0x04
    196e:	2b 83       	std	Y+3, r18	; 0x03
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	91 05       	cpc	r25, r1
    1978:	29 f1       	breq	.+74     	; 0x19c4 <MDIO_voidSetHighNibble+0x84>
    197a:	2b 81       	ldd	r18, Y+3	; 0x03
    197c:	3c 81       	ldd	r19, Y+4	; 0x04
    197e:	22 30       	cpi	r18, 0x02	; 2
    1980:	31 05       	cpc	r19, r1
    1982:	2c f4       	brge	.+10     	; 0x198e <MDIO_voidSetHighNibble+0x4e>
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	61 f0       	breq	.+24     	; 0x19a4 <MDIO_voidSetHighNibble+0x64>
    198c:	4a c0       	rjmp	.+148    	; 0x1a22 <MDIO_voidSetHighNibble+0xe2>
    198e:	2b 81       	ldd	r18, Y+3	; 0x03
    1990:	3c 81       	ldd	r19, Y+4	; 0x04
    1992:	22 30       	cpi	r18, 0x02	; 2
    1994:	31 05       	cpc	r19, r1
    1996:	31 f1       	breq	.+76     	; 0x19e4 <MDIO_voidSetHighNibble+0xa4>
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	83 30       	cpi	r24, 0x03	; 3
    199e:	91 05       	cpc	r25, r1
    19a0:	89 f1       	breq	.+98     	; 0x1a04 <MDIO_voidSetHighNibble+0xc4>
    19a2:	3f c0       	rjmp	.+126    	; 0x1a22 <MDIO_voidSetHighNibble+0xe2>
		{
			case MDIO_PORTA: PORTA &= 0x0F; PORTA |= A_u8Value; break;
    19a4:	ab e3       	ldi	r26, 0x3B	; 59
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	eb e3       	ldi	r30, 0x3B	; 59
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 70       	andi	r24, 0x0F	; 15
    19b0:	8c 93       	st	X, r24
    19b2:	ab e3       	ldi	r26, 0x3B	; 59
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	eb e3       	ldi	r30, 0x3B	; 59
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	90 81       	ld	r25, Z
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	89 2b       	or	r24, r25
    19c0:	8c 93       	st	X, r24
    19c2:	2f c0       	rjmp	.+94     	; 0x1a22 <MDIO_voidSetHighNibble+0xe2>

			case MDIO_PORTB: PORTB &= 0x0F; PORTB |= A_u8Value; break;
    19c4:	a8 e3       	ldi	r26, 0x38	; 56
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e8 e3       	ldi	r30, 0x38	; 56
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	8f 70       	andi	r24, 0x0F	; 15
    19d0:	8c 93       	st	X, r24
    19d2:	a8 e3       	ldi	r26, 0x38	; 56
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e8 e3       	ldi	r30, 0x38	; 56
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	90 81       	ld	r25, Z
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	89 2b       	or	r24, r25
    19e0:	8c 93       	st	X, r24
    19e2:	1f c0       	rjmp	.+62     	; 0x1a22 <MDIO_voidSetHighNibble+0xe2>

			case MDIO_PORTC: PORTC &= 0x0F; PORTC |= A_u8Value; break;
    19e4:	a5 e3       	ldi	r26, 0x35	; 53
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e3       	ldi	r30, 0x35	; 53
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	8f 70       	andi	r24, 0x0F	; 15
    19f0:	8c 93       	st	X, r24
    19f2:	a5 e3       	ldi	r26, 0x35	; 53
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e5 e3       	ldi	r30, 0x35	; 53
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	90 81       	ld	r25, Z
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	89 2b       	or	r24, r25
    1a00:	8c 93       	st	X, r24
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <MDIO_voidSetHighNibble+0xe2>

			case MDIO_PORTD: PORTD &= 0x0F; PORTD |= A_u8Value; break;
    1a04:	a2 e3       	ldi	r26, 0x32	; 50
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e2 e3       	ldi	r30, 0x32	; 50
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8f 70       	andi	r24, 0x0F	; 15
    1a10:	8c 93       	st	X, r24
    1a12:	a2 e3       	ldi	r26, 0x32	; 50
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e2 e3       	ldi	r30, 0x32	; 50
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	90 81       	ld	r25, Z
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	89 2b       	or	r24, r25
    1a20:	8c 93       	st	X, r24

		}/*end if*/}
}
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <HSSD_voidInit>:




void HSSD_voidInit(port A_PortName)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	0f 92       	push	r0
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPortDirection(A_PortName,0xFF);
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	6f ef       	ldi	r22, 0xFF	; 255
    1a40:	0e 94 15 0a 	call	0x142a	; 0x142a <MDIO_voidSetPortDirection>
}
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <HSSD_voidDisplayNUM>:


void HSSD_voidDisplayNUM(port A_PortName,u8 A_u8NUM)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <HSSD_voidDisplayNUM+0x6>
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	6a 83       	std	Y+2, r22	; 0x02
	#ifdef COM_Cathode
		MDIO_voidSetPortValue(A_PortName,G_u8NUMs[A_u8NUM]);
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	fc 01       	movw	r30, r24
    1a62:	e0 55       	subi	r30, 0x50	; 80
    1a64:	fe 4f       	sbci	r31, 0xFE	; 254
    1a66:	90 81       	ld	r25, Z
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	69 2f       	mov	r22, r25
    1a6c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <MDIO_voidSetPortValue>
	#elif COM_Anode
		MDIO_voidSetPortValue(A_PortName,~G_u8NUMs[A_u8NUM]);
	#endif

}
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <HSSD_voidTurnOff>:

void HSSD_voidTurnOff(port A_PortName)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	0f 92       	push	r0
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	89 83       	std	Y+1, r24	; 0x01
	#ifdef COM_Cathode
		MDIO_voidSetPortValue(A_PortName,0x00);
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <MDIO_voidSetPortValue>
	#elif COM_Anode
		MDIO_voidSetPortValue(A_PortName,0xFF);
	#endif
}
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <HSSD_voidCountUP>:

void HSSD_voidCountUP(port A_PortName,u8 A_u8NUM)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	61 97       	sbiw	r28, 0x11	; 17
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	88 8b       	std	Y+16, r24	; 0x10
    1aac:	69 8b       	std	Y+17, r22	; 0x11
	for(u8 counter=A_u8NUM;counter<=9 ;counter++)
    1aae:	89 89       	ldd	r24, Y+17	; 0x11
    1ab0:	8f 87       	std	Y+15, r24	; 0x0f
    1ab2:	79 c0       	rjmp	.+242    	; 0x1ba6 <HSSD_voidCountUP+0x110>
	{
		HSSD_voidDisplayNUM(A_PortName,counter);
    1ab4:	88 89       	ldd	r24, Y+16	; 0x10
    1ab6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ab8:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <HSSD_voidDisplayNUM>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	aa e7       	ldi	r26, 0x7A	; 122
    1ac2:	b4 e4       	ldi	r27, 0x44	; 68
    1ac4:	8b 87       	std	Y+11, r24	; 0x0b
    1ac6:	9c 87       	std	Y+12, r25	; 0x0c
    1ac8:	ad 87       	std	Y+13, r26	; 0x0d
    1aca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4a ef       	ldi	r20, 0xFA	; 250
    1ada:	54 e4       	ldi	r21, 0x44	; 68
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	8f 83       	std	Y+7, r24	; 0x07
    1ae6:	98 87       	std	Y+8, r25	; 0x08
    1ae8:	a9 87       	std	Y+9, r26	; 0x09
    1aea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aec:	6f 81       	ldd	r22, Y+7	; 0x07
    1aee:	78 85       	ldd	r23, Y+8	; 0x08
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <HSSD_voidCountUP+0x78>
		__ticks = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	3f c0       	rjmp	.+126    	; 0x1b8c <HSSD_voidCountUP+0xf6>
	else if (__tmp > 65535)
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	4f e7       	ldi	r20, 0x7F	; 127
    1b1c:	57 e4       	ldi	r21, 0x47	; 71
    1b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	4c f5       	brge	.+82     	; 0x1b78 <HSSD_voidCountUP+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e2       	ldi	r20, 0x20	; 32
    1b34:	51 e4       	ldi	r21, 0x41	; 65
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	0f c0       	rjmp	.+30     	; 0x1b6e <HSSD_voidCountUP+0xd8>
    1b50:	88 ec       	ldi	r24, 0xC8	; 200
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <HSSD_voidCountUP+0xc6>
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	69 f7       	brne	.-38     	; 0x1b50 <HSSD_voidCountUP+0xba>
    1b76:	14 c0       	rjmp	.+40     	; 0x1ba0 <HSSD_voidCountUP+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	9e 83       	std	Y+6, r25	; 0x06
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <HSSD_voidCountUP+0x102>
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
	#endif
}

void HSSD_voidCountUP(port A_PortName,u8 A_u8NUM)
{
	for(u8 counter=A_u8NUM;counter<=9 ;counter++)
    1ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba2:	8f 5f       	subi	r24, 0xFF	; 255
    1ba4:	8f 87       	std	Y+15, r24	; 0x0f
    1ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba8:	8a 30       	cpi	r24, 0x0A	; 10
    1baa:	08 f4       	brcc	.+2      	; 0x1bae <HSSD_voidCountUP+0x118>
    1bac:	83 cf       	rjmp	.-250    	; 0x1ab4 <HSSD_voidCountUP+0x1e>
	{
		HSSD_voidDisplayNUM(A_PortName,counter);
		_delay_ms(1000);
	}
}
    1bae:	61 96       	adiw	r28, 0x11	; 17
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <HSSD_voidCountDown>:

void HSSD_voidCountDown(port A_PortName,u8 A_u8NUM)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	61 97       	sbiw	r28, 0x11	; 17
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	88 8b       	std	Y+16, r24	; 0x10
    1bd6:	69 8b       	std	Y+17, r22	; 0x11
	for(u8 counter=A_u8NUM;counter>=0 ;counter--)
    1bd8:	89 89       	ldd	r24, Y+17	; 0x11
    1bda:	8f 87       	std	Y+15, r24	; 0x0f
	{
		HSSD_voidDisplayNUM(A_PortName,counter);
    1bdc:	88 89       	ldd	r24, Y+16	; 0x10
    1bde:	6f 85       	ldd	r22, Y+15	; 0x0f
    1be0:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <HSSD_voidDisplayNUM>
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	aa e7       	ldi	r26, 0x7A	; 122
    1bea:	b4 e4       	ldi	r27, 0x44	; 68
    1bec:	8b 87       	std	Y+11, r24	; 0x0b
    1bee:	9c 87       	std	Y+12, r25	; 0x0c
    1bf0:	ad 87       	std	Y+13, r26	; 0x0d
    1bf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	4a ef       	ldi	r20, 0xFA	; 250
    1c02:	54 e4       	ldi	r21, 0x44	; 68
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	8f 83       	std	Y+7, r24	; 0x07
    1c0e:	98 87       	std	Y+8, r25	; 0x08
    1c10:	a9 87       	std	Y+9, r26	; 0x09
    1c12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c14:	6f 81       	ldd	r22, Y+7	; 0x07
    1c16:	78 85       	ldd	r23, Y+8	; 0x08
    1c18:	89 85       	ldd	r24, Y+9	; 0x09
    1c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e8       	ldi	r20, 0x80	; 128
    1c22:	5f e3       	ldi	r21, 0x3F	; 63
    1c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c28:	88 23       	and	r24, r24
    1c2a:	2c f4       	brge	.+10     	; 0x1c36 <HSSD_voidCountDown+0x76>
		__ticks = 1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9e 83       	std	Y+6, r25	; 0x06
    1c32:	8d 83       	std	Y+5, r24	; 0x05
    1c34:	3f c0       	rjmp	.+126    	; 0x1cb4 <HSSD_voidCountDown+0xf4>
	else if (__tmp > 65535)
    1c36:	6f 81       	ldd	r22, Y+7	; 0x07
    1c38:	78 85       	ldd	r23, Y+8	; 0x08
    1c3a:	89 85       	ldd	r24, Y+9	; 0x09
    1c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	3f ef       	ldi	r19, 0xFF	; 255
    1c42:	4f e7       	ldi	r20, 0x7F	; 127
    1c44:	57 e4       	ldi	r21, 0x47	; 71
    1c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c4a:	18 16       	cp	r1, r24
    1c4c:	4c f5       	brge	.+82     	; 0x1ca0 <HSSD_voidCountDown+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e2       	ldi	r20, 0x20	; 32
    1c5c:	51 e4       	ldi	r21, 0x41	; 65
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	0f c0       	rjmp	.+30     	; 0x1c96 <HSSD_voidCountDown+0xd6>
    1c78:	88 ec       	ldi	r24, 0xC8	; 200
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9c 83       	std	Y+4, r25	; 0x04
    1c7e:	8b 83       	std	Y+3, r24	; 0x03
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <HSSD_voidCountDown+0xc4>
    1c88:	9c 83       	std	Y+4, r25	; 0x04
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	9e 83       	std	Y+6, r25	; 0x06
    1c94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	69 f7       	brne	.-38     	; 0x1c78 <HSSD_voidCountDown+0xb8>
    1c9e:	14 c0       	rjmp	.+40     	; 0x1cc8 <HSSD_voidCountDown+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca2:	78 85       	ldd	r23, Y+8	; 0x08
    1ca4:	89 85       	ldd	r24, Y+9	; 0x09
    1ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9e 83       	std	Y+6, r25	; 0x06
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	9a 83       	std	Y+2, r25	; 0x02
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <HSSD_voidCountDown+0x100>
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
	}
}

void HSSD_voidCountDown(port A_PortName,u8 A_u8NUM)
{
	for(u8 counter=A_u8NUM;counter>=0 ;counter--)
    1cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cca:	81 50       	subi	r24, 0x01	; 1
    1ccc:	8f 87       	std	Y+15, r24	; 0x0f
    1cce:	86 cf       	rjmp	.-244    	; 0x1bdc <HSSD_voidCountDown+0x1c>

00001cd0 <HLCD_voidGenerateBulse>:
 */

#include "HLCD.h"

static void HLCD_voidGenerateBulse()
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	6c 97       	sbiw	r28, 0x1c	; 28
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinValue(LCD_Control_PORT,EN,HIGH);
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	66 e0       	ldi	r22, 0x06	; 6
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a0 e0       	ldi	r26, 0x00	; 0
    1cf4:	b0 e4       	ldi	r27, 0x40	; 64
    1cf6:	89 8f       	std	Y+25, r24	; 0x19
    1cf8:	9a 8f       	std	Y+26, r25	; 0x1a
    1cfa:	ab 8f       	std	Y+27, r26	; 0x1b
    1cfc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfe:	69 8d       	ldd	r22, Y+25	; 0x19
    1d00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	4a ef       	ldi	r20, 0xFA	; 250
    1d0c:	54 e4       	ldi	r21, 0x44	; 68
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	8d 8b       	std	Y+21, r24	; 0x15
    1d18:	9e 8b       	std	Y+22, r25	; 0x16
    1d1a:	af 8b       	std	Y+23, r26	; 0x17
    1d1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d20:	7e 89       	ldd	r23, Y+22	; 0x16
    1d22:	8f 89       	ldd	r24, Y+23	; 0x17
    1d24:	98 8d       	ldd	r25, Y+24	; 0x18
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d32:	88 23       	and	r24, r24
    1d34:	2c f4       	brge	.+10     	; 0x1d40 <HLCD_voidGenerateBulse+0x70>
		__ticks = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9c 8b       	std	Y+20, r25	; 0x14
    1d3c:	8b 8b       	std	Y+19, r24	; 0x13
    1d3e:	3f c0       	rjmp	.+126    	; 0x1dbe <HLCD_voidGenerateBulse+0xee>
	else if (__tmp > 65535)
    1d40:	6d 89       	ldd	r22, Y+21	; 0x15
    1d42:	7e 89       	ldd	r23, Y+22	; 0x16
    1d44:	8f 89       	ldd	r24, Y+23	; 0x17
    1d46:	98 8d       	ldd	r25, Y+24	; 0x18
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	4c f5       	brge	.+82     	; 0x1daa <HLCD_voidGenerateBulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e2       	ldi	r20, 0x20	; 32
    1d66:	51 e4       	ldi	r21, 0x41	; 65
    1d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	9c 8b       	std	Y+20, r25	; 0x14
    1d7e:	8b 8b       	std	Y+19, r24	; 0x13
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <HLCD_voidGenerateBulse+0xd0>
    1d82:	88 ec       	ldi	r24, 0xC8	; 200
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9a 8b       	std	Y+18, r25	; 0x12
    1d88:	89 8b       	std	Y+17, r24	; 0x11
    1d8a:	89 89       	ldd	r24, Y+17	; 0x11
    1d8c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <HLCD_voidGenerateBulse+0xbe>
    1d92:	9a 8b       	std	Y+18, r25	; 0x12
    1d94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d96:	8b 89       	ldd	r24, Y+19	; 0x13
    1d98:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	9c 8b       	std	Y+20, r25	; 0x14
    1d9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da0:	8b 89       	ldd	r24, Y+19	; 0x13
    1da2:	9c 89       	ldd	r25, Y+20	; 0x14
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	69 f7       	brne	.-38     	; 0x1d82 <HLCD_voidGenerateBulse+0xb2>
    1da8:	14 c0       	rjmp	.+40     	; 0x1dd2 <HLCD_voidGenerateBulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1daa:	6d 89       	ldd	r22, Y+21	; 0x15
    1dac:	7e 89       	ldd	r23, Y+22	; 0x16
    1dae:	8f 89       	ldd	r24, Y+23	; 0x17
    1db0:	98 8d       	ldd	r25, Y+24	; 0x18
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9c 8b       	std	Y+20, r25	; 0x14
    1dbc:	8b 8b       	std	Y+19, r24	; 0x13
    1dbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc2:	98 8b       	std	Y+16, r25	; 0x10
    1dc4:	8f 87       	std	Y+15, r24	; 0x0f
    1dc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc8:	98 89       	ldd	r25, Y+16	; 0x10
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <HLCD_voidGenerateBulse+0xfa>
    1dce:	98 8b       	std	Y+16, r25	; 0x10
    1dd0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_Control_PORT,EN,LOW);
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	66 e0       	ldi	r22, 0x06	; 6
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a0 e0       	ldi	r26, 0x00	; 0
    1de2:	b0 e4       	ldi	r27, 0x40	; 64
    1de4:	8b 87       	std	Y+11, r24	; 0x0b
    1de6:	9c 87       	std	Y+12, r25	; 0x0c
    1de8:	ad 87       	std	Y+13, r26	; 0x0d
    1dea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	4a ef       	ldi	r20, 0xFA	; 250
    1dfa:	54 e4       	ldi	r21, 0x44	; 68
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	8f 83       	std	Y+7, r24	; 0x07
    1e06:	98 87       	std	Y+8, r25	; 0x08
    1e08:	a9 87       	std	Y+9, r26	; 0x09
    1e0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0e:	78 85       	ldd	r23, Y+8	; 0x08
    1e10:	89 85       	ldd	r24, Y+9	; 0x09
    1e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e8       	ldi	r20, 0x80	; 128
    1e1a:	5f e3       	ldi	r21, 0x3F	; 63
    1e1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e20:	88 23       	and	r24, r24
    1e22:	2c f4       	brge	.+10     	; 0x1e2e <HLCD_voidGenerateBulse+0x15e>
		__ticks = 1;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
    1e2c:	3f c0       	rjmp	.+126    	; 0x1eac <HLCD_voidGenerateBulse+0x1dc>
	else if (__tmp > 65535)
    1e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e30:	78 85       	ldd	r23, Y+8	; 0x08
    1e32:	89 85       	ldd	r24, Y+9	; 0x09
    1e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	3f ef       	ldi	r19, 0xFF	; 255
    1e3a:	4f e7       	ldi	r20, 0x7F	; 127
    1e3c:	57 e4       	ldi	r21, 0x47	; 71
    1e3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e42:	18 16       	cp	r1, r24
    1e44:	4c f5       	brge	.+82     	; 0x1e98 <HLCD_voidGenerateBulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e2       	ldi	r20, 0x20	; 32
    1e54:	51 e4       	ldi	r21, 0x41	; 65
    1e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	bc 01       	movw	r22, r24
    1e60:	cd 01       	movw	r24, r26
    1e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
    1e6e:	0f c0       	rjmp	.+30     	; 0x1e8e <HLCD_voidGenerateBulse+0x1be>
    1e70:	88 ec       	ldi	r24, 0xC8	; 200
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9c 83       	std	Y+4, r25	; 0x04
    1e76:	8b 83       	std	Y+3, r24	; 0x03
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <HLCD_voidGenerateBulse+0x1ac>
    1e80:	9c 83       	std	Y+4, r25	; 0x04
    1e82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	69 f7       	brne	.-38     	; 0x1e70 <HLCD_voidGenerateBulse+0x1a0>
    1e96:	14 c0       	rjmp	.+40     	; 0x1ec0 <HLCD_voidGenerateBulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	9e 83       	std	Y+6, r25	; 0x06
    1eaa:	8d 83       	std	Y+5, r24	; 0x05
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb0:	9a 83       	std	Y+2, r25	; 0x02
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <HLCD_voidGenerateBulse+0x1e8>
    1ebc:	9a 83       	std	Y+2, r25	; 0x02
    1ebe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ec0:	6c 96       	adiw	r28, 0x1c	; 28
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <HLCD_voidInit>:
}

#elif (LCD_MODE == FOUR_BIT)

void HLCD_voidInit()
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	e8 97       	sbiw	r28, 0x38	; 56
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a8 e4       	ldi	r26, 0x48	; 72
    1eec:	b2 e4       	ldi	r27, 0x42	; 66
    1eee:	8d ab       	std	Y+53, r24	; 0x35
    1ef0:	9e ab       	std	Y+54, r25	; 0x36
    1ef2:	af ab       	std	Y+55, r26	; 0x37
    1ef4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef8:	7e a9       	ldd	r23, Y+54	; 0x36
    1efa:	8f a9       	ldd	r24, Y+55	; 0x37
    1efc:	98 ad       	ldd	r25, Y+56	; 0x38
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a ef       	ldi	r20, 0xFA	; 250
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	89 ab       	std	Y+49, r24	; 0x31
    1f10:	9a ab       	std	Y+50, r25	; 0x32
    1f12:	ab ab       	std	Y+51, r26	; 0x33
    1f14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f16:	69 a9       	ldd	r22, Y+49	; 0x31
    1f18:	7a a9       	ldd	r23, Y+50	; 0x32
    1f1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <HLCD_voidInit+0x66>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	98 ab       	std	Y+48, r25	; 0x30
    1f34:	8f a7       	std	Y+47, r24	; 0x2f
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1f38:	69 a9       	ldd	r22, Y+49	; 0x31
    1f3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	6d a9       	ldd	r22, Y+53	; 0x35
    1f52:	7e a9       	ldd	r23, Y+54	; 0x36
    1f54:	8f a9       	ldd	r24, Y+55	; 0x37
    1f56:	98 ad       	ldd	r25, Y+56	; 0x38
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	98 ab       	std	Y+48, r25	; 0x30
    1f76:	8f a7       	std	Y+47, r24	; 0x2f
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <HLCD_voidInit+0xc6>
    1f7a:	88 ec       	ldi	r24, 0xC8	; 200
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9e a7       	std	Y+46, r25	; 0x2e
    1f80:	8d a7       	std	Y+45, r24	; 0x2d
    1f82:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f84:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <HLCD_voidInit+0xb4>
    1f8a:	9e a7       	std	Y+46, r25	; 0x2e
    1f8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f90:	98 a9       	ldd	r25, Y+48	; 0x30
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	98 ab       	std	Y+48, r25	; 0x30
    1f96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <HLCD_voidInit+0xa8>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa8:	9c a9       	ldd	r25, Y+52	; 0x34
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	98 ab       	std	Y+48, r25	; 0x30
    1fb4:	8f a7       	std	Y+47, r24	; 0x2f
    1fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fba:	9c a7       	std	Y+44, r25	; 0x2c
    1fbc:	8b a7       	std	Y+43, r24	; 0x2b
    1fbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fc0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <HLCD_voidInit+0xf0>
    1fc6:	9c a7       	std	Y+44, r25	; 0x2c
    1fc8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);

	MDIO_voidSetPinDirection(LCD_Control_PORT,RS,OUTPUT);
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	64 e0       	ldi	r22, 0x04	; 4
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_Control_PORT,RW,OUTPUT);
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	65 e0       	ldi	r22, 0x05	; 5
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_Control_PORT,EN,OUTPUT);
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	66 e0       	ldi	r22, 0x06	; 6
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>

	MDIO_voidSetLowNibbleDirection(LCD_Data_PORT);
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetLowNibbleDirection>

	// FunctionSet_2 0b00101000
	HLCD_voidReturnHome();
    1fee:	0e 94 40 12 	call	0x2480	; 0x2480 <HLCD_voidReturnHome>
	HLCD_voidSendCommand(LCD_FunctionSet_2);
    1ff2:	88 e2       	ldi	r24, 0x28	; 40
    1ff4:	0e 94 87 11 	call	0x230e	; 0x230e <HLCD_voidSendCommand>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	a0 e8       	ldi	r26, 0x80	; 128
    1ffe:	bf e3       	ldi	r27, 0x3F	; 63
    2000:	8f a3       	std	Y+39, r24	; 0x27
    2002:	98 a7       	std	Y+40, r25	; 0x28
    2004:	a9 a7       	std	Y+41, r26	; 0x29
    2006:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2008:	6f a1       	ldd	r22, Y+39	; 0x27
    200a:	78 a5       	ldd	r23, Y+40	; 0x28
    200c:	89 a5       	ldd	r24, Y+41	; 0x29
    200e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4a ef       	ldi	r20, 0xFA	; 250
    2016:	54 e4       	ldi	r21, 0x44	; 68
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8b a3       	std	Y+35, r24	; 0x23
    2022:	9c a3       	std	Y+36, r25	; 0x24
    2024:	ad a3       	std	Y+37, r26	; 0x25
    2026:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2028:	6b a1       	ldd	r22, Y+35	; 0x23
    202a:	7c a1       	ldd	r23, Y+36	; 0x24
    202c:	8d a1       	ldd	r24, Y+37	; 0x25
    202e:	9e a1       	ldd	r25, Y+38	; 0x26
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e8       	ldi	r20, 0x80	; 128
    2036:	5f e3       	ldi	r21, 0x3F	; 63
    2038:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    203c:	88 23       	and	r24, r24
    203e:	2c f4       	brge	.+10     	; 0x204a <HLCD_voidInit+0x178>
		__ticks = 1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9a a3       	std	Y+34, r25	; 0x22
    2046:	89 a3       	std	Y+33, r24	; 0x21
    2048:	3f c0       	rjmp	.+126    	; 0x20c8 <HLCD_voidInit+0x1f6>
	else if (__tmp > 65535)
    204a:	6b a1       	ldd	r22, Y+35	; 0x23
    204c:	7c a1       	ldd	r23, Y+36	; 0x24
    204e:	8d a1       	ldd	r24, Y+37	; 0x25
    2050:	9e a1       	ldd	r25, Y+38	; 0x26
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	3f ef       	ldi	r19, 0xFF	; 255
    2056:	4f e7       	ldi	r20, 0x7F	; 127
    2058:	57 e4       	ldi	r21, 0x47	; 71
    205a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    205e:	18 16       	cp	r1, r24
    2060:	4c f5       	brge	.+82     	; 0x20b4 <HLCD_voidInit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2062:	6f a1       	ldd	r22, Y+39	; 0x27
    2064:	78 a5       	ldd	r23, Y+40	; 0x28
    2066:	89 a5       	ldd	r24, Y+41	; 0x29
    2068:	9a a5       	ldd	r25, Y+42	; 0x2a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e2       	ldi	r20, 0x20	; 32
    2070:	51 e4       	ldi	r21, 0x41	; 65
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9a a3       	std	Y+34, r25	; 0x22
    2088:	89 a3       	std	Y+33, r24	; 0x21
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <HLCD_voidInit+0x1d8>
    208c:	88 ec       	ldi	r24, 0xC8	; 200
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	98 a3       	std	Y+32, r25	; 0x20
    2092:	8f 8f       	std	Y+31, r24	; 0x1f
    2094:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2096:	98 a1       	ldd	r25, Y+32	; 0x20
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <HLCD_voidInit+0x1c6>
    209c:	98 a3       	std	Y+32, r25	; 0x20
    209e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a0:	89 a1       	ldd	r24, Y+33	; 0x21
    20a2:	9a a1       	ldd	r25, Y+34	; 0x22
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	9a a3       	std	Y+34, r25	; 0x22
    20a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20aa:	89 a1       	ldd	r24, Y+33	; 0x21
    20ac:	9a a1       	ldd	r25, Y+34	; 0x22
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	69 f7       	brne	.-38     	; 0x208c <HLCD_voidInit+0x1ba>
    20b2:	14 c0       	rjmp	.+40     	; 0x20dc <HLCD_voidInit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b4:	6b a1       	ldd	r22, Y+35	; 0x23
    20b6:	7c a1       	ldd	r23, Y+36	; 0x24
    20b8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ba:	9e a1       	ldd	r25, Y+38	; 0x26
    20bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9a a3       	std	Y+34, r25	; 0x22
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ca:	9a a1       	ldd	r25, Y+34	; 0x22
    20cc:	9e 8f       	std	Y+30, r25	; 0x1e
    20ce:	8d 8f       	std	Y+29, r24	; 0x1d
    20d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <HLCD_voidInit+0x202>
    20d8:	9e 8f       	std	Y+30, r25	; 0x1e
    20da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Display on/off control 0b00001110
	HLCD_voidSendCommand(LCD_Display);
    20dc:	8f e0       	ldi	r24, 0x0F	; 15
    20de:	0e 94 87 11 	call	0x230e	; 0x230e <HLCD_voidSendCommand>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e8       	ldi	r26, 0x80	; 128
    20e8:	bf e3       	ldi	r27, 0x3F	; 63
    20ea:	89 8f       	std	Y+25, r24	; 0x19
    20ec:	9a 8f       	std	Y+26, r25	; 0x1a
    20ee:	ab 8f       	std	Y+27, r26	; 0x1b
    20f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	69 8d       	ldd	r22, Y+25	; 0x19
    20f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a ef       	ldi	r20, 0xFA	; 250
    2100:	54 e4       	ldi	r21, 0x44	; 68
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8d 8b       	std	Y+21, r24	; 0x15
    210c:	9e 8b       	std	Y+22, r25	; 0x16
    210e:	af 8b       	std	Y+23, r26	; 0x17
    2110:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2112:	6d 89       	ldd	r22, Y+21	; 0x15
    2114:	7e 89       	ldd	r23, Y+22	; 0x16
    2116:	8f 89       	ldd	r24, Y+23	; 0x17
    2118:	98 8d       	ldd	r25, Y+24	; 0x18
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <HLCD_voidInit+0x262>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9c 8b       	std	Y+20, r25	; 0x14
    2130:	8b 8b       	std	Y+19, r24	; 0x13
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <HLCD_voidInit+0x2e0>
	else if (__tmp > 65535)
    2134:	6d 89       	ldd	r22, Y+21	; 0x15
    2136:	7e 89       	ldd	r23, Y+22	; 0x16
    2138:	8f 89       	ldd	r24, Y+23	; 0x17
    213a:	98 8d       	ldd	r25, Y+24	; 0x18
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <HLCD_voidInit+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	69 8d       	ldd	r22, Y+25	; 0x19
    214e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9c 8b       	std	Y+20, r25	; 0x14
    2172:	8b 8b       	std	Y+19, r24	; 0x13
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <HLCD_voidInit+0x2c2>
    2176:	88 ec       	ldi	r24, 0xC8	; 200
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9a 8b       	std	Y+18, r25	; 0x12
    217c:	89 8b       	std	Y+17, r24	; 0x11
    217e:	89 89       	ldd	r24, Y+17	; 0x11
    2180:	9a 89       	ldd	r25, Y+18	; 0x12
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <HLCD_voidInit+0x2b0>
    2186:	9a 8b       	std	Y+18, r25	; 0x12
    2188:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8b 89       	ldd	r24, Y+19	; 0x13
    218c:	9c 89       	ldd	r25, Y+20	; 0x14
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9c 8b       	std	Y+20, r25	; 0x14
    2192:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8b 89       	ldd	r24, Y+19	; 0x13
    2196:	9c 89       	ldd	r25, Y+20	; 0x14
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <HLCD_voidInit+0x2a4>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <HLCD_voidInit+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	6d 89       	ldd	r22, Y+21	; 0x15
    21a0:	7e 89       	ldd	r23, Y+22	; 0x16
    21a2:	8f 89       	ldd	r24, Y+23	; 0x17
    21a4:	98 8d       	ldd	r25, Y+24	; 0x18
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9c 8b       	std	Y+20, r25	; 0x14
    21b0:	8b 8b       	std	Y+19, r24	; 0x13
    21b2:	8b 89       	ldd	r24, Y+19	; 0x13
    21b4:	9c 89       	ldd	r25, Y+20	; 0x14
    21b6:	98 8b       	std	Y+16, r25	; 0x10
    21b8:	8f 87       	std	Y+15, r24	; 0x0f
    21ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    21bc:	98 89       	ldd	r25, Y+16	; 0x10
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <HLCD_voidInit+0x2ec>
    21c2:	98 8b       	std	Y+16, r25	; 0x10
    21c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	// Clear display 0x01
	HLCD_voidClear();
    21c6:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>

	// Entry Mode 0b00000110
	HLCD_voidSendCommand(LCD_EntryMode);
    21ca:	86 e0       	ldi	r24, 0x06	; 6
    21cc:	0e 94 87 11 	call	0x230e	; 0x230e <HLCD_voidSendCommand>
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a0 e8       	ldi	r26, 0x80	; 128
    21d6:	bf e3       	ldi	r27, 0x3F	; 63
    21d8:	8b 87       	std	Y+11, r24	; 0x0b
    21da:	9c 87       	std	Y+12, r25	; 0x0c
    21dc:	ad 87       	std	Y+13, r26	; 0x0d
    21de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a ef       	ldi	r20, 0xFA	; 250
    21ee:	54 e4       	ldi	r21, 0x44	; 68
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8f 83       	std	Y+7, r24	; 0x07
    21fa:	98 87       	std	Y+8, r25	; 0x08
    21fc:	a9 87       	std	Y+9, r26	; 0x09
    21fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2200:	6f 81       	ldd	r22, Y+7	; 0x07
    2202:	78 85       	ldd	r23, Y+8	; 0x08
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	9a 85       	ldd	r25, Y+10	; 0x0a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <HLCD_voidInit+0x350>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    2222:	6f 81       	ldd	r22, Y+7	; 0x07
    2224:	78 85       	ldd	r23, Y+8	; 0x08
    2226:	89 85       	ldd	r24, Y+9	; 0x09
    2228:	9a 85       	ldd	r25, Y+10	; 0x0a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	6b 85       	ldd	r22, Y+11	; 0x0b
    223c:	7c 85       	ldd	r23, Y+12	; 0x0c
    223e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2240:	9e 85       	ldd	r25, Y+14	; 0x0e
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <HLCD_voidInit+0x3b0>
    2264:	88 ec       	ldi	r24, 0xC8	; 200
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9c 83       	std	Y+4, r25	; 0x04
    226a:	8b 83       	std	Y+3, r24	; 0x03
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <HLCD_voidInit+0x39e>
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <HLCD_voidInit+0x392>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <HLCD_voidInit+0x3da>
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    22b4:	e8 96       	adiw	r28, 0x38	; 56
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	0f 92       	push	r0
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(LCD_Control_PORT,RS,HIGH);
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	64 e0       	ldi	r22, 0x04	; 4
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_Control_PORT,RW,LOW);
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	65 e0       	ldi	r22, 0x05	; 5
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>

	MDIO_voidSetLowNibble(LCD_Data_PORT,A_u8Data>>4);
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	98 2f       	mov	r25, r24
    22ea:	92 95       	swap	r25
    22ec:	9f 70       	andi	r25, 0x0F	; 15
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	69 2f       	mov	r22, r25
    22f2:	0e 94 2c 0c 	call	0x1858	; 0x1858 <MDIO_voidSetLowNibble>
	HLCD_voidGenerateBulse();
    22f6:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <HLCD_voidGenerateBulse>

	MDIO_voidSetLowNibble(LCD_Data_PORT,A_u8Data);
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	69 81       	ldd	r22, Y+1	; 0x01
    22fe:	0e 94 2c 0c 	call	0x1858	; 0x1858 <MDIO_voidSetLowNibble>
	HLCD_voidGenerateBulse();
    2302:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <HLCD_voidGenerateBulse>
}
    2306:	0f 90       	pop	r0
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <HLCD_voidSendCommand>:

void HLCD_voidSendCommand(u8 A_u8Command)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	0f 92       	push	r0
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(LCD_Control_PORT,RS,LOW);
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	64 e0       	ldi	r22, 0x04	; 4
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_Control_PORT,RW,LOW);
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	65 e0       	ldi	r22, 0x05	; 5
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>

	MDIO_voidSetLowNibble(LCD_Data_PORT,A_u8Command>>4);
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	98 2f       	mov	r25, r24
    2332:	92 95       	swap	r25
    2334:	9f 70       	andi	r25, 0x0F	; 15
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	69 2f       	mov	r22, r25
    233a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <MDIO_voidSetLowNibble>
	HLCD_voidGenerateBulse();
    233e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <HLCD_voidGenerateBulse>

	MDIO_voidSetLowNibble(LCD_Data_PORT,A_u8Command);
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	69 81       	ldd	r22, Y+1	; 0x01
    2346:	0e 94 2c 0c 	call	0x1858	; 0x1858 <MDIO_voidSetLowNibble>
	HLCD_voidGenerateBulse();
    234a:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <HLCD_voidGenerateBulse>
}
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <HLCD_voidSendCharacter>:

#endif


void HLCD_voidSendCharacter(u8 A_u8Character)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	0f 92       	push	r0
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendData(A_u8Character);
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	0e 94 63 11 	call	0x22c6	; 0x22c6 <HLCD_voidSendData>
}
    2368:	0f 90       	pop	r0
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <HLCD_voidClear>:

void HLCD_voidClear()
{
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	2e 97       	sbiw	r28, 0x0e	; 14
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCommand(LCD_ClearDisplay);
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	0e 94 87 11 	call	0x230e	; 0x230e <HLCD_voidSendCommand>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a0 e0       	ldi	r26, 0x00	; 0
    2390:	b0 e4       	ldi	r27, 0x40	; 64
    2392:	8b 87       	std	Y+11, r24	; 0x0b
    2394:	9c 87       	std	Y+12, r25	; 0x0c
    2396:	ad 87       	std	Y+13, r26	; 0x0d
    2398:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239a:	6b 85       	ldd	r22, Y+11	; 0x0b
    239c:	7c 85       	ldd	r23, Y+12	; 0x0c
    239e:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	4a ef       	ldi	r20, 0xFA	; 250
    23a8:	54 e4       	ldi	r21, 0x44	; 68
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	8f 83       	std	Y+7, r24	; 0x07
    23b4:	98 87       	std	Y+8, r25	; 0x08
    23b6:	a9 87       	std	Y+9, r26	; 0x09
    23b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ba:	6f 81       	ldd	r22, Y+7	; 0x07
    23bc:	78 85       	ldd	r23, Y+8	; 0x08
    23be:	89 85       	ldd	r24, Y+9	; 0x09
    23c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ce:	88 23       	and	r24, r24
    23d0:	2c f4       	brge	.+10     	; 0x23dc <HLCD_voidClear+0x6c>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	9e 83       	std	Y+6, r25	; 0x06
    23d8:	8d 83       	std	Y+5, r24	; 0x05
    23da:	3f c0       	rjmp	.+126    	; 0x245a <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    23dc:	6f 81       	ldd	r22, Y+7	; 0x07
    23de:	78 85       	ldd	r23, Y+8	; 0x08
    23e0:	89 85       	ldd	r24, Y+9	; 0x09
    23e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	3f ef       	ldi	r19, 0xFF	; 255
    23e8:	4f e7       	ldi	r20, 0x7F	; 127
    23ea:	57 e4       	ldi	r21, 0x47	; 71
    23ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f0:	18 16       	cp	r1, r24
    23f2:	4c f5       	brge	.+82     	; 0x2446 <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e2       	ldi	r20, 0x20	; 32
    2402:	51 e4       	ldi	r21, 0x41	; 65
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9e 83       	std	Y+6, r25	; 0x06
    241a:	8d 83       	std	Y+5, r24	; 0x05
    241c:	0f c0       	rjmp	.+30     	; 0x243c <HLCD_voidClear+0xcc>
    241e:	88 ec       	ldi	r24, 0xC8	; 200
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9c 83       	std	Y+4, r25	; 0x04
    2424:	8b 83       	std	Y+3, r24	; 0x03
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	9c 81       	ldd	r25, Y+4	; 0x04
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <HLCD_voidClear+0xba>
    242e:	9c 83       	std	Y+4, r25	; 0x04
    2430:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	69 f7       	brne	.-38     	; 0x241e <HLCD_voidClear+0xae>
    2444:	14 c0       	rjmp	.+40     	; 0x246e <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2446:	6f 81       	ldd	r22, Y+7	; 0x07
    2448:	78 85       	ldd	r23, Y+8	; 0x08
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	8d 81       	ldd	r24, Y+5	; 0x05
    245c:	9e 81       	ldd	r25, Y+6	; 0x06
    245e:	9a 83       	std	Y+2, r25	; 0x02
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <HLCD_voidClear+0xf6>
    246a:	9a 83       	std	Y+2, r25	; 0x02
    246c:	89 83       	std	Y+1, r24	; 0x01
	// command duration
	_delay_ms(2);
}
    246e:	2e 96       	adiw	r28, 0x0e	; 14
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <HLCD_voidReturnHome>:

void HLCD_voidReturnHome()
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	2e 97       	sbiw	r28, 0x0e	; 14
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCommand(LCD_ReturnHome);
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	0e 94 87 11 	call	0x230e	; 0x230e <HLCD_voidSendCommand>
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	a0 e0       	ldi	r26, 0x00	; 0
    24a0:	b0 e4       	ldi	r27, 0x40	; 64
    24a2:	8b 87       	std	Y+11, r24	; 0x0b
    24a4:	9c 87       	std	Y+12, r25	; 0x0c
    24a6:	ad 87       	std	Y+13, r26	; 0x0d
    24a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a ef       	ldi	r20, 0xFA	; 250
    24b8:	54 e4       	ldi	r21, 0x44	; 68
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	8f 83       	std	Y+7, r24	; 0x07
    24c4:	98 87       	std	Y+8, r25	; 0x08
    24c6:	a9 87       	std	Y+9, r26	; 0x09
    24c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24de:	88 23       	and	r24, r24
    24e0:	2c f4       	brge	.+10     	; 0x24ec <HLCD_voidReturnHome+0x6c>
		__ticks = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
    24ea:	3f c0       	rjmp	.+126    	; 0x256a <HLCD_voidReturnHome+0xea>
	else if (__tmp > 65535)
    24ec:	6f 81       	ldd	r22, Y+7	; 0x07
    24ee:	78 85       	ldd	r23, Y+8	; 0x08
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	3f ef       	ldi	r19, 0xFF	; 255
    24f8:	4f e7       	ldi	r20, 0x7F	; 127
    24fa:	57 e4       	ldi	r21, 0x47	; 71
    24fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2500:	18 16       	cp	r1, r24
    2502:	4c f5       	brge	.+82     	; 0x2556 <HLCD_voidReturnHome+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2504:	6b 85       	ldd	r22, Y+11	; 0x0b
    2506:	7c 85       	ldd	r23, Y+12	; 0x0c
    2508:	8d 85       	ldd	r24, Y+13	; 0x0d
    250a:	9e 85       	ldd	r25, Y+14	; 0x0e
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
    252c:	0f c0       	rjmp	.+30     	; 0x254c <HLCD_voidReturnHome+0xcc>
    252e:	88 ec       	ldi	r24, 0xC8	; 200
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9c 83       	std	Y+4, r25	; 0x04
    2534:	8b 83       	std	Y+3, r24	; 0x03
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <HLCD_voidReturnHome+0xba>
    253e:	9c 83       	std	Y+4, r25	; 0x04
    2540:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	69 f7       	brne	.-38     	; 0x252e <HLCD_voidReturnHome+0xae>
    2554:	14 c0       	rjmp	.+40     	; 0x257e <HLCD_voidReturnHome+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2556:	6f 81       	ldd	r22, Y+7	; 0x07
    2558:	78 85       	ldd	r23, Y+8	; 0x08
    255a:	89 85       	ldd	r24, Y+9	; 0x09
    255c:	9a 85       	ldd	r25, Y+10	; 0x0a
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	9a 83       	std	Y+2, r25	; 0x02
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	9a 81       	ldd	r25, Y+2	; 0x02
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <HLCD_voidReturnHome+0xf6>
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
	// command duration
	_delay_ms(2);
}
    257e:	2e 96       	adiw	r28, 0x0e	; 14
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *A_u8string)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	00 d0       	rcall	.+0      	; 0x2596 <HLCD_voidSendString+0x6>
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	0a c0       	rjmp	.+20     	; 0x25b4 <HLCD_voidSendString+0x24>
	while(*A_u8string != NULL)
	{
		HLCD_voidSendData(*A_u8string);
    25a0:	e9 81       	ldd	r30, Y+1	; 0x01
    25a2:	fa 81       	ldd	r31, Y+2	; 0x02
    25a4:	80 81       	ld	r24, Z
    25a6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <HLCD_voidSendData>
		A_u8string++;
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	9a 81       	ldd	r25, Y+2	; 0x02
    25ae:	01 96       	adiw	r24, 0x01	; 1
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}

void HLCD_voidSendString(u8 *A_u8string)
{
	while(*A_u8string != NULL)
    25b4:	e9 81       	ldd	r30, Y+1	; 0x01
    25b6:	fa 81       	ldd	r31, Y+2	; 0x02
    25b8:	80 81       	ld	r24, Z
    25ba:	88 23       	and	r24, r24
    25bc:	89 f7       	brne	.-30     	; 0x25a0 <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*A_u8string);
		A_u8string++;
	}
}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <HLCD_voidMoveCursor>:

void HLCD_voidMoveCursor(u8 A_u8Line,u8 A_u8Col)
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <HLCD_voidMoveCursor+0x6>
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <HLCD_voidMoveCursor+0x8>
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8Line>2 || A_u8Col>16)
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	83 30       	cpi	r24, 0x03	; 3
    25dc:	18 f4       	brcc	.+6      	; 0x25e4 <HLCD_voidMoveCursor+0x1c>
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	81 31       	cpi	r24, 0x11	; 17
    25e2:	18 f0       	brcs	.+6      	; 0x25ea <HLCD_voidMoveCursor+0x22>
	{
		HLCD_voidReturnHome();
    25e4:	0e 94 40 12 	call	0x2480	; 0x2480 <HLCD_voidReturnHome>
    25e8:	19 c0       	rjmp	.+50     	; 0x261c <HLCD_voidMoveCursor+0x54>
	}
	else
	{
		switch(A_u8Line)
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	3c 83       	std	Y+4, r19	; 0x04
    25f2:	2b 83       	std	Y+3, r18	; 0x03
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	81 30       	cpi	r24, 0x01	; 1
    25fa:	91 05       	cpc	r25, r1
    25fc:	31 f0       	breq	.+12     	; 0x260a <HLCD_voidMoveCursor+0x42>
    25fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2600:	3c 81       	ldd	r19, Y+4	; 0x04
    2602:	22 30       	cpi	r18, 0x02	; 2
    2604:	31 05       	cpc	r19, r1
    2606:	31 f0       	breq	.+12     	; 0x2614 <HLCD_voidMoveCursor+0x4c>
    2608:	09 c0       	rjmp	.+18     	; 0x261c <HLCD_voidMoveCursor+0x54>
			{
				case LINE_1: HLCD_voidSendCommand(LCD_LINE_1+A_u8Col); break;
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	81 58       	subi	r24, 0x81	; 129
    260e:	0e 94 87 11 	call	0x230e	; 0x230e <HLCD_voidSendCommand>
    2612:	04 c0       	rjmp	.+8      	; 0x261c <HLCD_voidMoveCursor+0x54>
				case LINE_2: HLCD_voidSendCommand(LCD_LINE_2+A_u8Col); break;
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	81 54       	subi	r24, 0x41	; 65
    2618:	0e 94 87 11 	call	0x230e	; 0x230e <HLCD_voidSendCommand>
			}
	}
}
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <HLCD_voidSaveCustomChar>:

void HLCD_voidSaveCustomChar(u8 *A_u8CustomArray,u8 A_u8CGRAMIndex)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <HLCD_voidSaveCustomChar+0x6>
    2630:	00 d0       	rcall	.+0      	; 0x2632 <HLCD_voidSaveCustomChar+0x8>
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	9b 83       	std	Y+3, r25	; 0x03
    2638:	8a 83       	std	Y+2, r24	; 0x02
    263a:	6c 83       	std	Y+4, r22	; 0x04
	HLCD_voidSendCommand(0x40 + (A_u8CGRAMIndex * 8));
    263c:	8c 81       	ldd	r24, Y+4	; 0x04
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	08 96       	adiw	r24, 0x08	; 8
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	88 0f       	add	r24, r24
    264a:	99 1f       	adc	r25, r25
    264c:	88 0f       	add	r24, r24
    264e:	99 1f       	adc	r25, r25
    2650:	0e 94 87 11 	call	0x230e	; 0x230e <HLCD_voidSendCommand>
    2654:	0e c0       	rjmp	.+28     	; 0x2672 <HLCD_voidSaveCustomChar+0x48>

	for(u8 L_u8Index ;L_u8Index<8; L_u8Index++)
	{
		HLCD_voidSendData(A_u8CustomArray[L_u8Index]);
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	9b 81       	ldd	r25, Y+3	; 0x03
    2660:	fc 01       	movw	r30, r24
    2662:	e2 0f       	add	r30, r18
    2664:	f3 1f       	adc	r31, r19
    2666:	80 81       	ld	r24, Z
    2668:	0e 94 63 11 	call	0x22c6	; 0x22c6 <HLCD_voidSendData>

void HLCD_voidSaveCustomChar(u8 *A_u8CustomArray,u8 A_u8CGRAMIndex)
{
	HLCD_voidSendCommand(0x40 + (A_u8CGRAMIndex * 8));

	for(u8 L_u8Index ;L_u8Index<8; L_u8Index++)
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	8f 5f       	subi	r24, 0xFF	; 255
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	88 30       	cpi	r24, 0x08	; 8
    2676:	78 f3       	brcs	.-34     	; 0x2656 <HLCD_voidSaveCustomChar+0x2c>
	{
		HLCD_voidSendData(A_u8CustomArray[L_u8Index]);
	}
	HLCD_voidSendCommand(0x80);
    2678:	80 e8       	ldi	r24, 0x80	; 128
    267a:	0e 94 87 11 	call	0x230e	; 0x230e <HLCD_voidSendCommand>
}
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <HLCD_voidDisplayCustomChar>:

void HLCD_voidDisplayCustomChar(u8 A_u8CGRAMIndex)
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	0f 92       	push	r0
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8CGRAMIndex < 8)
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	88 30       	cpi	r24, 0x08	; 8
    269c:	18 f4       	brcc	.+6      	; 0x26a4 <HLCD_voidDisplayCustomChar+0x18>
	{
		HLCD_voidSendData(A_u8CGRAMIndex);
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	0e 94 63 11 	call	0x22c6	; 0x22c6 <HLCD_voidSendData>
	}
}
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    26ac:	ef 92       	push	r14
    26ae:	ff 92       	push	r15
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	28 97       	sbiw	r28, 0x08	; 8
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	6d 83       	std	Y+5, r22	; 0x05
    26ca:	7e 83       	std	Y+6, r23	; 0x06
    26cc:	8f 83       	std	Y+7, r24	; 0x07
    26ce:	98 87       	std	Y+8, r25	; 0x08
	u32 L_u32Number=1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a0 e0       	ldi	r26, 0x00	; 0
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	89 83       	std	Y+1, r24	; 0x01
    26da:	9a 83       	std	Y+2, r25	; 0x02
    26dc:	ab 83       	std	Y+3, r26	; 0x03
    26de:	bc 83       	std	Y+4, r27	; 0x04

	if(A_s32Number == 0){
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	9e 81       	ldd	r25, Y+6	; 0x06
    26e4:	af 81       	ldd	r26, Y+7	; 0x07
    26e6:	b8 85       	ldd	r27, Y+8	; 0x08
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	a1 05       	cpc	r26, r1
    26ec:	b1 05       	cpc	r27, r1
    26ee:	19 f4       	brne	.+6      	; 0x26f6 <HLCD_voidDisplayNumber+0x4a>
		HLCD_voidSendData('0');
    26f0:	80 e3       	ldi	r24, 0x30	; 48
    26f2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <HLCD_voidSendData>
	}
	if(A_s32Number <0){
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	af 81       	ldd	r26, Y+7	; 0x07
    26fc:	b8 85       	ldd	r27, Y+8	; 0x08
    26fe:	bb 23       	and	r27, r27
    2700:	0c f0       	brlt	.+2      	; 0x2704 <HLCD_voidDisplayNumber+0x58>
    2702:	49 c0       	rjmp	.+146    	; 0x2796 <HLCD_voidDisplayNumber+0xea>
		HLCD_voidSendData('-');
    2704:	8d e2       	ldi	r24, 0x2D	; 45
    2706:	0e 94 63 11 	call	0x22c6	; 0x22c6 <HLCD_voidSendData>
		A_s32Number *=-1;
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	9e 81       	ldd	r25, Y+6	; 0x06
    270e:	af 81       	ldd	r26, Y+7	; 0x07
    2710:	b8 85       	ldd	r27, Y+8	; 0x08
    2712:	b0 95       	com	r27
    2714:	a0 95       	com	r26
    2716:	90 95       	com	r25
    2718:	81 95       	neg	r24
    271a:	9f 4f       	sbci	r25, 0xFF	; 255
    271c:	af 4f       	sbci	r26, 0xFF	; 255
    271e:	bf 4f       	sbci	r27, 0xFF	; 255
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	9e 83       	std	Y+6, r25	; 0x06
    2724:	af 83       	std	Y+7, r26	; 0x07
    2726:	b8 87       	std	Y+8, r27	; 0x08
    2728:	36 c0       	rjmp	.+108    	; 0x2796 <HLCD_voidDisplayNumber+0xea>
	}
	while(A_s32Number !=0 ){
		L_u32Number= ((L_u32Number*10)+(A_s32Number%10));
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	ab 81       	ldd	r26, Y+3	; 0x03
    2730:	bc 81       	ldd	r27, Y+4	; 0x04
    2732:	2a e0       	ldi	r18, 0x0A	; 10
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	bc 01       	movw	r22, r24
    273c:	cd 01       	movw	r24, r26
    273e:	0e 94 ca 20 	call	0x4194	; 0x4194 <__mulsi3>
    2742:	7b 01       	movw	r14, r22
    2744:	8c 01       	movw	r16, r24
    2746:	8d 81       	ldd	r24, Y+5	; 0x05
    2748:	9e 81       	ldd	r25, Y+6	; 0x06
    274a:	af 81       	ldd	r26, Y+7	; 0x07
    274c:	b8 85       	ldd	r27, Y+8	; 0x08
    274e:	2a e0       	ldi	r18, 0x0A	; 10
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 0b 21 	call	0x4216	; 0x4216 <__divmodsi4>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	8e 0d       	add	r24, r14
    2764:	9f 1d       	adc	r25, r15
    2766:	a0 1f       	adc	r26, r16
    2768:	b1 1f       	adc	r27, r17
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	ab 83       	std	Y+3, r26	; 0x03
    2770:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number= A_s32Number/10;
    2772:	8d 81       	ldd	r24, Y+5	; 0x05
    2774:	9e 81       	ldd	r25, Y+6	; 0x06
    2776:	af 81       	ldd	r26, Y+7	; 0x07
    2778:	b8 85       	ldd	r27, Y+8	; 0x08
    277a:	2a e0       	ldi	r18, 0x0A	; 10
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 0b 21 	call	0x4216	; 0x4216 <__divmodsi4>
    278a:	da 01       	movw	r26, r20
    278c:	c9 01       	movw	r24, r18
    278e:	8d 83       	std	Y+5, r24	; 0x05
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	af 83       	std	Y+7, r26	; 0x07
    2794:	b8 87       	std	Y+8, r27	; 0x08
	}
	if(A_s32Number <0){
		HLCD_voidSendData('-');
		A_s32Number *=-1;
	}
	while(A_s32Number !=0 ){
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	af 81       	ldd	r26, Y+7	; 0x07
    279c:	b8 85       	ldd	r27, Y+8	; 0x08
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	a1 05       	cpc	r26, r1
    27a2:	b1 05       	cpc	r27, r1
    27a4:	11 f6       	brne	.-124    	; 0x272a <HLCD_voidDisplayNumber+0x7e>
    27a6:	23 c0       	rjmp	.+70     	; 0x27ee <HLCD_voidDisplayNumber+0x142>
		L_u32Number= ((L_u32Number*10)+(A_s32Number%10));
		A_s32Number= A_s32Number/10;
	}
	while (L_u32Number !=1){

	HLCD_voidSendData((L_u32Number%10)+'0');
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	ab 81       	ldd	r26, Y+3	; 0x03
    27ae:	bc 81       	ldd	r27, Y+4	; 0x04
    27b0:	2a e0       	ldi	r18, 0x0A	; 10
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__udivmodsi4>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	80 5d       	subi	r24, 0xD0	; 208
    27c6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <HLCD_voidSendData>
		L_u32Number= L_u32Number/10;
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	9a 81       	ldd	r25, Y+2	; 0x02
    27ce:	ab 81       	ldd	r26, Y+3	; 0x03
    27d0:	bc 81       	ldd	r27, Y+4	; 0x04
    27d2:	2a e0       	ldi	r18, 0x0A	; 10
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__udivmodsi4>
    27e2:	da 01       	movw	r26, r20
    27e4:	c9 01       	movw	r24, r18
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	ab 83       	std	Y+3, r26	; 0x03
    27ec:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(A_s32Number !=0 ){
		L_u32Number= ((L_u32Number*10)+(A_s32Number%10));
		A_s32Number= A_s32Number/10;
	}
	while (L_u32Number !=1){
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	ab 81       	ldd	r26, Y+3	; 0x03
    27f4:	bc 81       	ldd	r27, Y+4	; 0x04
    27f6:	81 30       	cpi	r24, 0x01	; 1
    27f8:	91 05       	cpc	r25, r1
    27fa:	a1 05       	cpc	r26, r1
    27fc:	b1 05       	cpc	r27, r1
    27fe:	a1 f6       	brne	.-88     	; 0x27a8 <HLCD_voidDisplayNumber+0xfc>

	HLCD_voidSendData((L_u32Number%10)+'0');
		L_u32Number= L_u32Number/10;
	}
}
    2800:	28 96       	adiw	r28, 0x08	; 8
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
    2814:	ff 90       	pop	r15
    2816:	ef 90       	pop	r14
    2818:	08 95       	ret

0000281a <HKPD_voidInit>:
								  {'C','0','=','+'}
};


void HKPD_voidInit()
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPortDirection(HKPD_PORT,0x0F);
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	6f e0       	ldi	r22, 0x0F	; 15
    2826:	0e 94 15 0a 	call	0x142a	; 0x142a <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(HKPD_PORT,0xFF);
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	6f ef       	ldi	r22, 0xFF	; 255
    282e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <MDIO_voidSetPortValue>
}
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <HKPD_U8PressedKey>:


u8 HKPD_U8PressedKey()
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	00 d0       	rcall	.+0      	; 0x283e <HKPD_U8PressedKey+0x6>
    283e:	00 d0       	rcall	.+0      	; 0x2840 <HKPD_U8PressedKey+0x8>
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8ButtonValue=3;
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	8c 83       	std	Y+4, r24	; 0x04
	u8 L_u8ButtonNO=' ';
    2848:	80 e2       	ldi	r24, 0x20	; 32
    284a:	8b 83       	std	Y+3, r24	; 0x03

	for(u8 row=0;row<4;row++)
    284c:	1a 82       	std	Y+2, r1	; 0x02
    284e:	36 c0       	rjmp	.+108    	; 0x28bc <HKPD_U8PressedKey+0x84>
	{
		MDIO_voidSetPinValue(HKPD_PORT,row,LOW);
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	6a 81       	ldd	r22, Y+2	; 0x02
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>

		for(u8 col=0;col<4;col++)
    285a:	19 82       	std	Y+1, r1	; 0x01
    285c:	21 c0       	rjmp	.+66     	; 0x28a0 <HKPD_U8PressedKey+0x68>
		{
			L_u8ButtonValue=MDIO_U8ReadPinValue(HKPD_PORT,col+4);
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	98 2f       	mov	r25, r24
    2862:	9c 5f       	subi	r25, 0xFC	; 252
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	69 2f       	mov	r22, r25
    2868:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_U8ReadPinValue>
    286c:	8c 83       	std	Y+4, r24	; 0x04

			if(L_u8ButtonValue == PRESSED)
    286e:	8c 81       	ldd	r24, Y+4	; 0x04
    2870:	88 23       	and	r24, r24
    2872:	99 f4       	brne	.+38     	; 0x289a <HKPD_U8PressedKey+0x62>
			{
				L_u8ButtonNO=GKPD_u8NUM[row][col];
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
    2876:	48 2f       	mov	r20, r24
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	ca 01       	movw	r24, r20
    2882:	88 0f       	add	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	82 0f       	add	r24, r18
    288c:	93 1f       	adc	r25, r19
    288e:	fc 01       	movw	r30, r24
    2890:	e0 54       	subi	r30, 0x40	; 64
    2892:	fe 4f       	sbci	r31, 0xFE	; 254
    2894:	80 81       	ld	r24, Z
    2896:	8b 83       	std	Y+3, r24	; 0x03
    2898:	06 c0       	rjmp	.+12     	; 0x28a6 <HKPD_U8PressedKey+0x6e>

	for(u8 row=0;row<4;row++)
	{
		MDIO_voidSetPinValue(HKPD_PORT,row,LOW);

		for(u8 col=0;col<4;col++)
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	8f 5f       	subi	r24, 0xFF	; 255
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	84 30       	cpi	r24, 0x04	; 4
    28a4:	e0 f2       	brcs	.-72     	; 0x285e <HKPD_U8PressedKey+0x26>
				L_u8ButtonNO=GKPD_u8NUM[row][col];

				break;
			}
		}
		MDIO_voidSetPinValue(HKPD_PORT,row,HIGH);
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	6a 81       	ldd	r22, Y+2	; 0x02
    28aa:	41 e0       	ldi	r20, 0x01	; 1
    28ac:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>

		if(L_u8ButtonValue == PRESSED)
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	88 23       	and	r24, r24
    28b4:	31 f0       	breq	.+12     	; 0x28c2 <HKPD_U8PressedKey+0x8a>
u8 HKPD_U8PressedKey()
{
	u8 L_u8ButtonValue=3;
	u8 L_u8ButtonNO=' ';

	for(u8 row=0;row<4;row++)
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	8f 5f       	subi	r24, 0xFF	; 255
    28ba:	8a 83       	std	Y+2, r24	; 0x02
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	84 30       	cpi	r24, 0x04	; 4
    28c0:	38 f2       	brcs	.-114    	; 0x2850 <HKPD_U8PressedKey+0x18>
		MDIO_voidSetPinValue(HKPD_PORT,row,HIGH);

		if(L_u8ButtonValue == PRESSED)
			break;

	}return L_u8ButtonNO;
    28c2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <main>:
    {OFF, OFF, OFF}  // Bathroom
};


int main()
{
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	c7 5d       	subi	r28, 0xD7	; 215
    28e0:	d0 40       	sbci	r29, 0x00	; 0
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    const u16 Password = 1234;
    28ec:	fe 01       	movw	r30, r28
    28ee:	e3 54       	subi	r30, 0x43	; 67
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	82 ed       	ldi	r24, 0xD2	; 210
    28f4:	94 e0       	ldi	r25, 0x04	; 4
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
    /*
     User_Pass --> the password entered by the user
     Try_Again --> number of trials in case of wrong password
     */
    u16 User_Pass, Try_Again = 0;
    28fa:	fe 01       	movw	r30, r28
    28fc:	e7 54       	subi	r30, 0x47	; 71
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	11 82       	std	Z+1, r1	; 0x01
    2902:	10 82       	st	Z, r1

    /*
     Temprature --> Temprature entered by the user
     Tempflag --> for checking number of digits of temprature
     */
	volatile u8 Temperature = 0 ,Tempflag  = 0;
    2904:	fe 01       	movw	r30, r28
    2906:	e1 54       	subi	r30, 0x41	; 65
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	10 82       	st	Z, r1
    290c:	fe 01       	movw	r30, r28
    290e:	e0 54       	subi	r30, 0x40	; 64
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	10 82       	st	Z, r1

	/*any pressed button by the user on the keypad*/
	volatile u8 L_u8PressedButton = ' ';
    2914:	fe 01       	movw	r30, r28
    2916:	ef 53       	subi	r30, 0x3F	; 63
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 e2       	ldi	r24, 0x20	; 32
    291c:	80 83       	st	Z, r24

	/*for checking number of digits of password entered by the user*/
    u8 flag = 0;
    291e:	fe 01       	movw	r30, r28
    2920:	e8 54       	subi	r30, 0x48	; 72
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	10 82       	st	Z, r1

    /*selected room by the user to control it*/
    u8 selectedRoom = 0;
    2926:	fe 01       	movw	r30, r28
    2928:	e9 54       	subi	r30, 0x49	; 73
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	10 82       	st	Z, r1

    /*LCD,Keypad,Timer1 and SPI_Master initialization*/
    HLCD_voidInit();
    292e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <HLCD_voidInit>
    HKPD_voidInit();
    2932:	0e 94 0d 14 	call	0x281a	; 0x281a <HKPD_voidInit>
    MTIMER1_voidInitFastPwm();
    2936:	0e 94 a3 05 	call	0xb46	; 0xb46 <MTIMER1_voidInitFastPwm>
    SPI_voidInitMaster();
    293a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SPI_voidInitMaster>

    /*buzzer pin*/
    MDIO_voidSetPinDirection(MDIO_PORTD, PIN3, OUTPUT);
    293e:	83 e0       	ldi	r24, 0x03	; 3
    2940:	63 e0       	ldi	r22, 0x03	; 3
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>

    /*enterance light pin*/
    MDIO_voidSetPinDirection(MDIO_PORTA, PIN7, OUTPUT);
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	67 e0       	ldi	r22, 0x07	; 7
    294c:	41 e0       	ldi	r20, 0x01	; 1
    294e:	0e 94 c9 06 	call	0xd92	; 0xd92 <MDIO_voidSetPinDirection>


    HLCD_voidClear();
    2952:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
    HLCD_voidSendString("Welcome To ");
    2956:	80 e6       	ldi	r24, 0x60	; 96
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    HLCD_voidMoveCursor(LINE_2, 1);
    295e:	82 e0       	ldi	r24, 0x02	; 2
    2960:	61 e0       	ldi	r22, 0x01	; 1
    2962:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <HLCD_voidMoveCursor>
    HLCD_voidSendString("Our Smart Home");
    2966:	8c e6       	ldi	r24, 0x6C	; 108
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    296e:	fe 01       	movw	r30, r28
    2970:	ed 54       	subi	r30, 0x4D	; 77
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	aa e7       	ldi	r26, 0x7A	; 122
    297a:	b4 e4       	ldi	r27, 0x44	; 68
    297c:	80 83       	st	Z, r24
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	a2 83       	std	Z+2, r26	; 0x02
    2982:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2984:	8e 01       	movw	r16, r28
    2986:	01 55       	subi	r16, 0x51	; 81
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	fe 01       	movw	r30, r28
    298c:	ed 54       	subi	r30, 0x4D	; 77
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	60 81       	ld	r22, Z
    2992:	71 81       	ldd	r23, Z+1	; 0x01
    2994:	82 81       	ldd	r24, Z+2	; 0x02
    2996:	93 81       	ldd	r25, Z+3	; 0x03
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	4a ef       	ldi	r20, 0xFA	; 250
    299e:	54 e4       	ldi	r21, 0x44	; 68
    29a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	f8 01       	movw	r30, r16
    29aa:	80 83       	st	Z, r24
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	a2 83       	std	Z+2, r26	; 0x02
    29b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b2:	fe 01       	movw	r30, r28
    29b4:	e1 55       	subi	r30, 0x51	; 81
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	60 81       	ld	r22, Z
    29ba:	71 81       	ldd	r23, Z+1	; 0x01
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e8       	ldi	r20, 0x80	; 128
    29c6:	5f e3       	ldi	r21, 0x3F	; 63
    29c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29cc:	88 23       	and	r24, r24
    29ce:	44 f4       	brge	.+16     	; 0x29e0 <main+0x10e>
		__ticks = 1;
    29d0:	fe 01       	movw	r30, r28
    29d2:	e3 55       	subi	r30, 0x53	; 83
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
    29de:	64 c0       	rjmp	.+200    	; 0x2aa8 <main+0x1d6>
	else if (__tmp > 65535)
    29e0:	fe 01       	movw	r30, r28
    29e2:	e1 55       	subi	r30, 0x51	; 81
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	0c f0       	brlt	.+2      	; 0x2a00 <main+0x12e>
    29fe:	43 c0       	rjmp	.+134    	; 0x2a86 <main+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a00:	fe 01       	movw	r30, r28
    2a02:	ed 54       	subi	r30, 0x4D	; 77
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	60 81       	ld	r22, Z
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e2       	ldi	r20, 0x20	; 32
    2a14:	51 e4       	ldi	r21, 0x41	; 65
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	8e 01       	movw	r16, r28
    2a20:	03 55       	subi	r16, 0x53	; 83
    2a22:	1f 4f       	sbci	r17, 0xFF	; 255
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	f8 01       	movw	r30, r16
    2a32:	91 83       	std	Z+1, r25	; 0x01
    2a34:	80 83       	st	Z, r24
    2a36:	1f c0       	rjmp	.+62     	; 0x2a76 <main+0x1a4>
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e5 55       	subi	r30, 0x55	; 85
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	88 ec       	ldi	r24, 0xC8	; 200
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	80 83       	st	Z, r24
    2a46:	fe 01       	movw	r30, r28
    2a48:	e5 55       	subi	r30, 0x55	; 85
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	80 81       	ld	r24, Z
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <main+0x17e>
    2a54:	fe 01       	movw	r30, r28
    2a56:	e5 55       	subi	r30, 0x55	; 85
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5e:	de 01       	movw	r26, r28
    2a60:	a3 55       	subi	r26, 0x53	; 83
    2a62:	bf 4f       	sbci	r27, 0xFF	; 255
    2a64:	fe 01       	movw	r30, r28
    2a66:	e3 55       	subi	r30, 0x53	; 83
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 81       	ld	r24, Z
    2a6c:	91 81       	ldd	r25, Z+1	; 0x01
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	11 96       	adiw	r26, 0x01	; 1
    2a72:	9c 93       	st	X, r25
    2a74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a76:	fe 01       	movw	r30, r28
    2a78:	e3 55       	subi	r30, 0x53	; 83
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	d1 f6       	brne	.-76     	; 0x2a38 <main+0x166>
    2a84:	27 c0       	rjmp	.+78     	; 0x2ad4 <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a86:	8e 01       	movw	r16, r28
    2a88:	03 55       	subi	r16, 0x53	; 83
    2a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e1 55       	subi	r30, 0x51	; 81
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	60 81       	ld	r22, Z
    2a94:	71 81       	ldd	r23, Z+1	; 0x01
    2a96:	82 81       	ldd	r24, Z+2	; 0x02
    2a98:	93 81       	ldd	r25, Z+3	; 0x03
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	f8 01       	movw	r30, r16
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
    2aa8:	de 01       	movw	r26, r28
    2aaa:	a7 55       	subi	r26, 0x57	; 87
    2aac:	bf 4f       	sbci	r27, 0xFF	; 255
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e3 55       	subi	r30, 0x53	; 83
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	80 81       	ld	r24, Z
    2ab6:	91 81       	ldd	r25, Z+1	; 0x01
    2ab8:	8d 93       	st	X+, r24
    2aba:	9c 93       	st	X, r25
    2abc:	fe 01       	movw	r30, r28
    2abe:	e7 55       	subi	r30, 0x57	; 87
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <main+0x1f4>
    2aca:	fe 01       	movw	r30, r28
    2acc:	e7 55       	subi	r30, 0x57	; 87
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24
    _delay_ms(1000);


jump:
	 User_Pass = 0;
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e5 54       	subi	r30, 0x45	; 69
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	11 82       	std	Z+1, r1	; 0x01
    2adc:	10 82       	st	Z, r1
	 flag = 0;
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e8 54       	subi	r30, 0x48	; 72
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	10 82       	st	Z, r1
	 Try_Again++;
    2ae6:	de 01       	movw	r26, r28
    2ae8:	a7 54       	subi	r26, 0x47	; 71
    2aea:	bf 4f       	sbci	r27, 0xFF	; 255
    2aec:	fe 01       	movw	r30, r28
    2aee:	e7 54       	subi	r30, 0x47	; 71
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	91 81       	ldd	r25, Z+1	; 0x01
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	8d 93       	st	X+, r24
    2afa:	9c 93       	st	X, r25
    while(1)
    {
    	HLCD_voidClear();
    2afc:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
        HLCD_voidSendString("Enter Password");
    2b00:	8b e7       	ldi	r24, 0x7B	; 123
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    	HLCD_voidMoveCursor(LINE_2, 1);
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	61 e0       	ldi	r22, 0x01	; 1
    2b0c:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <HLCD_voidMoveCursor>
        while (1)
        {
            L_u8PressedButton = HKPD_U8PressedKey();
    2b10:	0e 94 1c 14 	call	0x2838	; 0x2838 <HKPD_U8PressedKey>
    2b14:	fe 01       	movw	r30, r28
    2b16:	ef 53       	subi	r30, 0x3F	; 63
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	80 83       	st	Z, r24

            if (L_u8PressedButton >= '0' && L_u8PressedButton <= '9')
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	ef 53       	subi	r30, 0x3F	; 63
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 81       	ld	r24, Z
    2b24:	80 33       	cpi	r24, 0x30	; 48
    2b26:	08 f4       	brcc	.+2      	; 0x2b2a <main+0x258>
    2b28:	e4 c0       	rjmp	.+456    	; 0x2cf2 <main+0x420>
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	ef 53       	subi	r30, 0x3F	; 63
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	8a 33       	cpi	r24, 0x3A	; 58
    2b34:	08 f0       	brcs	.+2      	; 0x2b38 <main+0x266>
    2b36:	dd c0       	rjmp	.+442    	; 0x2cf2 <main+0x420>
            {
                flag++;
    2b38:	de 01       	movw	r26, r28
    2b3a:	a8 54       	subi	r26, 0x48	; 72
    2b3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b3e:	fe 01       	movw	r30, r28
    2b40:	e8 54       	subi	r30, 0x48	; 72
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	80 81       	ld	r24, Z
    2b46:	8f 5f       	subi	r24, 0xFF	; 255
    2b48:	8c 93       	st	X, r24
                User_Pass = (User_Pass * 10) + (L_u8PressedButton - '0');
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e5 54       	subi	r30, 0x45	; 69
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	9c 01       	movw	r18, r24
    2b56:	22 0f       	add	r18, r18
    2b58:	33 1f       	adc	r19, r19
    2b5a:	c9 01       	movw	r24, r18
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	28 0f       	add	r18, r24
    2b66:	39 1f       	adc	r19, r25
    2b68:	fe 01       	movw	r30, r28
    2b6a:	ef 53       	subi	r30, 0x3F	; 63
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 81       	ld	r24, Z
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	82 0f       	add	r24, r18
    2b76:	93 1f       	adc	r25, r19
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e5 54       	subi	r30, 0x45	; 69
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	c0 97       	sbiw	r24, 0x30	; 48
    2b80:	91 83       	std	Z+1, r25	; 0x01
    2b82:	80 83       	st	Z, r24
                HLCD_voidSendData('*');
    2b84:	8a e2       	ldi	r24, 0x2A	; 42
    2b86:	0e 94 63 11 	call	0x22c6	; 0x22c6 <HLCD_voidSendData>
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	eb 55       	subi	r30, 0x5B	; 91
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	aa e7       	ldi	r26, 0x7A	; 122
    2b96:	b3 e4       	ldi	r27, 0x43	; 67
    2b98:	80 83       	st	Z, r24
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	a2 83       	std	Z+2, r26	; 0x02
    2b9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba0:	8e 01       	movw	r16, r28
    2ba2:	0f 55       	subi	r16, 0x5F	; 95
    2ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	eb 55       	subi	r30, 0x5B	; 91
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	60 81       	ld	r22, Z
    2bae:	71 81       	ldd	r23, Z+1	; 0x01
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	4a ef       	ldi	r20, 0xFA	; 250
    2bba:	54 e4       	ldi	r21, 0x44	; 68
    2bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	f8 01       	movw	r30, r16
    2bc6:	80 83       	st	Z, r24
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	a2 83       	std	Z+2, r26	; 0x02
    2bcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bce:	fe 01       	movw	r30, r28
    2bd0:	ef 55       	subi	r30, 0x5F	; 95
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	60 81       	ld	r22, Z
    2bd6:	71 81       	ldd	r23, Z+1	; 0x01
    2bd8:	82 81       	ldd	r24, Z+2	; 0x02
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e8       	ldi	r20, 0x80	; 128
    2be2:	5f e3       	ldi	r21, 0x3F	; 63
    2be4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2be8:	88 23       	and	r24, r24
    2bea:	44 f4       	brge	.+16     	; 0x2bfc <main+0x32a>
		__ticks = 1;
    2bec:	fe 01       	movw	r30, r28
    2bee:	e1 56       	subi	r30, 0x61	; 97
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	80 83       	st	Z, r24
    2bfa:	64 c0       	rjmp	.+200    	; 0x2cc4 <main+0x3f2>
	else if (__tmp > 65535)
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	ef 55       	subi	r30, 0x5F	; 95
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	60 81       	ld	r22, Z
    2c04:	71 81       	ldd	r23, Z+1	; 0x01
    2c06:	82 81       	ldd	r24, Z+2	; 0x02
    2c08:	93 81       	ldd	r25, Z+3	; 0x03
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	3f ef       	ldi	r19, 0xFF	; 255
    2c0e:	4f e7       	ldi	r20, 0x7F	; 127
    2c10:	57 e4       	ldi	r21, 0x47	; 71
    2c12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c16:	18 16       	cp	r1, r24
    2c18:	0c f0       	brlt	.+2      	; 0x2c1c <main+0x34a>
    2c1a:	43 c0       	rjmp	.+134    	; 0x2ca2 <main+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	eb 55       	subi	r30, 0x5B	; 91
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	60 81       	ld	r22, Z
    2c24:	71 81       	ldd	r23, Z+1	; 0x01
    2c26:	82 81       	ldd	r24, Z+2	; 0x02
    2c28:	93 81       	ldd	r25, Z+3	; 0x03
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e2       	ldi	r20, 0x20	; 32
    2c30:	51 e4       	ldi	r21, 0x41	; 65
    2c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	8e 01       	movw	r16, r28
    2c3c:	01 56       	subi	r16, 0x61	; 97
    2c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c40:	bc 01       	movw	r22, r24
    2c42:	cd 01       	movw	r24, r26
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24
    2c52:	1f c0       	rjmp	.+62     	; 0x2c92 <main+0x3c0>
    2c54:	fe 01       	movw	r30, r28
    2c56:	e3 56       	subi	r30, 0x63	; 99
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	88 ec       	ldi	r24, 0xC8	; 200
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	80 83       	st	Z, r24
    2c62:	fe 01       	movw	r30, r28
    2c64:	e3 56       	subi	r30, 0x63	; 99
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	80 81       	ld	r24, Z
    2c6a:	91 81       	ldd	r25, Z+1	; 0x01
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <main+0x39a>
    2c70:	fe 01       	movw	r30, r28
    2c72:	e3 56       	subi	r30, 0x63	; 99
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	91 83       	std	Z+1, r25	; 0x01
    2c78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	de 01       	movw	r26, r28
    2c7c:	a1 56       	subi	r26, 0x61	; 97
    2c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c80:	fe 01       	movw	r30, r28
    2c82:	e1 56       	subi	r30, 0x61	; 97
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	11 96       	adiw	r26, 0x01	; 1
    2c8e:	9c 93       	st	X, r25
    2c90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c92:	fe 01       	movw	r30, r28
    2c94:	e1 56       	subi	r30, 0x61	; 97
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	80 81       	ld	r24, Z
    2c9a:	91 81       	ldd	r25, Z+1	; 0x01
    2c9c:	00 97       	sbiw	r24, 0x00	; 0
    2c9e:	d1 f6       	brne	.-76     	; 0x2c54 <main+0x382>
    2ca0:	28 c0       	rjmp	.+80     	; 0x2cf2 <main+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca2:	8e 01       	movw	r16, r28
    2ca4:	01 56       	subi	r16, 0x61	; 97
    2ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ef 55       	subi	r30, 0x5F	; 95
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	60 81       	ld	r22, Z
    2cb0:	71 81       	ldd	r23, Z+1	; 0x01
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	93 81       	ldd	r25, Z+3	; 0x03
    2cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	f8 01       	movw	r30, r16
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	80 83       	st	Z, r24
    2cc4:	de 01       	movw	r26, r28
    2cc6:	a5 56       	subi	r26, 0x65	; 101
    2cc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e1 56       	subi	r30, 0x61	; 97
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 81       	ld	r24, Z
    2cd2:	91 81       	ldd	r25, Z+1	; 0x01
    2cd4:	11 96       	adiw	r26, 0x01	; 1
    2cd6:	9c 93       	st	X, r25
    2cd8:	8e 93       	st	-X, r24
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e5 56       	subi	r30, 0x65	; 101
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	91 81       	ldd	r25, Z+1	; 0x01
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <main+0x412>
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e5 56       	subi	r30, 0x65	; 101
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24
                _delay_ms(250);
            }

            if (flag == 4)
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e8 54       	subi	r30, 0x48	; 72
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	84 30       	cpi	r24, 0x04	; 4
    2cfc:	09 f0       	breq	.+2      	; 0x2d00 <main+0x42e>
    2cfe:	08 cf       	rjmp	.-496    	; 0x2b10 <main+0x23e>
            {
                break;
            }
        }

        if ((User_Pass != Password) && (Try_Again < 3))
    2d00:	fe 01       	movw	r30, r28
    2d02:	e5 54       	subi	r30, 0x45	; 69
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	de 01       	movw	r26, r28
    2d08:	a3 54       	subi	r26, 0x43	; 67
    2d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d0c:	20 81       	ld	r18, Z
    2d0e:	31 81       	ldd	r19, Z+1	; 0x01
    2d10:	8d 91       	ld	r24, X+
    2d12:	9c 91       	ld	r25, X
    2d14:	11 97       	sbiw	r26, 0x01	; 1
    2d16:	28 17       	cp	r18, r24
    2d18:	39 07       	cpc	r19, r25
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <main+0x44c>
    2d1c:	7d c1       	rjmp	.+762    	; 0x3018 <main+0x746>
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e7 54       	subi	r30, 0x47	; 71
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	80 81       	ld	r24, Z
    2d26:	91 81       	ldd	r25, Z+1	; 0x01
    2d28:	83 30       	cpi	r24, 0x03	; 3
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	08 f0       	brcs	.+2      	; 0x2d30 <main+0x45e>
    2d2e:	74 c1       	rjmp	.+744    	; 0x3018 <main+0x746>
        {
            HLCD_voidClear();
    2d30:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
            HLCD_voidSendString("Wrong Password");
    2d34:	8a e8       	ldi	r24, 0x8A	; 138
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	e9 56       	subi	r30, 0x69	; 105
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	aa e7       	ldi	r26, 0x7A	; 122
    2d48:	b4 e4       	ldi	r27, 0x44	; 68
    2d4a:	80 83       	st	Z, r24
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	a2 83       	std	Z+2, r26	; 0x02
    2d50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d52:	8e 01       	movw	r16, r28
    2d54:	0d 56       	subi	r16, 0x6D	; 109
    2d56:	1f 4f       	sbci	r17, 0xFF	; 255
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e9 56       	subi	r30, 0x69	; 105
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	60 81       	ld	r22, Z
    2d60:	71 81       	ldd	r23, Z+1	; 0x01
    2d62:	82 81       	ldd	r24, Z+2	; 0x02
    2d64:	93 81       	ldd	r25, Z+3	; 0x03
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	4a ef       	ldi	r20, 0xFA	; 250
    2d6c:	54 e4       	ldi	r21, 0x44	; 68
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	f8 01       	movw	r30, r16
    2d78:	80 83       	st	Z, r24
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	a2 83       	std	Z+2, r26	; 0x02
    2d7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d80:	fe 01       	movw	r30, r28
    2d82:	ed 56       	subi	r30, 0x6D	; 109
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	60 81       	ld	r22, Z
    2d88:	71 81       	ldd	r23, Z+1	; 0x01
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	93 81       	ldd	r25, Z+3	; 0x03
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e8       	ldi	r20, 0x80	; 128
    2d94:	5f e3       	ldi	r21, 0x3F	; 63
    2d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d9a:	88 23       	and	r24, r24
    2d9c:	44 f4       	brge	.+16     	; 0x2dae <main+0x4dc>
		__ticks = 1;
    2d9e:	fe 01       	movw	r30, r28
    2da0:	ef 56       	subi	r30, 0x6F	; 111
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	80 83       	st	Z, r24
    2dac:	64 c0       	rjmp	.+200    	; 0x2e76 <main+0x5a4>
	else if (__tmp > 65535)
    2dae:	fe 01       	movw	r30, r28
    2db0:	ed 56       	subi	r30, 0x6D	; 109
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	3f ef       	ldi	r19, 0xFF	; 255
    2dc0:	4f e7       	ldi	r20, 0x7F	; 127
    2dc2:	57 e4       	ldi	r21, 0x47	; 71
    2dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc8:	18 16       	cp	r1, r24
    2dca:	0c f0       	brlt	.+2      	; 0x2dce <main+0x4fc>
    2dcc:	43 c0       	rjmp	.+134    	; 0x2e54 <main+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e9 56       	subi	r30, 0x69	; 105
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	60 81       	ld	r22, Z
    2dd6:	71 81       	ldd	r23, Z+1	; 0x01
    2dd8:	82 81       	ldd	r24, Z+2	; 0x02
    2dda:	93 81       	ldd	r25, Z+3	; 0x03
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e2       	ldi	r20, 0x20	; 32
    2de2:	51 e4       	ldi	r21, 0x41	; 65
    2de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	8e 01       	movw	r16, r28
    2dee:	0f 56       	subi	r16, 0x6F	; 111
    2df0:	1f 4f       	sbci	r17, 0xFF	; 255
    2df2:	bc 01       	movw	r22, r24
    2df4:	cd 01       	movw	r24, r26
    2df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	f8 01       	movw	r30, r16
    2e00:	91 83       	std	Z+1, r25	; 0x01
    2e02:	80 83       	st	Z, r24
    2e04:	1f c0       	rjmp	.+62     	; 0x2e44 <main+0x572>
    2e06:	fe 01       	movw	r30, r28
    2e08:	e1 57       	subi	r30, 0x71	; 113
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	88 ec       	ldi	r24, 0xC8	; 200
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	80 83       	st	Z, r24
    2e14:	fe 01       	movw	r30, r28
    2e16:	e1 57       	subi	r30, 0x71	; 113
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	f1 f7       	brne	.-4      	; 0x2e1e <main+0x54c>
    2e22:	fe 01       	movw	r30, r28
    2e24:	e1 57       	subi	r30, 0x71	; 113
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	91 83       	std	Z+1, r25	; 0x01
    2e2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2c:	de 01       	movw	r26, r28
    2e2e:	af 56       	subi	r26, 0x6F	; 111
    2e30:	bf 4f       	sbci	r27, 0xFF	; 255
    2e32:	fe 01       	movw	r30, r28
    2e34:	ef 56       	subi	r30, 0x6F	; 111
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 81       	ld	r24, Z
    2e3a:	91 81       	ldd	r25, Z+1	; 0x01
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	11 96       	adiw	r26, 0x01	; 1
    2e40:	9c 93       	st	X, r25
    2e42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e44:	fe 01       	movw	r30, r28
    2e46:	ef 56       	subi	r30, 0x6F	; 111
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	80 81       	ld	r24, Z
    2e4c:	91 81       	ldd	r25, Z+1	; 0x01
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	d1 f6       	brne	.-76     	; 0x2e06 <main+0x534>
    2e52:	27 c0       	rjmp	.+78     	; 0x2ea2 <main+0x5d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e54:	8e 01       	movw	r16, r28
    2e56:	0f 56       	subi	r16, 0x6F	; 111
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	ed 56       	subi	r30, 0x6D	; 109
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	f8 01       	movw	r30, r16
    2e72:	91 83       	std	Z+1, r25	; 0x01
    2e74:	80 83       	st	Z, r24
    2e76:	de 01       	movw	r26, r28
    2e78:	a3 57       	subi	r26, 0x73	; 115
    2e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ef 56       	subi	r30, 0x6F	; 111
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	8d 93       	st	X+, r24
    2e88:	9c 93       	st	X, r25
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	e3 57       	subi	r30, 0x73	; 115
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	80 81       	ld	r24, Z
    2e92:	91 81       	ldd	r25, Z+1	; 0x01
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <main+0x5c2>
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e3 57       	subi	r30, 0x73	; 115
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	91 83       	std	Z+1, r25	; 0x01
    2ea0:	80 83       	st	Z, r24
            _delay_ms(1000);
            HLCD_voidClear();
    2ea2:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
            HLCD_voidSendString("Try again");
    2ea6:	89 e9       	ldi	r24, 0x99	; 153
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e7 57       	subi	r30, 0x77	; 119
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	aa e7       	ldi	r26, 0x7A	; 122
    2eba:	b4 e4       	ldi	r27, 0x44	; 68
    2ebc:	80 83       	st	Z, r24
    2ebe:	91 83       	std	Z+1, r25	; 0x01
    2ec0:	a2 83       	std	Z+2, r26	; 0x02
    2ec2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec4:	8e 01       	movw	r16, r28
    2ec6:	0b 57       	subi	r16, 0x7B	; 123
    2ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e7 57       	subi	r30, 0x77	; 119
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	60 81       	ld	r22, Z
    2ed2:	71 81       	ldd	r23, Z+1	; 0x01
    2ed4:	82 81       	ldd	r24, Z+2	; 0x02
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	4a ef       	ldi	r20, 0xFA	; 250
    2ede:	54 e4       	ldi	r21, 0x44	; 68
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	f8 01       	movw	r30, r16
    2eea:	80 83       	st	Z, r24
    2eec:	91 83       	std	Z+1, r25	; 0x01
    2eee:	a2 83       	std	Z+2, r26	; 0x02
    2ef0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	eb 57       	subi	r30, 0x7B	; 123
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	60 81       	ld	r22, Z
    2efa:	71 81       	ldd	r23, Z+1	; 0x01
    2efc:	82 81       	ldd	r24, Z+2	; 0x02
    2efe:	93 81       	ldd	r25, Z+3	; 0x03
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	40 e8       	ldi	r20, 0x80	; 128
    2f06:	5f e3       	ldi	r21, 0x3F	; 63
    2f08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f0c:	88 23       	and	r24, r24
    2f0e:	44 f4       	brge	.+16     	; 0x2f20 <main+0x64e>
		__ticks = 1;
    2f10:	fe 01       	movw	r30, r28
    2f12:	ed 57       	subi	r30, 0x7D	; 125
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	91 83       	std	Z+1, r25	; 0x01
    2f1c:	80 83       	st	Z, r24
    2f1e:	64 c0       	rjmp	.+200    	; 0x2fe8 <main+0x716>
	else if (__tmp > 65535)
    2f20:	fe 01       	movw	r30, r28
    2f22:	eb 57       	subi	r30, 0x7B	; 123
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	60 81       	ld	r22, Z
    2f28:	71 81       	ldd	r23, Z+1	; 0x01
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	93 81       	ldd	r25, Z+3	; 0x03
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	3f ef       	ldi	r19, 0xFF	; 255
    2f32:	4f e7       	ldi	r20, 0x7F	; 127
    2f34:	57 e4       	ldi	r21, 0x47	; 71
    2f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f3a:	18 16       	cp	r1, r24
    2f3c:	0c f0       	brlt	.+2      	; 0x2f40 <main+0x66e>
    2f3e:	43 c0       	rjmp	.+134    	; 0x2fc6 <main+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f40:	fe 01       	movw	r30, r28
    2f42:	e7 57       	subi	r30, 0x77	; 119
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	60 81       	ld	r22, Z
    2f48:	71 81       	ldd	r23, Z+1	; 0x01
    2f4a:	82 81       	ldd	r24, Z+2	; 0x02
    2f4c:	93 81       	ldd	r25, Z+3	; 0x03
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e2       	ldi	r20, 0x20	; 32
    2f54:	51 e4       	ldi	r21, 0x41	; 65
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	8e 01       	movw	r16, r28
    2f60:	0d 57       	subi	r16, 0x7D	; 125
    2f62:	1f 4f       	sbci	r17, 0xFF	; 255
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	f8 01       	movw	r30, r16
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	80 83       	st	Z, r24
    2f76:	1f c0       	rjmp	.+62     	; 0x2fb6 <main+0x6e4>
    2f78:	fe 01       	movw	r30, r28
    2f7a:	ef 57       	subi	r30, 0x7F	; 127
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	88 ec       	ldi	r24, 0xC8	; 200
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
    2f86:	fe 01       	movw	r30, r28
    2f88:	ef 57       	subi	r30, 0x7F	; 127
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <main+0x6be>
    2f94:	fe 01       	movw	r30, r28
    2f96:	ef 57       	subi	r30, 0x7F	; 127
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9e:	de 01       	movw	r26, r28
    2fa0:	ad 57       	subi	r26, 0x7D	; 125
    2fa2:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ed 57       	subi	r30, 0x7D	; 125
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	11 96       	adiw	r26, 0x01	; 1
    2fb2:	9c 93       	st	X, r25
    2fb4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ed 57       	subi	r30, 0x7D	; 125
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	80 81       	ld	r24, Z
    2fbe:	91 81       	ldd	r25, Z+1	; 0x01
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	d1 f6       	brne	.-76     	; 0x2f78 <main+0x6a6>
    2fc4:	87 cd       	rjmp	.-1266   	; 0x2ad4 <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc6:	8e 01       	movw	r16, r28
    2fc8:	0d 57       	subi	r16, 0x7D	; 125
    2fca:	1f 4f       	sbci	r17, 0xFF	; 255
    2fcc:	fe 01       	movw	r30, r28
    2fce:	eb 57       	subi	r30, 0x7B	; 123
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	f8 01       	movw	r30, r16
    2fe4:	91 83       	std	Z+1, r25	; 0x01
    2fe6:	80 83       	st	Z, r24
    2fe8:	de 01       	movw	r26, r28
    2fea:	a1 58       	subi	r26, 0x81	; 129
    2fec:	bf 4f       	sbci	r27, 0xFF	; 255
    2fee:	fe 01       	movw	r30, r28
    2ff0:	ed 57       	subi	r30, 0x7D	; 125
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	80 81       	ld	r24, Z
    2ff6:	91 81       	ldd	r25, Z+1	; 0x01
    2ff8:	11 96       	adiw	r26, 0x01	; 1
    2ffa:	9c 93       	st	X, r25
    2ffc:	8e 93       	st	-X, r24
    2ffe:	fe 01       	movw	r30, r28
    3000:	e1 58       	subi	r30, 0x81	; 129
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	80 81       	ld	r24, Z
    3006:	91 81       	ldd	r25, Z+1	; 0x01
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	f1 f7       	brne	.-4      	; 0x3008 <main+0x736>
    300c:	fe 01       	movw	r30, r28
    300e:	e1 58       	subi	r30, 0x81	; 129
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	80 83       	st	Z, r24
    3016:	5e cd       	rjmp	.-1348   	; 0x2ad4 <main+0x202>
            _delay_ms(1000);
            goto jump;
        }
        else if ((User_Pass != Password) && (Try_Again == 3))
    3018:	fe 01       	movw	r30, r28
    301a:	e5 54       	subi	r30, 0x45	; 69
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	de 01       	movw	r26, r28
    3020:	a3 54       	subi	r26, 0x43	; 67
    3022:	bf 4f       	sbci	r27, 0xFF	; 255
    3024:	20 81       	ld	r18, Z
    3026:	31 81       	ldd	r19, Z+1	; 0x01
    3028:	8d 91       	ld	r24, X+
    302a:	9c 91       	ld	r25, X
    302c:	11 97       	sbiw	r26, 0x01	; 1
    302e:	28 17       	cp	r18, r24
    3030:	39 07       	cpc	r19, r25
    3032:	09 f4       	brne	.+2      	; 0x3036 <main+0x764>
    3034:	8f c1       	rjmp	.+798    	; 0x3354 <main+0xa82>
    3036:	fe 01       	movw	r30, r28
    3038:	e7 54       	subi	r30, 0x47	; 71
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	80 81       	ld	r24, Z
    303e:	91 81       	ldd	r25, Z+1	; 0x01
    3040:	83 30       	cpi	r24, 0x03	; 3
    3042:	91 05       	cpc	r25, r1
    3044:	09 f0       	breq	.+2      	; 0x3048 <main+0x776>
    3046:	86 c1       	rjmp	.+780    	; 0x3354 <main+0xa82>
        {
            HLCD_voidClear();
    3048:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
            HLCD_voidSendString("No More Tries");
    304c:	83 ea       	ldi	r24, 0xA3	; 163
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    3054:	fe 01       	movw	r30, r28
    3056:	e5 58       	subi	r30, 0x85	; 133
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	aa e7       	ldi	r26, 0x7A	; 122
    3060:	b4 e4       	ldi	r27, 0x44	; 68
    3062:	80 83       	st	Z, r24
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	a2 83       	std	Z+2, r26	; 0x02
    3068:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306a:	8e 01       	movw	r16, r28
    306c:	09 58       	subi	r16, 0x89	; 137
    306e:	1f 4f       	sbci	r17, 0xFF	; 255
    3070:	fe 01       	movw	r30, r28
    3072:	e5 58       	subi	r30, 0x85	; 133
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	4a ef       	ldi	r20, 0xFA	; 250
    3084:	54 e4       	ldi	r21, 0x44	; 68
    3086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	f8 01       	movw	r30, r16
    3090:	80 83       	st	Z, r24
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	a2 83       	std	Z+2, r26	; 0x02
    3096:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3098:	fe 01       	movw	r30, r28
    309a:	e9 58       	subi	r30, 0x89	; 137
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	60 81       	ld	r22, Z
    30a0:	71 81       	ldd	r23, Z+1	; 0x01
    30a2:	82 81       	ldd	r24, Z+2	; 0x02
    30a4:	93 81       	ldd	r25, Z+3	; 0x03
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e8       	ldi	r20, 0x80	; 128
    30ac:	5f e3       	ldi	r21, 0x3F	; 63
    30ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30b2:	88 23       	and	r24, r24
    30b4:	44 f4       	brge	.+16     	; 0x30c6 <main+0x7f4>
		__ticks = 1;
    30b6:	fe 01       	movw	r30, r28
    30b8:	eb 58       	subi	r30, 0x8B	; 139
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	91 83       	std	Z+1, r25	; 0x01
    30c2:	80 83       	st	Z, r24
    30c4:	64 c0       	rjmp	.+200    	; 0x318e <main+0x8bc>
	else if (__tmp > 65535)
    30c6:	fe 01       	movw	r30, r28
    30c8:	e9 58       	subi	r30, 0x89	; 137
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	60 81       	ld	r22, Z
    30ce:	71 81       	ldd	r23, Z+1	; 0x01
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	3f ef       	ldi	r19, 0xFF	; 255
    30d8:	4f e7       	ldi	r20, 0x7F	; 127
    30da:	57 e4       	ldi	r21, 0x47	; 71
    30dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30e0:	18 16       	cp	r1, r24
    30e2:	0c f0       	brlt	.+2      	; 0x30e6 <main+0x814>
    30e4:	43 c0       	rjmp	.+134    	; 0x316c <main+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e6:	fe 01       	movw	r30, r28
    30e8:	e5 58       	subi	r30, 0x85	; 133
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e2       	ldi	r20, 0x20	; 32
    30fa:	51 e4       	ldi	r21, 0x41	; 65
    30fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	8e 01       	movw	r16, r28
    3106:	0b 58       	subi	r16, 0x8B	; 139
    3108:	1f 4f       	sbci	r17, 0xFF	; 255
    310a:	bc 01       	movw	r22, r24
    310c:	cd 01       	movw	r24, r26
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	f8 01       	movw	r30, r16
    3118:	91 83       	std	Z+1, r25	; 0x01
    311a:	80 83       	st	Z, r24
    311c:	1f c0       	rjmp	.+62     	; 0x315c <main+0x88a>
    311e:	fe 01       	movw	r30, r28
    3120:	ed 58       	subi	r30, 0x8D	; 141
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	88 ec       	ldi	r24, 0xC8	; 200
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	80 83       	st	Z, r24
    312c:	fe 01       	movw	r30, r28
    312e:	ed 58       	subi	r30, 0x8D	; 141
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	80 81       	ld	r24, Z
    3134:	91 81       	ldd	r25, Z+1	; 0x01
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <main+0x864>
    313a:	fe 01       	movw	r30, r28
    313c:	ed 58       	subi	r30, 0x8D	; 141
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	91 83       	std	Z+1, r25	; 0x01
    3142:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3144:	de 01       	movw	r26, r28
    3146:	ab 58       	subi	r26, 0x8B	; 139
    3148:	bf 4f       	sbci	r27, 0xFF	; 255
    314a:	fe 01       	movw	r30, r28
    314c:	eb 58       	subi	r30, 0x8B	; 139
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	80 81       	ld	r24, Z
    3152:	91 81       	ldd	r25, Z+1	; 0x01
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	11 96       	adiw	r26, 0x01	; 1
    3158:	9c 93       	st	X, r25
    315a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315c:	fe 01       	movw	r30, r28
    315e:	eb 58       	subi	r30, 0x8B	; 139
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	80 81       	ld	r24, Z
    3164:	91 81       	ldd	r25, Z+1	; 0x01
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	d1 f6       	brne	.-76     	; 0x311e <main+0x84c>
    316a:	27 c0       	rjmp	.+78     	; 0x31ba <main+0x8e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316c:	8e 01       	movw	r16, r28
    316e:	0b 58       	subi	r16, 0x8B	; 139
    3170:	1f 4f       	sbci	r17, 0xFF	; 255
    3172:	fe 01       	movw	r30, r28
    3174:	e9 58       	subi	r30, 0x89	; 137
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	60 81       	ld	r22, Z
    317a:	71 81       	ldd	r23, Z+1	; 0x01
    317c:	82 81       	ldd	r24, Z+2	; 0x02
    317e:	93 81       	ldd	r25, Z+3	; 0x03
    3180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	f8 01       	movw	r30, r16
    318a:	91 83       	std	Z+1, r25	; 0x01
    318c:	80 83       	st	Z, r24
    318e:	de 01       	movw	r26, r28
    3190:	af 58       	subi	r26, 0x8F	; 143
    3192:	bf 4f       	sbci	r27, 0xFF	; 255
    3194:	fe 01       	movw	r30, r28
    3196:	eb 58       	subi	r30, 0x8B	; 139
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 81       	ld	r24, Z
    319c:	91 81       	ldd	r25, Z+1	; 0x01
    319e:	8d 93       	st	X+, r24
    31a0:	9c 93       	st	X, r25
    31a2:	fe 01       	movw	r30, r28
    31a4:	ef 58       	subi	r30, 0x8F	; 143
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	80 81       	ld	r24, Z
    31aa:	91 81       	ldd	r25, Z+1	; 0x01
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <main+0x8da>
    31b0:	fe 01       	movw	r30, r28
    31b2:	ef 58       	subi	r30, 0x8F	; 143
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	91 83       	std	Z+1, r25	; 0x01
    31b8:	80 83       	st	Z, r24
            _delay_ms(1000);
            HLCD_voidClear();
    31ba:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
            HLCD_voidSendString("Alerts On");
    31be:	81 eb       	ldi	r24, 0xB1	; 177
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
            MDIO_voidSetPinValue(MDIO_PORTD, PIN3, HIGH); //buzzer on for wrong password 3 times
    31c6:	83 e0       	ldi	r24, 0x03	; 3
    31c8:	63 e0       	ldi	r22, 0x03	; 3
    31ca:	41 e0       	ldi	r20, 0x01	; 1
    31cc:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>
    31d0:	fe 01       	movw	r30, r28
    31d2:	e3 59       	subi	r30, 0x93	; 147
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	aa e7       	ldi	r26, 0x7A	; 122
    31dc:	b4 e4       	ldi	r27, 0x44	; 68
    31de:	80 83       	st	Z, r24
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	a2 83       	std	Z+2, r26	; 0x02
    31e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e6:	8e 01       	movw	r16, r28
    31e8:	07 59       	subi	r16, 0x97	; 151
    31ea:	1f 4f       	sbci	r17, 0xFF	; 255
    31ec:	fe 01       	movw	r30, r28
    31ee:	e3 59       	subi	r30, 0x93	; 147
    31f0:	ff 4f       	sbci	r31, 0xFF	; 255
    31f2:	60 81       	ld	r22, Z
    31f4:	71 81       	ldd	r23, Z+1	; 0x01
    31f6:	82 81       	ldd	r24, Z+2	; 0x02
    31f8:	93 81       	ldd	r25, Z+3	; 0x03
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	4a ef       	ldi	r20, 0xFA	; 250
    3200:	54 e4       	ldi	r21, 0x44	; 68
    3202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	f8 01       	movw	r30, r16
    320c:	80 83       	st	Z, r24
    320e:	91 83       	std	Z+1, r25	; 0x01
    3210:	a2 83       	std	Z+2, r26	; 0x02
    3212:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3214:	fe 01       	movw	r30, r28
    3216:	e7 59       	subi	r30, 0x97	; 151
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	60 81       	ld	r22, Z
    321c:	71 81       	ldd	r23, Z+1	; 0x01
    321e:	82 81       	ldd	r24, Z+2	; 0x02
    3220:	93 81       	ldd	r25, Z+3	; 0x03
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e8       	ldi	r20, 0x80	; 128
    3228:	5f e3       	ldi	r21, 0x3F	; 63
    322a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    322e:	88 23       	and	r24, r24
    3230:	44 f4       	brge	.+16     	; 0x3242 <main+0x970>
		__ticks = 1;
    3232:	fe 01       	movw	r30, r28
    3234:	e9 59       	subi	r30, 0x99	; 153
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	91 83       	std	Z+1, r25	; 0x01
    323e:	80 83       	st	Z, r24
    3240:	64 c0       	rjmp	.+200    	; 0x330a <main+0xa38>
	else if (__tmp > 65535)
    3242:	fe 01       	movw	r30, r28
    3244:	e7 59       	subi	r30, 0x97	; 151
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	60 81       	ld	r22, Z
    324a:	71 81       	ldd	r23, Z+1	; 0x01
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	3f ef       	ldi	r19, 0xFF	; 255
    3254:	4f e7       	ldi	r20, 0x7F	; 127
    3256:	57 e4       	ldi	r21, 0x47	; 71
    3258:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    325c:	18 16       	cp	r1, r24
    325e:	0c f0       	brlt	.+2      	; 0x3262 <main+0x990>
    3260:	43 c0       	rjmp	.+134    	; 0x32e8 <main+0xa16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3262:	fe 01       	movw	r30, r28
    3264:	e3 59       	subi	r30, 0x93	; 147
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	60 81       	ld	r22, Z
    326a:	71 81       	ldd	r23, Z+1	; 0x01
    326c:	82 81       	ldd	r24, Z+2	; 0x02
    326e:	93 81       	ldd	r25, Z+3	; 0x03
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e2       	ldi	r20, 0x20	; 32
    3276:	51 e4       	ldi	r21, 0x41	; 65
    3278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	8e 01       	movw	r16, r28
    3282:	09 59       	subi	r16, 0x99	; 153
    3284:	1f 4f       	sbci	r17, 0xFF	; 255
    3286:	bc 01       	movw	r22, r24
    3288:	cd 01       	movw	r24, r26
    328a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	f8 01       	movw	r30, r16
    3294:	91 83       	std	Z+1, r25	; 0x01
    3296:	80 83       	st	Z, r24
    3298:	1f c0       	rjmp	.+62     	; 0x32d8 <main+0xa06>
    329a:	fe 01       	movw	r30, r28
    329c:	eb 59       	subi	r30, 0x9B	; 155
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	88 ec       	ldi	r24, 0xC8	; 200
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	91 83       	std	Z+1, r25	; 0x01
    32a6:	80 83       	st	Z, r24
    32a8:	fe 01       	movw	r30, r28
    32aa:	eb 59       	subi	r30, 0x9B	; 155
    32ac:	ff 4f       	sbci	r31, 0xFF	; 255
    32ae:	80 81       	ld	r24, Z
    32b0:	91 81       	ldd	r25, Z+1	; 0x01
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	f1 f7       	brne	.-4      	; 0x32b2 <main+0x9e0>
    32b6:	fe 01       	movw	r30, r28
    32b8:	eb 59       	subi	r30, 0x9B	; 155
    32ba:	ff 4f       	sbci	r31, 0xFF	; 255
    32bc:	91 83       	std	Z+1, r25	; 0x01
    32be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c0:	de 01       	movw	r26, r28
    32c2:	a9 59       	subi	r26, 0x99	; 153
    32c4:	bf 4f       	sbci	r27, 0xFF	; 255
    32c6:	fe 01       	movw	r30, r28
    32c8:	e9 59       	subi	r30, 0x99	; 153
    32ca:	ff 4f       	sbci	r31, 0xFF	; 255
    32cc:	80 81       	ld	r24, Z
    32ce:	91 81       	ldd	r25, Z+1	; 0x01
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	11 96       	adiw	r26, 0x01	; 1
    32d4:	9c 93       	st	X, r25
    32d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d8:	fe 01       	movw	r30, r28
    32da:	e9 59       	subi	r30, 0x99	; 153
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	80 81       	ld	r24, Z
    32e0:	91 81       	ldd	r25, Z+1	; 0x01
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	d1 f6       	brne	.-76     	; 0x329a <main+0x9c8>
    32e6:	28 c0       	rjmp	.+80     	; 0x3338 <main+0xa66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e8:	8e 01       	movw	r16, r28
    32ea:	09 59       	subi	r16, 0x99	; 153
    32ec:	1f 4f       	sbci	r17, 0xFF	; 255
    32ee:	fe 01       	movw	r30, r28
    32f0:	e7 59       	subi	r30, 0x97	; 151
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	60 81       	ld	r22, Z
    32f6:	71 81       	ldd	r23, Z+1	; 0x01
    32f8:	82 81       	ldd	r24, Z+2	; 0x02
    32fa:	93 81       	ldd	r25, Z+3	; 0x03
    32fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	f8 01       	movw	r30, r16
    3306:	91 83       	std	Z+1, r25	; 0x01
    3308:	80 83       	st	Z, r24
    330a:	de 01       	movw	r26, r28
    330c:	ad 59       	subi	r26, 0x9D	; 157
    330e:	bf 4f       	sbci	r27, 0xFF	; 255
    3310:	fe 01       	movw	r30, r28
    3312:	e9 59       	subi	r30, 0x99	; 153
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	80 81       	ld	r24, Z
    3318:	91 81       	ldd	r25, Z+1	; 0x01
    331a:	11 96       	adiw	r26, 0x01	; 1
    331c:	9c 93       	st	X, r25
    331e:	8e 93       	st	-X, r24
    3320:	fe 01       	movw	r30, r28
    3322:	ed 59       	subi	r30, 0x9D	; 157
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	80 81       	ld	r24, Z
    3328:	91 81       	ldd	r25, Z+1	; 0x01
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	f1 f7       	brne	.-4      	; 0x332a <main+0xa58>
    332e:	fe 01       	movw	r30, r28
    3330:	ed 59       	subi	r30, 0x9D	; 157
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	91 83       	std	Z+1, r25	; 0x01
    3336:	80 83       	st	Z, r24
					goto Rooms_Menu;
				}
            }
        }
    }
    return 0;
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	90 e0       	ldi	r25, 0x00	; 0
}
    333c:	c9 52       	subi	r28, 0x29	; 41
    333e:	df 4f       	sbci	r29, 0xFF	; 255
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	08 95       	ret
            HLCD_voidSendString("Alerts On");
            MDIO_voidSetPinValue(MDIO_PORTD, PIN3, HIGH); //buzzer on for wrong password 3 times
            _delay_ms(1000);
            break;
        }
        else if (User_Pass == Password)
    3354:	fe 01       	movw	r30, r28
    3356:	e5 54       	subi	r30, 0x45	; 69
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	de 01       	movw	r26, r28
    335c:	a3 54       	subi	r26, 0x43	; 67
    335e:	bf 4f       	sbci	r27, 0xFF	; 255
    3360:	20 81       	ld	r18, Z
    3362:	31 81       	ldd	r19, Z+1	; 0x01
    3364:	8d 91       	ld	r24, X+
    3366:	9c 91       	ld	r25, X
    3368:	11 97       	sbiw	r26, 0x01	; 1
    336a:	28 17       	cp	r18, r24
    336c:	39 07       	cpc	r19, r25
    336e:	09 f0       	breq	.+2      	; 0x3372 <main+0xaa0>
    3370:	c5 cb       	rjmp	.-2166   	; 0x2afc <main+0x22a>
        {

            HLCD_voidClear();
    3372:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
            HLCD_voidSendString("Welcome Home");
    3376:	8b eb       	ldi	r24, 0xBB	; 187
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    337e:	fe 01       	movw	r30, r28
    3380:	e1 5a       	subi	r30, 0xA1	; 161
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	aa e7       	ldi	r26, 0x7A	; 122
    338a:	b4 e4       	ldi	r27, 0x44	; 68
    338c:	80 83       	st	Z, r24
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	a2 83       	std	Z+2, r26	; 0x02
    3392:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3394:	8e 01       	movw	r16, r28
    3396:	05 5a       	subi	r16, 0xA5	; 165
    3398:	1f 4f       	sbci	r17, 0xFF	; 255
    339a:	fe 01       	movw	r30, r28
    339c:	e1 5a       	subi	r30, 0xA1	; 161
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	60 81       	ld	r22, Z
    33a2:	71 81       	ldd	r23, Z+1	; 0x01
    33a4:	82 81       	ldd	r24, Z+2	; 0x02
    33a6:	93 81       	ldd	r25, Z+3	; 0x03
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	4a ef       	ldi	r20, 0xFA	; 250
    33ae:	54 e4       	ldi	r21, 0x44	; 68
    33b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	f8 01       	movw	r30, r16
    33ba:	80 83       	st	Z, r24
    33bc:	91 83       	std	Z+1, r25	; 0x01
    33be:	a2 83       	std	Z+2, r26	; 0x02
    33c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33c2:	fe 01       	movw	r30, r28
    33c4:	e5 5a       	subi	r30, 0xA5	; 165
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	60 81       	ld	r22, Z
    33ca:	71 81       	ldd	r23, Z+1	; 0x01
    33cc:	82 81       	ldd	r24, Z+2	; 0x02
    33ce:	93 81       	ldd	r25, Z+3	; 0x03
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e8       	ldi	r20, 0x80	; 128
    33d6:	5f e3       	ldi	r21, 0x3F	; 63
    33d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33dc:	88 23       	and	r24, r24
    33de:	44 f4       	brge	.+16     	; 0x33f0 <main+0xb1e>
		__ticks = 1;
    33e0:	fe 01       	movw	r30, r28
    33e2:	e7 5a       	subi	r30, 0xA7	; 167
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	91 83       	std	Z+1, r25	; 0x01
    33ec:	80 83       	st	Z, r24
    33ee:	64 c0       	rjmp	.+200    	; 0x34b8 <main+0xbe6>
	else if (__tmp > 65535)
    33f0:	fe 01       	movw	r30, r28
    33f2:	e5 5a       	subi	r30, 0xA5	; 165
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	60 81       	ld	r22, Z
    33f8:	71 81       	ldd	r23, Z+1	; 0x01
    33fa:	82 81       	ldd	r24, Z+2	; 0x02
    33fc:	93 81       	ldd	r25, Z+3	; 0x03
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	3f ef       	ldi	r19, 0xFF	; 255
    3402:	4f e7       	ldi	r20, 0x7F	; 127
    3404:	57 e4       	ldi	r21, 0x47	; 71
    3406:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    340a:	18 16       	cp	r1, r24
    340c:	0c f0       	brlt	.+2      	; 0x3410 <main+0xb3e>
    340e:	43 c0       	rjmp	.+134    	; 0x3496 <main+0xbc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3410:	fe 01       	movw	r30, r28
    3412:	e1 5a       	subi	r30, 0xA1	; 161
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	60 81       	ld	r22, Z
    3418:	71 81       	ldd	r23, Z+1	; 0x01
    341a:	82 81       	ldd	r24, Z+2	; 0x02
    341c:	93 81       	ldd	r25, Z+3	; 0x03
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e2       	ldi	r20, 0x20	; 32
    3424:	51 e4       	ldi	r21, 0x41	; 65
    3426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	8e 01       	movw	r16, r28
    3430:	07 5a       	subi	r16, 0xA7	; 167
    3432:	1f 4f       	sbci	r17, 0xFF	; 255
    3434:	bc 01       	movw	r22, r24
    3436:	cd 01       	movw	r24, r26
    3438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	f8 01       	movw	r30, r16
    3442:	91 83       	std	Z+1, r25	; 0x01
    3444:	80 83       	st	Z, r24
    3446:	1f c0       	rjmp	.+62     	; 0x3486 <main+0xbb4>
    3448:	fe 01       	movw	r30, r28
    344a:	e9 5a       	subi	r30, 0xA9	; 169
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	88 ec       	ldi	r24, 0xC8	; 200
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	91 83       	std	Z+1, r25	; 0x01
    3454:	80 83       	st	Z, r24
    3456:	fe 01       	movw	r30, r28
    3458:	e9 5a       	subi	r30, 0xA9	; 169
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <main+0xb8e>
    3464:	fe 01       	movw	r30, r28
    3466:	e9 5a       	subi	r30, 0xA9	; 169
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346e:	de 01       	movw	r26, r28
    3470:	a7 5a       	subi	r26, 0xA7	; 167
    3472:	bf 4f       	sbci	r27, 0xFF	; 255
    3474:	fe 01       	movw	r30, r28
    3476:	e7 5a       	subi	r30, 0xA7	; 167
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	80 81       	ld	r24, Z
    347c:	91 81       	ldd	r25, Z+1	; 0x01
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	11 96       	adiw	r26, 0x01	; 1
    3482:	9c 93       	st	X, r25
    3484:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3486:	fe 01       	movw	r30, r28
    3488:	e7 5a       	subi	r30, 0xA7	; 167
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 81       	ld	r24, Z
    348e:	91 81       	ldd	r25, Z+1	; 0x01
    3490:	00 97       	sbiw	r24, 0x00	; 0
    3492:	d1 f6       	brne	.-76     	; 0x3448 <main+0xb76>
    3494:	27 c0       	rjmp	.+78     	; 0x34e4 <main+0xc12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3496:	8e 01       	movw	r16, r28
    3498:	07 5a       	subi	r16, 0xA7	; 167
    349a:	1f 4f       	sbci	r17, 0xFF	; 255
    349c:	fe 01       	movw	r30, r28
    349e:	e5 5a       	subi	r30, 0xA5	; 165
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	60 81       	ld	r22, Z
    34a4:	71 81       	ldd	r23, Z+1	; 0x01
    34a6:	82 81       	ldd	r24, Z+2	; 0x02
    34a8:	93 81       	ldd	r25, Z+3	; 0x03
    34aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	f8 01       	movw	r30, r16
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	80 83       	st	Z, r24
    34b8:	de 01       	movw	r26, r28
    34ba:	ab 5a       	subi	r26, 0xAB	; 171
    34bc:	bf 4f       	sbci	r27, 0xFF	; 255
    34be:	fe 01       	movw	r30, r28
    34c0:	e7 5a       	subi	r30, 0xA7	; 167
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	80 81       	ld	r24, Z
    34c6:	91 81       	ldd	r25, Z+1	; 0x01
    34c8:	8d 93       	st	X+, r24
    34ca:	9c 93       	st	X, r25
    34cc:	fe 01       	movw	r30, r28
    34ce:	eb 5a       	subi	r30, 0xAB	; 171
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	80 81       	ld	r24, Z
    34d4:	91 81       	ldd	r25, Z+1	; 0x01
    34d6:	01 97       	sbiw	r24, 0x01	; 1
    34d8:	f1 f7       	brne	.-4      	; 0x34d6 <main+0xc04>
    34da:	fe 01       	movw	r30, r28
    34dc:	eb 5a       	subi	r30, 0xAB	; 171
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	80 83       	st	Z, r24
            _delay_ms(1000);

            HLCD_voidClear();
    34e4:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
            MTIMER1_voidSetPinACompareMatch(1999);        //open the door
    34e8:	8f ec       	ldi	r24, 0xCF	; 207
    34ea:	97 e0       	ldi	r25, 0x07	; 7
    34ec:	0e 94 ed 05 	call	0xbda	; 0xbda <MTIMER1_voidSetPinACompareMatch>
            HLCD_voidSendString("Door is opened");
    34f0:	88 ec       	ldi	r24, 0xC8	; 200
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    34f8:	fe 01       	movw	r30, r28
    34fa:	ef 5a       	subi	r30, 0xAF	; 175
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	aa ef       	ldi	r26, 0xFA	; 250
    3504:	b3 e4       	ldi	r27, 0x43	; 67
    3506:	80 83       	st	Z, r24
    3508:	91 83       	std	Z+1, r25	; 0x01
    350a:	a2 83       	std	Z+2, r26	; 0x02
    350c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350e:	8e 01       	movw	r16, r28
    3510:	03 5b       	subi	r16, 0xB3	; 179
    3512:	1f 4f       	sbci	r17, 0xFF	; 255
    3514:	fe 01       	movw	r30, r28
    3516:	ef 5a       	subi	r30, 0xAF	; 175
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	60 81       	ld	r22, Z
    351c:	71 81       	ldd	r23, Z+1	; 0x01
    351e:	82 81       	ldd	r24, Z+2	; 0x02
    3520:	93 81       	ldd	r25, Z+3	; 0x03
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	4a ef       	ldi	r20, 0xFA	; 250
    3528:	54 e4       	ldi	r21, 0x44	; 68
    352a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	f8 01       	movw	r30, r16
    3534:	80 83       	st	Z, r24
    3536:	91 83       	std	Z+1, r25	; 0x01
    3538:	a2 83       	std	Z+2, r26	; 0x02
    353a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    353c:	fe 01       	movw	r30, r28
    353e:	e3 5b       	subi	r30, 0xB3	; 179
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	60 81       	ld	r22, Z
    3544:	71 81       	ldd	r23, Z+1	; 0x01
    3546:	82 81       	ldd	r24, Z+2	; 0x02
    3548:	93 81       	ldd	r25, Z+3	; 0x03
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	40 e8       	ldi	r20, 0x80	; 128
    3550:	5f e3       	ldi	r21, 0x3F	; 63
    3552:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3556:	88 23       	and	r24, r24
    3558:	44 f4       	brge	.+16     	; 0x356a <main+0xc98>
		__ticks = 1;
    355a:	fe 01       	movw	r30, r28
    355c:	e5 5b       	subi	r30, 0xB5	; 181
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	91 83       	std	Z+1, r25	; 0x01
    3566:	80 83       	st	Z, r24
    3568:	64 c0       	rjmp	.+200    	; 0x3632 <main+0xd60>
	else if (__tmp > 65535)
    356a:	fe 01       	movw	r30, r28
    356c:	e3 5b       	subi	r30, 0xB3	; 179
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	60 81       	ld	r22, Z
    3572:	71 81       	ldd	r23, Z+1	; 0x01
    3574:	82 81       	ldd	r24, Z+2	; 0x02
    3576:	93 81       	ldd	r25, Z+3	; 0x03
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	3f ef       	ldi	r19, 0xFF	; 255
    357c:	4f e7       	ldi	r20, 0x7F	; 127
    357e:	57 e4       	ldi	r21, 0x47	; 71
    3580:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3584:	18 16       	cp	r1, r24
    3586:	0c f0       	brlt	.+2      	; 0x358a <main+0xcb8>
    3588:	43 c0       	rjmp	.+134    	; 0x3610 <main+0xd3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    358a:	fe 01       	movw	r30, r28
    358c:	ef 5a       	subi	r30, 0xAF	; 175
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	60 81       	ld	r22, Z
    3592:	71 81       	ldd	r23, Z+1	; 0x01
    3594:	82 81       	ldd	r24, Z+2	; 0x02
    3596:	93 81       	ldd	r25, Z+3	; 0x03
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	40 e2       	ldi	r20, 0x20	; 32
    359e:	51 e4       	ldi	r21, 0x41	; 65
    35a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	8e 01       	movw	r16, r28
    35aa:	05 5b       	subi	r16, 0xB5	; 181
    35ac:	1f 4f       	sbci	r17, 0xFF	; 255
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	f8 01       	movw	r30, r16
    35bc:	91 83       	std	Z+1, r25	; 0x01
    35be:	80 83       	st	Z, r24
    35c0:	1f c0       	rjmp	.+62     	; 0x3600 <main+0xd2e>
    35c2:	fe 01       	movw	r30, r28
    35c4:	e7 5b       	subi	r30, 0xB7	; 183
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	88 ec       	ldi	r24, 0xC8	; 200
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	91 83       	std	Z+1, r25	; 0x01
    35ce:	80 83       	st	Z, r24
    35d0:	fe 01       	movw	r30, r28
    35d2:	e7 5b       	subi	r30, 0xB7	; 183
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	80 81       	ld	r24, Z
    35d8:	91 81       	ldd	r25, Z+1	; 0x01
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <main+0xd08>
    35de:	fe 01       	movw	r30, r28
    35e0:	e7 5b       	subi	r30, 0xB7	; 183
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	91 83       	std	Z+1, r25	; 0x01
    35e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e8:	de 01       	movw	r26, r28
    35ea:	a5 5b       	subi	r26, 0xB5	; 181
    35ec:	bf 4f       	sbci	r27, 0xFF	; 255
    35ee:	fe 01       	movw	r30, r28
    35f0:	e5 5b       	subi	r30, 0xB5	; 181
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	80 81       	ld	r24, Z
    35f6:	91 81       	ldd	r25, Z+1	; 0x01
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	11 96       	adiw	r26, 0x01	; 1
    35fc:	9c 93       	st	X, r25
    35fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3600:	fe 01       	movw	r30, r28
    3602:	e5 5b       	subi	r30, 0xB5	; 181
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	80 81       	ld	r24, Z
    3608:	91 81       	ldd	r25, Z+1	; 0x01
    360a:	00 97       	sbiw	r24, 0x00	; 0
    360c:	d1 f6       	brne	.-76     	; 0x35c2 <main+0xcf0>
    360e:	27 c0       	rjmp	.+78     	; 0x365e <main+0xd8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3610:	8e 01       	movw	r16, r28
    3612:	05 5b       	subi	r16, 0xB5	; 181
    3614:	1f 4f       	sbci	r17, 0xFF	; 255
    3616:	fe 01       	movw	r30, r28
    3618:	e3 5b       	subi	r30, 0xB3	; 179
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	60 81       	ld	r22, Z
    361e:	71 81       	ldd	r23, Z+1	; 0x01
    3620:	82 81       	ldd	r24, Z+2	; 0x02
    3622:	93 81       	ldd	r25, Z+3	; 0x03
    3624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	f8 01       	movw	r30, r16
    362e:	91 83       	std	Z+1, r25	; 0x01
    3630:	80 83       	st	Z, r24
    3632:	de 01       	movw	r26, r28
    3634:	a9 5b       	subi	r26, 0xB9	; 185
    3636:	bf 4f       	sbci	r27, 0xFF	; 255
    3638:	fe 01       	movw	r30, r28
    363a:	e5 5b       	subi	r30, 0xB5	; 181
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	80 81       	ld	r24, Z
    3640:	91 81       	ldd	r25, Z+1	; 0x01
    3642:	8d 93       	st	X+, r24
    3644:	9c 93       	st	X, r25
    3646:	fe 01       	movw	r30, r28
    3648:	e9 5b       	subi	r30, 0xB9	; 185
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	80 81       	ld	r24, Z
    364e:	91 81       	ldd	r25, Z+1	; 0x01
    3650:	01 97       	sbiw	r24, 0x01	; 1
    3652:	f1 f7       	brne	.-4      	; 0x3650 <main+0xd7e>
    3654:	fe 01       	movw	r30, r28
    3656:	e9 5b       	subi	r30, 0xB9	; 185
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	91 83       	std	Z+1, r25	; 0x01
    365c:	80 83       	st	Z, r24
            _delay_ms(500);

            HLCD_voidClear();
    365e:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
            MDIO_voidSetPinValue(MDIO_PORTA, PIN7, HIGH); //light system on
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	67 e0       	ldi	r22, 0x07	; 7
    3666:	41 e0       	ldi	r20, 0x01	; 1
    3668:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MDIO_voidSetPinValue>
            HLCD_voidSendString("Light Sys ON");
    366c:	87 ed       	ldi	r24, 0xD7	; 215
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    3674:	fe 01       	movw	r30, r28
    3676:	ed 5b       	subi	r30, 0xBD	; 189
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	aa ef       	ldi	r26, 0xFA	; 250
    3680:	b3 e4       	ldi	r27, 0x43	; 67
    3682:	80 83       	st	Z, r24
    3684:	91 83       	std	Z+1, r25	; 0x01
    3686:	a2 83       	std	Z+2, r26	; 0x02
    3688:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    368a:	8e 01       	movw	r16, r28
    368c:	01 5c       	subi	r16, 0xC1	; 193
    368e:	1f 4f       	sbci	r17, 0xFF	; 255
    3690:	fe 01       	movw	r30, r28
    3692:	ed 5b       	subi	r30, 0xBD	; 189
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	60 81       	ld	r22, Z
    3698:	71 81       	ldd	r23, Z+1	; 0x01
    369a:	82 81       	ldd	r24, Z+2	; 0x02
    369c:	93 81       	ldd	r25, Z+3	; 0x03
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	4a ef       	ldi	r20, 0xFA	; 250
    36a4:	54 e4       	ldi	r21, 0x44	; 68
    36a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	f8 01       	movw	r30, r16
    36b0:	80 83       	st	Z, r24
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	a2 83       	std	Z+2, r26	; 0x02
    36b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36b8:	fe 01       	movw	r30, r28
    36ba:	ff 96       	adiw	r30, 0x3f	; 63
    36bc:	60 81       	ld	r22, Z
    36be:	71 81       	ldd	r23, Z+1	; 0x01
    36c0:	82 81       	ldd	r24, Z+2	; 0x02
    36c2:	93 81       	ldd	r25, Z+3	; 0x03
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	40 e8       	ldi	r20, 0x80	; 128
    36ca:	5f e3       	ldi	r21, 0x3F	; 63
    36cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36d0:	88 23       	and	r24, r24
    36d2:	2c f4       	brge	.+10     	; 0x36de <main+0xe0c>
		__ticks = 1;
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	9e af       	std	Y+62, r25	; 0x3e
    36da:	8d af       	std	Y+61, r24	; 0x3d
    36dc:	46 c0       	rjmp	.+140    	; 0x376a <main+0xe98>
	else if (__tmp > 65535)
    36de:	fe 01       	movw	r30, r28
    36e0:	ff 96       	adiw	r30, 0x3f	; 63
    36e2:	60 81       	ld	r22, Z
    36e4:	71 81       	ldd	r23, Z+1	; 0x01
    36e6:	82 81       	ldd	r24, Z+2	; 0x02
    36e8:	93 81       	ldd	r25, Z+3	; 0x03
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	3f ef       	ldi	r19, 0xFF	; 255
    36ee:	4f e7       	ldi	r20, 0x7F	; 127
    36f0:	57 e4       	ldi	r21, 0x47	; 71
    36f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36f6:	18 16       	cp	r1, r24
    36f8:	64 f5       	brge	.+88     	; 0x3752 <main+0xe80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36fa:	fe 01       	movw	r30, r28
    36fc:	ed 5b       	subi	r30, 0xBD	; 189
    36fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3700:	60 81       	ld	r22, Z
    3702:	71 81       	ldd	r23, Z+1	; 0x01
    3704:	82 81       	ldd	r24, Z+2	; 0x02
    3706:	93 81       	ldd	r25, Z+3	; 0x03
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	40 e2       	ldi	r20, 0x20	; 32
    370e:	51 e4       	ldi	r21, 0x41	; 65
    3710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	bc 01       	movw	r22, r24
    371a:	cd 01       	movw	r24, r26
    371c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	9e af       	std	Y+62, r25	; 0x3e
    3726:	8d af       	std	Y+61, r24	; 0x3d
    3728:	0f c0       	rjmp	.+30     	; 0x3748 <main+0xe76>
    372a:	88 ec       	ldi	r24, 0xC8	; 200
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	9c af       	std	Y+60, r25	; 0x3c
    3730:	8b af       	std	Y+59, r24	; 0x3b
    3732:	8b ad       	ldd	r24, Y+59	; 0x3b
    3734:	9c ad       	ldd	r25, Y+60	; 0x3c
    3736:	01 97       	sbiw	r24, 0x01	; 1
    3738:	f1 f7       	brne	.-4      	; 0x3736 <main+0xe64>
    373a:	9c af       	std	Y+60, r25	; 0x3c
    373c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3740:	9e ad       	ldd	r25, Y+62	; 0x3e
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	9e af       	std	Y+62, r25	; 0x3e
    3746:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3748:	8d ad       	ldd	r24, Y+61	; 0x3d
    374a:	9e ad       	ldd	r25, Y+62	; 0x3e
    374c:	00 97       	sbiw	r24, 0x00	; 0
    374e:	69 f7       	brne	.-38     	; 0x372a <main+0xe58>
    3750:	16 c0       	rjmp	.+44     	; 0x377e <main+0xeac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3752:	fe 01       	movw	r30, r28
    3754:	ff 96       	adiw	r30, 0x3f	; 63
    3756:	60 81       	ld	r22, Z
    3758:	71 81       	ldd	r23, Z+1	; 0x01
    375a:	82 81       	ldd	r24, Z+2	; 0x02
    375c:	93 81       	ldd	r25, Z+3	; 0x03
    375e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	9e af       	std	Y+62, r25	; 0x3e
    3768:	8d af       	std	Y+61, r24	; 0x3d
    376a:	8d ad       	ldd	r24, Y+61	; 0x3d
    376c:	9e ad       	ldd	r25, Y+62	; 0x3e
    376e:	9a af       	std	Y+58, r25	; 0x3a
    3770:	89 af       	std	Y+57, r24	; 0x39
    3772:	89 ad       	ldd	r24, Y+57	; 0x39
    3774:	9a ad       	ldd	r25, Y+58	; 0x3a
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	f1 f7       	brne	.-4      	; 0x3776 <main+0xea4>
    377a:	9a af       	std	Y+58, r25	; 0x3a
    377c:	89 af       	std	Y+57, r24	; 0x39
            _delay_ms(500);

/*choose which room to control its components*/
 Rooms_Menu:
            HLCD_voidClear();
    377e:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
			HLCD_voidSendString("1.Room1 2.Room2");
    3782:	84 ee       	ldi	r24, 0xE4	; 228
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
			HLCD_voidMoveCursor(LINE_2, 1);
    378a:	82 e0       	ldi	r24, 0x02	; 2
    378c:	61 e0       	ldi	r22, 0x01	; 1
    378e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <HLCD_voidMoveCursor>
			HLCD_voidSendString("3.Bathroom");
    3792:	84 ef       	ldi	r24, 0xF4	; 244
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>

            while (1)
            {
                L_u8PressedButton = HKPD_U8PressedKey();
    379a:	0e 94 1c 14 	call	0x2838	; 0x2838 <HKPD_U8PressedKey>
    379e:	fe 01       	movw	r30, r28
    37a0:	ef 53       	subi	r30, 0x3F	; 63
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	80 83       	st	Z, r24

                if (L_u8PressedButton >= '1' && L_u8PressedButton <= '3')
    37a6:	fe 01       	movw	r30, r28
    37a8:	ef 53       	subi	r30, 0x3F	; 63
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	80 81       	ld	r24, Z
    37ae:	81 33       	cpi	r24, 0x31	; 49
    37b0:	a0 f3       	brcs	.-24     	; 0x379a <main+0xec8>
    37b2:	fe 01       	movw	r30, r28
    37b4:	ef 53       	subi	r30, 0x3F	; 63
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	80 81       	ld	r24, Z
    37ba:	84 33       	cpi	r24, 0x34	; 52
    37bc:	70 f7       	brcc	.-36     	; 0x379a <main+0xec8>
                {
                    selectedRoom = L_u8PressedButton - '0';
    37be:	fe 01       	movw	r30, r28
    37c0:	ef 53       	subi	r30, 0x3F	; 63
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	80 81       	ld	r24, Z
    37c6:	fe 01       	movw	r30, r28
    37c8:	e9 54       	subi	r30, 0x49	; 73
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 53       	subi	r24, 0x30	; 48
    37ce:	80 83       	st	Z, r24
                    break;
                }
            }

/*select which component to control it*/
option_menu:   HLCD_voidClear();
    37d0:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
			   switch (selectedRoom)
    37d4:	fe 01       	movw	r30, r28
    37d6:	e9 54       	subi	r30, 0x49	; 73
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 81       	ld	r24, Z
    37dc:	28 2f       	mov	r18, r24
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	ca 52       	subi	r28, 0x2A	; 42
    37e2:	df 4f       	sbci	r29, 0xFF	; 255
    37e4:	39 83       	std	Y+1, r19	; 0x01
    37e6:	28 83       	st	Y, r18
    37e8:	c6 5d       	subi	r28, 0xD6	; 214
    37ea:	d0 40       	sbci	r29, 0x00	; 0
    37ec:	ca 52       	subi	r28, 0x2A	; 42
    37ee:	df 4f       	sbci	r29, 0xFF	; 255
    37f0:	88 81       	ld	r24, Y
    37f2:	99 81       	ldd	r25, Y+1	; 0x01
    37f4:	c6 5d       	subi	r28, 0xD6	; 214
    37f6:	d0 40       	sbci	r29, 0x00	; 0
    37f8:	82 30       	cpi	r24, 0x02	; 2
    37fa:	91 05       	cpc	r25, r1
    37fc:	f9 f0       	breq	.+62     	; 0x383c <main+0xf6a>
    37fe:	ca 52       	subi	r28, 0x2A	; 42
    3800:	df 4f       	sbci	r29, 0xFF	; 255
    3802:	e8 81       	ld	r30, Y
    3804:	f9 81       	ldd	r31, Y+1	; 0x01
    3806:	c6 5d       	subi	r28, 0xD6	; 214
    3808:	d0 40       	sbci	r29, 0x00	; 0
    380a:	e3 30       	cpi	r30, 0x03	; 3
    380c:	f1 05       	cpc	r31, r1
    380e:	19 f1       	breq	.+70     	; 0x3856 <main+0xf84>
    3810:	ca 52       	subi	r28, 0x2A	; 42
    3812:	df 4f       	sbci	r29, 0xFF	; 255
    3814:	28 81       	ld	r18, Y
    3816:	39 81       	ldd	r19, Y+1	; 0x01
    3818:	c6 5d       	subi	r28, 0xD6	; 214
    381a:	d0 40       	sbci	r29, 0x00	; 0
    381c:	21 30       	cpi	r18, 0x01	; 1
    381e:	31 05       	cpc	r19, r1
    3820:	31 f5       	brne	.+76     	; 0x386e <main+0xf9c>
			   {
			   case 1:
				   HLCD_voidSendString("1.Light  2.Fan");
    3822:	8f ef       	ldi	r24, 0xFF	; 255
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
				   HLCD_voidMoveCursor(LINE_2, 1);
    382a:	82 e0       	ldi	r24, 0x02	; 2
    382c:	61 e0       	ldi	r22, 0x01	; 1
    382e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <HLCD_voidMoveCursor>
				   HLCD_voidSendString("3.TV    4.Back");
    3832:	8e e0       	ldi	r24, 0x0E	; 14
    3834:	91 e0       	ldi	r25, 0x01	; 1
    3836:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    383a:	19 c0       	rjmp	.+50     	; 0x386e <main+0xf9c>
				   break;
			   case 2:
				   HLCD_voidSendString("1.Light  2.Back");
    383c:	8d e1       	ldi	r24, 0x1D	; 29
    383e:	91 e0       	ldi	r25, 0x01	; 1
    3840:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
				   HLCD_voidMoveCursor(LINE_2, 1);
    3844:	82 e0       	ldi	r24, 0x02	; 2
    3846:	61 e0       	ldi	r22, 0x01	; 1
    3848:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <HLCD_voidMoveCursor>
				   HLCD_voidSendString("3.Air Condition");
    384c:	8d e2       	ldi	r24, 0x2D	; 45
    384e:	91 e0       	ldi	r25, 0x01	; 1
    3850:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    3854:	0c c0       	rjmp	.+24     	; 0x386e <main+0xf9c>
				   break;
			   case 3:
				   HLCD_voidSendString("1.Light  2.Motor");
    3856:	8d e3       	ldi	r24, 0x3D	; 61
    3858:	91 e0       	ldi	r25, 0x01	; 1
    385a:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
				   HLCD_voidMoveCursor(LINE_2, 1);
    385e:	82 e0       	ldi	r24, 0x02	; 2
    3860:	61 e0       	ldi	r22, 0x01	; 1
    3862:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <HLCD_voidMoveCursor>
				   HLCD_voidSendString("3.Heater 4.back");
    3866:	8e e4       	ldi	r24, 0x4E	; 78
    3868:	91 e0       	ldi	r25, 0x01	; 1
    386a:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
			   }

            while (1)
            {

                L_u8PressedButton = HKPD_U8PressedKey();
    386e:	0e 94 1c 14 	call	0x2838	; 0x2838 <HKPD_U8PressedKey>
    3872:	fe 01       	movw	r30, r28
    3874:	ef 53       	subi	r30, 0x3F	; 63
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	80 83       	st	Z, r24

                if (L_u8PressedButton == '1')
    387a:	fe 01       	movw	r30, r28
    387c:	ef 53       	subi	r30, 0x3F	; 63
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 81       	ld	r24, Z
    3882:	81 33       	cpi	r24, 0x31	; 49
    3884:	09 f0       	breq	.+2      	; 0x3888 <main+0xfb6>
    3886:	e7 c0       	rjmp	.+462    	; 0x3a56 <main+0x1184>
                {
                	switch (selectedRoom)
    3888:	fe 01       	movw	r30, r28
    388a:	e9 54       	subi	r30, 0x49	; 73
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	80 81       	ld	r24, Z
    3890:	e8 2f       	mov	r30, r24
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	cc 52       	subi	r28, 0x2C	; 44
    3896:	df 4f       	sbci	r29, 0xFF	; 255
    3898:	f9 83       	std	Y+1, r31	; 0x01
    389a:	e8 83       	st	Y, r30
    389c:	c4 5d       	subi	r28, 0xD4	; 212
    389e:	d0 40       	sbci	r29, 0x00	; 0
    38a0:	cc 52       	subi	r28, 0x2C	; 44
    38a2:	df 4f       	sbci	r29, 0xFF	; 255
    38a4:	28 81       	ld	r18, Y
    38a6:	39 81       	ldd	r19, Y+1	; 0x01
    38a8:	c4 5d       	subi	r28, 0xD4	; 212
    38aa:	d0 40       	sbci	r29, 0x00	; 0
    38ac:	22 30       	cpi	r18, 0x02	; 2
    38ae:	31 05       	cpc	r19, r1
    38b0:	09 f4       	brne	.+2      	; 0x38b4 <main+0xfe2>
    38b2:	53 c0       	rjmp	.+166    	; 0x395a <main+0x1088>
    38b4:	cc 52       	subi	r28, 0x2C	; 44
    38b6:	df 4f       	sbci	r29, 0xFF	; 255
    38b8:	88 81       	ld	r24, Y
    38ba:	99 81       	ldd	r25, Y+1	; 0x01
    38bc:	c4 5d       	subi	r28, 0xD4	; 212
    38be:	d0 40       	sbci	r29, 0x00	; 0
    38c0:	83 30       	cpi	r24, 0x03	; 3
    38c2:	91 05       	cpc	r25, r1
    38c4:	09 f4       	brne	.+2      	; 0x38c8 <main+0xff6>
    38c6:	88 c0       	rjmp	.+272    	; 0x39d8 <main+0x1106>
    38c8:	cc 52       	subi	r28, 0x2C	; 44
    38ca:	df 4f       	sbci	r29, 0xFF	; 255
    38cc:	e8 81       	ld	r30, Y
    38ce:	f9 81       	ldd	r31, Y+1	; 0x01
    38d0:	c4 5d       	subi	r28, 0xD4	; 212
    38d2:	d0 40       	sbci	r29, 0x00	; 0
    38d4:	e1 30       	cpi	r30, 0x01	; 1
    38d6:	f1 05       	cpc	r31, r1
    38d8:	09 f0       	breq	.+2      	; 0x38dc <main+0x100a>
    38da:	7a cf       	rjmp	.-268    	; 0x37d0 <main+0xefe>
                	{

                	case 1: roomComponents[0][0] = (roomComponents[selectedRoom - 1][0] == ON) ? OFF : ON; //room1 light
    38dc:	fe 01       	movw	r30, r28
    38de:	e9 54       	subi	r30, 0x49	; 73
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	80 81       	ld	r24, Z
    38e4:	88 2f       	mov	r24, r24
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	9c 01       	movw	r18, r24
    38ea:	21 50       	subi	r18, 0x01	; 1
    38ec:	30 40       	sbci	r19, 0x00	; 0
    38ee:	c9 01       	movw	r24, r18
    38f0:	88 0f       	add	r24, r24
    38f2:	99 1f       	adc	r25, r25
    38f4:	82 0f       	add	r24, r18
    38f6:	93 1f       	adc	r25, r19
    38f8:	fc 01       	movw	r30, r24
    38fa:	e0 53       	subi	r30, 0x30	; 48
    38fc:	fe 4f       	sbci	r31, 0xFE	; 254
    38fe:	80 81       	ld	r24, Z
    3900:	cd 52       	subi	r28, 0x2D	; 45
    3902:	df 4f       	sbci	r29, 0xFF	; 255
    3904:	18 82       	st	Y, r1
    3906:	c3 5d       	subi	r28, 0xD3	; 211
    3908:	d0 40       	sbci	r29, 0x00	; 0
    390a:	81 30       	cpi	r24, 0x01	; 1
    390c:	31 f0       	breq	.+12     	; 0x391a <main+0x1048>
    390e:	f1 e0       	ldi	r31, 0x01	; 1
    3910:	cd 52       	subi	r28, 0x2D	; 45
    3912:	df 4f       	sbci	r29, 0xFF	; 255
    3914:	f8 83       	st	Y, r31
    3916:	c3 5d       	subi	r28, 0xD3	; 211
    3918:	d0 40       	sbci	r29, 0x00	; 0
    391a:	cd 52       	subi	r28, 0x2D	; 45
    391c:	df 4f       	sbci	r29, 0xFF	; 255
    391e:	28 81       	ld	r18, Y
    3920:	c3 5d       	subi	r28, 0xD3	; 211
    3922:	d0 40       	sbci	r29, 0x00	; 0
    3924:	20 93 d0 01 	sts	0x01D0, r18
                            SPI_voidTransmit(roomComponents[0][0] ? '0' : '1');
    3928:	80 91 d0 01 	lds	r24, 0x01D0
    392c:	88 23       	and	r24, r24
    392e:	39 f0       	breq	.+14     	; 0x393e <main+0x106c>
    3930:	30 e3       	ldi	r19, 0x30	; 48
    3932:	ce 52       	subi	r28, 0x2E	; 46
    3934:	df 4f       	sbci	r29, 0xFF	; 255
    3936:	38 83       	st	Y, r19
    3938:	c2 5d       	subi	r28, 0xD2	; 210
    393a:	d0 40       	sbci	r29, 0x00	; 0
    393c:	06 c0       	rjmp	.+12     	; 0x394a <main+0x1078>
    393e:	81 e3       	ldi	r24, 0x31	; 49
    3940:	ce 52       	subi	r28, 0x2E	; 46
    3942:	df 4f       	sbci	r29, 0xFF	; 255
    3944:	88 83       	st	Y, r24
    3946:	c2 5d       	subi	r28, 0xD2	; 210
    3948:	d0 40       	sbci	r29, 0x00	; 0
    394a:	ce 52       	subi	r28, 0x2E	; 46
    394c:	df 4f       	sbci	r29, 0xFF	; 255
    394e:	88 81       	ld	r24, Y
    3950:	c2 5d       	subi	r28, 0xD2	; 210
    3952:	d0 40       	sbci	r29, 0x00	; 0
    3954:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_voidTransmit>
    3958:	3b cf       	rjmp	.-394    	; 0x37d0 <main+0xefe>
                            break;
                	case 2: roomComponents[1][0] = (roomComponents[selectedRoom - 1][0] == ON) ? OFF : ON; //room2 light
    395a:	fe 01       	movw	r30, r28
    395c:	e9 54       	subi	r30, 0x49	; 73
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	80 81       	ld	r24, Z
    3962:	88 2f       	mov	r24, r24
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	9c 01       	movw	r18, r24
    3968:	21 50       	subi	r18, 0x01	; 1
    396a:	30 40       	sbci	r19, 0x00	; 0
    396c:	c9 01       	movw	r24, r18
    396e:	88 0f       	add	r24, r24
    3970:	99 1f       	adc	r25, r25
    3972:	82 0f       	add	r24, r18
    3974:	93 1f       	adc	r25, r19
    3976:	fc 01       	movw	r30, r24
    3978:	e0 53       	subi	r30, 0x30	; 48
    397a:	fe 4f       	sbci	r31, 0xFE	; 254
    397c:	80 81       	ld	r24, Z
    397e:	cf 52       	subi	r28, 0x2F	; 47
    3980:	df 4f       	sbci	r29, 0xFF	; 255
    3982:	18 82       	st	Y, r1
    3984:	c1 5d       	subi	r28, 0xD1	; 209
    3986:	d0 40       	sbci	r29, 0x00	; 0
    3988:	81 30       	cpi	r24, 0x01	; 1
    398a:	31 f0       	breq	.+12     	; 0x3998 <main+0x10c6>
    398c:	91 e0       	ldi	r25, 0x01	; 1
    398e:	cf 52       	subi	r28, 0x2F	; 47
    3990:	df 4f       	sbci	r29, 0xFF	; 255
    3992:	98 83       	st	Y, r25
    3994:	c1 5d       	subi	r28, 0xD1	; 209
    3996:	d0 40       	sbci	r29, 0x00	; 0
    3998:	cf 52       	subi	r28, 0x2F	; 47
    399a:	df 4f       	sbci	r29, 0xFF	; 255
    399c:	e8 81       	ld	r30, Y
    399e:	c1 5d       	subi	r28, 0xD1	; 209
    39a0:	d0 40       	sbci	r29, 0x00	; 0
    39a2:	e0 93 d3 01 	sts	0x01D3, r30
                            SPI_voidTransmit(roomComponents[1][0] ? '3' : '4');
    39a6:	80 91 d3 01 	lds	r24, 0x01D3
    39aa:	88 23       	and	r24, r24
    39ac:	39 f0       	breq	.+14     	; 0x39bc <main+0x10ea>
    39ae:	f3 e3       	ldi	r31, 0x33	; 51
    39b0:	c0 53       	subi	r28, 0x30	; 48
    39b2:	df 4f       	sbci	r29, 0xFF	; 255
    39b4:	f8 83       	st	Y, r31
    39b6:	c0 5d       	subi	r28, 0xD0	; 208
    39b8:	d0 40       	sbci	r29, 0x00	; 0
    39ba:	06 c0       	rjmp	.+12     	; 0x39c8 <main+0x10f6>
    39bc:	24 e3       	ldi	r18, 0x34	; 52
    39be:	c0 53       	subi	r28, 0x30	; 48
    39c0:	df 4f       	sbci	r29, 0xFF	; 255
    39c2:	28 83       	st	Y, r18
    39c4:	c0 5d       	subi	r28, 0xD0	; 208
    39c6:	d0 40       	sbci	r29, 0x00	; 0
    39c8:	c0 53       	subi	r28, 0x30	; 48
    39ca:	df 4f       	sbci	r29, 0xFF	; 255
    39cc:	88 81       	ld	r24, Y
    39ce:	c0 5d       	subi	r28, 0xD0	; 208
    39d0:	d0 40       	sbci	r29, 0x00	; 0
    39d2:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_voidTransmit>
    39d6:	fc ce       	rjmp	.-520    	; 0x37d0 <main+0xefe>
                            break;
                	case 3: roomComponents[2][0] = (roomComponents[selectedRoom - 1][0] == ON) ? OFF : ON; //room3 light
    39d8:	fe 01       	movw	r30, r28
    39da:	e9 54       	subi	r30, 0x49	; 73
    39dc:	ff 4f       	sbci	r31, 0xFF	; 255
    39de:	80 81       	ld	r24, Z
    39e0:	88 2f       	mov	r24, r24
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	9c 01       	movw	r18, r24
    39e6:	21 50       	subi	r18, 0x01	; 1
    39e8:	30 40       	sbci	r19, 0x00	; 0
    39ea:	c9 01       	movw	r24, r18
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	82 0f       	add	r24, r18
    39f2:	93 1f       	adc	r25, r19
    39f4:	fc 01       	movw	r30, r24
    39f6:	e0 53       	subi	r30, 0x30	; 48
    39f8:	fe 4f       	sbci	r31, 0xFE	; 254
    39fa:	80 81       	ld	r24, Z
    39fc:	c1 53       	subi	r28, 0x31	; 49
    39fe:	df 4f       	sbci	r29, 0xFF	; 255
    3a00:	18 82       	st	Y, r1
    3a02:	cf 5c       	subi	r28, 0xCF	; 207
    3a04:	d0 40       	sbci	r29, 0x00	; 0
    3a06:	81 30       	cpi	r24, 0x01	; 1
    3a08:	31 f0       	breq	.+12     	; 0x3a16 <main+0x1144>
    3a0a:	31 e0       	ldi	r19, 0x01	; 1
    3a0c:	c1 53       	subi	r28, 0x31	; 49
    3a0e:	df 4f       	sbci	r29, 0xFF	; 255
    3a10:	38 83       	st	Y, r19
    3a12:	cf 5c       	subi	r28, 0xCF	; 207
    3a14:	d0 40       	sbci	r29, 0x00	; 0
    3a16:	c1 53       	subi	r28, 0x31	; 49
    3a18:	df 4f       	sbci	r29, 0xFF	; 255
    3a1a:	88 81       	ld	r24, Y
    3a1c:	cf 5c       	subi	r28, 0xCF	; 207
    3a1e:	d0 40       	sbci	r29, 0x00	; 0
    3a20:	80 93 d6 01 	sts	0x01D6, r24
                            SPI_voidTransmit(roomComponents[2][0] ? '6' : '5');
    3a24:	80 91 d6 01 	lds	r24, 0x01D6
    3a28:	88 23       	and	r24, r24
    3a2a:	39 f0       	breq	.+14     	; 0x3a3a <main+0x1168>
    3a2c:	96 e3       	ldi	r25, 0x36	; 54
    3a2e:	c2 53       	subi	r28, 0x32	; 50
    3a30:	df 4f       	sbci	r29, 0xFF	; 255
    3a32:	98 83       	st	Y, r25
    3a34:	ce 5c       	subi	r28, 0xCE	; 206
    3a36:	d0 40       	sbci	r29, 0x00	; 0
    3a38:	06 c0       	rjmp	.+12     	; 0x3a46 <main+0x1174>
    3a3a:	e5 e3       	ldi	r30, 0x35	; 53
    3a3c:	c2 53       	subi	r28, 0x32	; 50
    3a3e:	df 4f       	sbci	r29, 0xFF	; 255
    3a40:	e8 83       	st	Y, r30
    3a42:	ce 5c       	subi	r28, 0xCE	; 206
    3a44:	d0 40       	sbci	r29, 0x00	; 0
    3a46:	c2 53       	subi	r28, 0x32	; 50
    3a48:	df 4f       	sbci	r29, 0xFF	; 255
    3a4a:	88 81       	ld	r24, Y
    3a4c:	ce 5c       	subi	r28, 0xCE	; 206
    3a4e:	d0 40       	sbci	r29, 0x00	; 0
    3a50:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_voidTransmit>
    3a54:	bd ce       	rjmp	.-646    	; 0x37d0 <main+0xefe>
                            break;
                	}
                	goto option_menu;
                }
                else if (L_u8PressedButton == '2')
    3a56:	fe 01       	movw	r30, r28
    3a58:	ef 53       	subi	r30, 0x3F	; 63
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	80 81       	ld	r24, Z
    3a5e:	82 33       	cpi	r24, 0x32	; 50
    3a60:	09 f0       	breq	.+2      	; 0x3a64 <main+0x1192>
    3a62:	44 c1       	rjmp	.+648    	; 0x3cec <main+0x141a>
                {
                	switch (selectedRoom)
    3a64:	fe 01       	movw	r30, r28
    3a66:	e9 54       	subi	r30, 0x49	; 73
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	80 81       	ld	r24, Z
    3a6c:	28 2f       	mov	r18, r24
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	c4 53       	subi	r28, 0x34	; 52
    3a72:	df 4f       	sbci	r29, 0xFF	; 255
    3a74:	39 83       	std	Y+1, r19	; 0x01
    3a76:	28 83       	st	Y, r18
    3a78:	cc 5c       	subi	r28, 0xCC	; 204
    3a7a:	d0 40       	sbci	r29, 0x00	; 0
    3a7c:	c4 53       	subi	r28, 0x34	; 52
    3a7e:	df 4f       	sbci	r29, 0xFF	; 255
    3a80:	88 81       	ld	r24, Y
    3a82:	99 81       	ldd	r25, Y+1	; 0x01
    3a84:	cc 5c       	subi	r28, 0xCC	; 204
    3a86:	d0 40       	sbci	r29, 0x00	; 0
    3a88:	82 30       	cpi	r24, 0x02	; 2
    3a8a:	91 05       	cpc	r25, r1
    3a8c:	09 f4       	brne	.+2      	; 0x3a90 <main+0x11be>
    3a8e:	77 ce       	rjmp	.-786    	; 0x377e <main+0xeac>
    3a90:	c4 53       	subi	r28, 0x34	; 52
    3a92:	df 4f       	sbci	r29, 0xFF	; 255
    3a94:	e8 81       	ld	r30, Y
    3a96:	f9 81       	ldd	r31, Y+1	; 0x01
    3a98:	cc 5c       	subi	r28, 0xCC	; 204
    3a9a:	d0 40       	sbci	r29, 0x00	; 0
    3a9c:	e3 30       	cpi	r30, 0x03	; 3
    3a9e:	f1 05       	cpc	r31, r1
    3aa0:	09 f4       	brne	.+2      	; 0x3aa4 <main+0x11d2>
    3aa2:	f5 c0       	rjmp	.+490    	; 0x3c8e <main+0x13bc>
    3aa4:	c4 53       	subi	r28, 0x34	; 52
    3aa6:	df 4f       	sbci	r29, 0xFF	; 255
    3aa8:	28 81       	ld	r18, Y
    3aaa:	39 81       	ldd	r19, Y+1	; 0x01
    3aac:	cc 5c       	subi	r28, 0xCC	; 204
    3aae:	d0 40       	sbci	r29, 0x00	; 0
    3ab0:	21 30       	cpi	r18, 0x01	; 1
    3ab2:	31 05       	cpc	r19, r1
    3ab4:	09 f0       	breq	.+2      	; 0x3ab8 <main+0x11e6>
    3ab6:	8c ce       	rjmp	.-744    	; 0x37d0 <main+0xefe>
					{
					case 1:                                                           		   //room1 fan
						   L_u8PressedButton = '9' ;
    3ab8:	fe 01       	movw	r30, r28
    3aba:	ef 53       	subi	r30, 0x3F	; 63
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	89 e3       	ldi	r24, 0x39	; 57
    3ac0:	80 83       	st	Z, r24
						   HLCD_voidClear();
    3ac2:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
						   HLCD_voidSendString("Control speed") ;
    3ac6:	8e e5       	ldi	r24, 0x5E	; 94
    3ac8:	91 e0       	ldi	r25, 0x01	; 1
    3aca:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	aa e7       	ldi	r26, 0x7A	; 122
    3ad4:	b3 e4       	ldi	r27, 0x43	; 67
    3ad6:	8d ab       	std	Y+53, r24	; 0x35
    3ad8:	9e ab       	std	Y+54, r25	; 0x36
    3ada:	af ab       	std	Y+55, r26	; 0x37
    3adc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ade:	6d a9       	ldd	r22, Y+53	; 0x35
    3ae0:	7e a9       	ldd	r23, Y+54	; 0x36
    3ae2:	8f a9       	ldd	r24, Y+55	; 0x37
    3ae4:	98 ad       	ldd	r25, Y+56	; 0x38
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	4a ef       	ldi	r20, 0xFA	; 250
    3aec:	54 e4       	ldi	r21, 0x44	; 68
    3aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	89 ab       	std	Y+49, r24	; 0x31
    3af8:	9a ab       	std	Y+50, r25	; 0x32
    3afa:	ab ab       	std	Y+51, r26	; 0x33
    3afc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3afe:	69 a9       	ldd	r22, Y+49	; 0x31
    3b00:	7a a9       	ldd	r23, Y+50	; 0x32
    3b02:	8b a9       	ldd	r24, Y+51	; 0x33
    3b04:	9c a9       	ldd	r25, Y+52	; 0x34
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	40 e8       	ldi	r20, 0x80	; 128
    3b0c:	5f e3       	ldi	r21, 0x3F	; 63
    3b0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b12:	88 23       	and	r24, r24
    3b14:	2c f4       	brge	.+10     	; 0x3b20 <main+0x124e>
		__ticks = 1;
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	98 ab       	std	Y+48, r25	; 0x30
    3b1c:	8f a7       	std	Y+47, r24	; 0x2f
    3b1e:	3f c0       	rjmp	.+126    	; 0x3b9e <main+0x12cc>
	else if (__tmp > 65535)
    3b20:	69 a9       	ldd	r22, Y+49	; 0x31
    3b22:	7a a9       	ldd	r23, Y+50	; 0x32
    3b24:	8b a9       	ldd	r24, Y+51	; 0x33
    3b26:	9c a9       	ldd	r25, Y+52	; 0x34
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	3f ef       	ldi	r19, 0xFF	; 255
    3b2c:	4f e7       	ldi	r20, 0x7F	; 127
    3b2e:	57 e4       	ldi	r21, 0x47	; 71
    3b30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b34:	18 16       	cp	r1, r24
    3b36:	4c f5       	brge	.+82     	; 0x3b8a <main+0x12b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b38:	6d a9       	ldd	r22, Y+53	; 0x35
    3b3a:	7e a9       	ldd	r23, Y+54	; 0x36
    3b3c:	8f a9       	ldd	r24, Y+55	; 0x37
    3b3e:	98 ad       	ldd	r25, Y+56	; 0x38
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	40 e2       	ldi	r20, 0x20	; 32
    3b46:	51 e4       	ldi	r21, 0x41	; 65
    3b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	bc 01       	movw	r22, r24
    3b52:	cd 01       	movw	r24, r26
    3b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b58:	dc 01       	movw	r26, r24
    3b5a:	cb 01       	movw	r24, r22
    3b5c:	98 ab       	std	Y+48, r25	; 0x30
    3b5e:	8f a7       	std	Y+47, r24	; 0x2f
    3b60:	0f c0       	rjmp	.+30     	; 0x3b80 <main+0x12ae>
    3b62:	88 ec       	ldi	r24, 0xC8	; 200
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	9e a7       	std	Y+46, r25	; 0x2e
    3b68:	8d a7       	std	Y+45, r24	; 0x2d
    3b6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	f1 f7       	brne	.-4      	; 0x3b6e <main+0x129c>
    3b72:	9e a7       	std	Y+46, r25	; 0x2e
    3b74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b76:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b78:	98 a9       	ldd	r25, Y+48	; 0x30
    3b7a:	01 97       	sbiw	r24, 0x01	; 1
    3b7c:	98 ab       	std	Y+48, r25	; 0x30
    3b7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b80:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b82:	98 a9       	ldd	r25, Y+48	; 0x30
    3b84:	00 97       	sbiw	r24, 0x00	; 0
    3b86:	69 f7       	brne	.-38     	; 0x3b62 <main+0x1290>
    3b88:	14 c0       	rjmp	.+40     	; 0x3bb2 <main+0x12e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b8a:	69 a9       	ldd	r22, Y+49	; 0x31
    3b8c:	7a a9       	ldd	r23, Y+50	; 0x32
    3b8e:	8b a9       	ldd	r24, Y+51	; 0x33
    3b90:	9c a9       	ldd	r25, Y+52	; 0x34
    3b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	98 ab       	std	Y+48, r25	; 0x30
    3b9c:	8f a7       	std	Y+47, r24	; 0x2f
    3b9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ba0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ba2:	9c a7       	std	Y+44, r25	; 0x2c
    3ba4:	8b a7       	std	Y+43, r24	; 0x2b
    3ba6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ba8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	f1 f7       	brne	.-4      	; 0x3baa <main+0x12d8>
    3bae:	9c a7       	std	Y+44, r25	; 0x2c
    3bb0:	8b a7       	std	Y+43, r24	; 0x2b
						   _delay_ms(250)  ;
						   HLCD_voidClear();
    3bb2:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
						   HLCD_voidSendString("1.L 2.M 3.H");
    3bb6:	8c e6       	ldi	r24, 0x6C	; 108
    3bb8:	91 e0       	ldi	r25, 0x01	; 1
    3bba:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
						   HLCD_voidMoveCursor(LINE_2, 1);
    3bbe:	82 e0       	ldi	r24, 0x02	; 2
    3bc0:	61 e0       	ldi	r22, 0x01	; 1
    3bc2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <HLCD_voidMoveCursor>
						   HLCD_voidSendString("4.Stop 5.back");
    3bc6:	88 e7       	ldi	r24, 0x78	; 120
    3bc8:	91 e0       	ldi	r25, 0x01	; 1
    3bca:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
						   while(1)
						   {
						   L_u8PressedButton = ' ' ;
    3bce:	fe 01       	movw	r30, r28
    3bd0:	ef 53       	subi	r30, 0x3F	; 63
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	80 e2       	ldi	r24, 0x20	; 32
    3bd6:	80 83       	st	Z, r24
						   L_u8PressedButton = HKPD_U8PressedKey();
    3bd8:	0e 94 1c 14 	call	0x2838	; 0x2838 <HKPD_U8PressedKey>
    3bdc:	fe 01       	movw	r30, r28
    3bde:	ef 53       	subi	r30, 0x3F	; 63
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	80 83       	st	Z, r24
						   switch(L_u8PressedButton)
    3be4:	fe 01       	movw	r30, r28
    3be6:	ef 53       	subi	r30, 0x3F	; 63
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	80 81       	ld	r24, Z
    3bec:	e8 2f       	mov	r30, r24
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	c6 53       	subi	r28, 0x36	; 54
    3bf2:	df 4f       	sbci	r29, 0xFF	; 255
    3bf4:	f9 83       	std	Y+1, r31	; 0x01
    3bf6:	e8 83       	st	Y, r30
    3bf8:	ca 5c       	subi	r28, 0xCA	; 202
    3bfa:	d0 40       	sbci	r29, 0x00	; 0
    3bfc:	c6 53       	subi	r28, 0x36	; 54
    3bfe:	df 4f       	sbci	r29, 0xFF	; 255
    3c00:	28 81       	ld	r18, Y
    3c02:	39 81       	ldd	r19, Y+1	; 0x01
    3c04:	ca 5c       	subi	r28, 0xCA	; 202
    3c06:	d0 40       	sbci	r29, 0x00	; 0
    3c08:	23 33       	cpi	r18, 0x33	; 51
    3c0a:	31 05       	cpc	r19, r1
    3c0c:	c1 f1       	breq	.+112    	; 0x3c7e <main+0x13ac>
    3c0e:	c6 53       	subi	r28, 0x36	; 54
    3c10:	df 4f       	sbci	r29, 0xFF	; 255
    3c12:	88 81       	ld	r24, Y
    3c14:	99 81       	ldd	r25, Y+1	; 0x01
    3c16:	ca 5c       	subi	r28, 0xCA	; 202
    3c18:	d0 40       	sbci	r29, 0x00	; 0
    3c1a:	84 33       	cpi	r24, 0x34	; 52
    3c1c:	91 05       	cpc	r25, r1
    3c1e:	9c f4       	brge	.+38     	; 0x3c46 <main+0x1374>
    3c20:	c6 53       	subi	r28, 0x36	; 54
    3c22:	df 4f       	sbci	r29, 0xFF	; 255
    3c24:	e8 81       	ld	r30, Y
    3c26:	f9 81       	ldd	r31, Y+1	; 0x01
    3c28:	ca 5c       	subi	r28, 0xCA	; 202
    3c2a:	d0 40       	sbci	r29, 0x00	; 0
    3c2c:	e1 33       	cpi	r30, 0x31	; 49
    3c2e:	f1 05       	cpc	r31, r1
    3c30:	f1 f0       	breq	.+60     	; 0x3c6e <main+0x139c>
    3c32:	c6 53       	subi	r28, 0x36	; 54
    3c34:	df 4f       	sbci	r29, 0xFF	; 255
    3c36:	28 81       	ld	r18, Y
    3c38:	39 81       	ldd	r19, Y+1	; 0x01
    3c3a:	ca 5c       	subi	r28, 0xCA	; 202
    3c3c:	d0 40       	sbci	r29, 0x00	; 0
    3c3e:	22 33       	cpi	r18, 0x32	; 50
    3c40:	31 05       	cpc	r19, r1
    3c42:	c9 f0       	breq	.+50     	; 0x3c76 <main+0x13a4>
    3c44:	c4 cf       	rjmp	.-120    	; 0x3bce <main+0x12fc>
    3c46:	c6 53       	subi	r28, 0x36	; 54
    3c48:	df 4f       	sbci	r29, 0xFF	; 255
    3c4a:	88 81       	ld	r24, Y
    3c4c:	99 81       	ldd	r25, Y+1	; 0x01
    3c4e:	ca 5c       	subi	r28, 0xCA	; 202
    3c50:	d0 40       	sbci	r29, 0x00	; 0
    3c52:	84 33       	cpi	r24, 0x34	; 52
    3c54:	91 05       	cpc	r25, r1
    3c56:	b9 f0       	breq	.+46     	; 0x3c86 <main+0x13b4>
    3c58:	c6 53       	subi	r28, 0x36	; 54
    3c5a:	df 4f       	sbci	r29, 0xFF	; 255
    3c5c:	e8 81       	ld	r30, Y
    3c5e:	f9 81       	ldd	r31, Y+1	; 0x01
    3c60:	ca 5c       	subi	r28, 0xCA	; 202
    3c62:	d0 40       	sbci	r29, 0x00	; 0
    3c64:	e5 33       	cpi	r30, 0x35	; 53
    3c66:	f1 05       	cpc	r31, r1
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <main+0x139a>
    3c6a:	b2 cd       	rjmp	.-1180   	; 0x37d0 <main+0xefe>
    3c6c:	b0 cf       	rjmp	.-160    	; 0x3bce <main+0x12fc>
						   {
						   case '1' : SPI_voidTransmit('L')  ; break ;
    3c6e:	8c e4       	ldi	r24, 0x4C	; 76
    3c70:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_voidTransmit>
    3c74:	ac cf       	rjmp	.-168    	; 0x3bce <main+0x12fc>
						   case '2' : SPI_voidTransmit('M')  ; break ;
    3c76:	8d e4       	ldi	r24, 0x4D	; 77
    3c78:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_voidTransmit>
    3c7c:	a8 cf       	rjmp	.-176    	; 0x3bce <main+0x12fc>
						   case '3' : SPI_voidTransmit('H')  ; break ;
    3c7e:	88 e4       	ldi	r24, 0x48	; 72
    3c80:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_voidTransmit>
    3c84:	a4 cf       	rjmp	.-184    	; 0x3bce <main+0x12fc>
						   case '4' : SPI_voidTransmit('S')  ; break ;
    3c86:	83 e5       	ldi	r24, 0x53	; 83
    3c88:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_voidTransmit>
    3c8c:	a0 cf       	rjmp	.-192    	; 0x3bce <main+0x12fc>
						   case '5' : goto option_menu       ; break ;
						   }
						   }
						   break;
					case 2:	goto Rooms_Menu; break;												//room2 back
					case 3: roomComponents[2][1] = (roomComponents[2][1] == ON) ? OFF : ON;		//room3 motor
    3c8e:	80 91 d7 01 	lds	r24, 0x01D7
    3c92:	c7 53       	subi	r28, 0x37	; 55
    3c94:	df 4f       	sbci	r29, 0xFF	; 255
    3c96:	18 82       	st	Y, r1
    3c98:	c9 5c       	subi	r28, 0xC9	; 201
    3c9a:	d0 40       	sbci	r29, 0x00	; 0
    3c9c:	81 30       	cpi	r24, 0x01	; 1
    3c9e:	31 f0       	breq	.+12     	; 0x3cac <main+0x13da>
    3ca0:	f1 e0       	ldi	r31, 0x01	; 1
    3ca2:	c7 53       	subi	r28, 0x37	; 55
    3ca4:	df 4f       	sbci	r29, 0xFF	; 255
    3ca6:	f8 83       	st	Y, r31
    3ca8:	c9 5c       	subi	r28, 0xC9	; 201
    3caa:	d0 40       	sbci	r29, 0x00	; 0
    3cac:	c7 53       	subi	r28, 0x37	; 55
    3cae:	df 4f       	sbci	r29, 0xFF	; 255
    3cb0:	28 81       	ld	r18, Y
    3cb2:	c9 5c       	subi	r28, 0xC9	; 201
    3cb4:	d0 40       	sbci	r29, 0x00	; 0
    3cb6:	20 93 d7 01 	sts	0x01D7, r18
							SPI_voidTransmit(roomComponents[2][1] ? '7' : 'W');
    3cba:	80 91 d7 01 	lds	r24, 0x01D7
    3cbe:	88 23       	and	r24, r24
    3cc0:	39 f0       	breq	.+14     	; 0x3cd0 <main+0x13fe>
    3cc2:	37 e3       	ldi	r19, 0x37	; 55
    3cc4:	c8 53       	subi	r28, 0x38	; 56
    3cc6:	df 4f       	sbci	r29, 0xFF	; 255
    3cc8:	38 83       	st	Y, r19
    3cca:	c8 5c       	subi	r28, 0xC8	; 200
    3ccc:	d0 40       	sbci	r29, 0x00	; 0
    3cce:	06 c0       	rjmp	.+12     	; 0x3cdc <main+0x140a>
    3cd0:	87 e5       	ldi	r24, 0x57	; 87
    3cd2:	c8 53       	subi	r28, 0x38	; 56
    3cd4:	df 4f       	sbci	r29, 0xFF	; 255
    3cd6:	88 83       	st	Y, r24
    3cd8:	c8 5c       	subi	r28, 0xC8	; 200
    3cda:	d0 40       	sbci	r29, 0x00	; 0
    3cdc:	c8 53       	subi	r28, 0x38	; 56
    3cde:	df 4f       	sbci	r29, 0xFF	; 255
    3ce0:	88 81       	ld	r24, Y
    3ce2:	c8 5c       	subi	r28, 0xC8	; 200
    3ce4:	d0 40       	sbci	r29, 0x00	; 0
    3ce6:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_voidTransmit>
    3cea:	72 cd       	rjmp	.-1308   	; 0x37d0 <main+0xefe>
							break;
					}
                	goto option_menu;
                }
                else if (L_u8PressedButton == '3')
    3cec:	fe 01       	movw	r30, r28
    3cee:	ef 53       	subi	r30, 0x3F	; 63
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	80 81       	ld	r24, Z
    3cf4:	83 33       	cpi	r24, 0x33	; 51
    3cf6:	09 f0       	breq	.+2      	; 0x3cfa <main+0x1428>
    3cf8:	45 c2       	rjmp	.+1162   	; 0x4184 <main+0x18b2>
			   {
                	switch (selectedRoom)
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	e9 54       	subi	r30, 0x49	; 73
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	80 81       	ld	r24, Z
    3d02:	e8 2f       	mov	r30, r24
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	ca 53       	subi	r28, 0x3A	; 58
    3d08:	df 4f       	sbci	r29, 0xFF	; 255
    3d0a:	f9 83       	std	Y+1, r31	; 0x01
    3d0c:	e8 83       	st	Y, r30
    3d0e:	c6 5c       	subi	r28, 0xC6	; 198
    3d10:	d0 40       	sbci	r29, 0x00	; 0
    3d12:	ca 53       	subi	r28, 0x3A	; 58
    3d14:	df 4f       	sbci	r29, 0xFF	; 255
    3d16:	28 81       	ld	r18, Y
    3d18:	39 81       	ldd	r19, Y+1	; 0x01
    3d1a:	c6 5c       	subi	r28, 0xC6	; 198
    3d1c:	d0 40       	sbci	r29, 0x00	; 0
    3d1e:	22 30       	cpi	r18, 0x02	; 2
    3d20:	31 05       	cpc	r19, r1
    3d22:	09 f4       	brne	.+2      	; 0x3d26 <main+0x1454>
    3d24:	43 c0       	rjmp	.+134    	; 0x3dac <main+0x14da>
    3d26:	ca 53       	subi	r28, 0x3A	; 58
    3d28:	df 4f       	sbci	r29, 0xFF	; 255
    3d2a:	88 81       	ld	r24, Y
    3d2c:	99 81       	ldd	r25, Y+1	; 0x01
    3d2e:	c6 5c       	subi	r28, 0xC6	; 198
    3d30:	d0 40       	sbci	r29, 0x00	; 0
    3d32:	83 30       	cpi	r24, 0x03	; 3
    3d34:	91 05       	cpc	r25, r1
    3d36:	09 f4       	brne	.+2      	; 0x3d3a <main+0x1468>
    3d38:	f6 c1       	rjmp	.+1004   	; 0x4126 <main+0x1854>
    3d3a:	ca 53       	subi	r28, 0x3A	; 58
    3d3c:	df 4f       	sbci	r29, 0xFF	; 255
    3d3e:	e8 81       	ld	r30, Y
    3d40:	f9 81       	ldd	r31, Y+1	; 0x01
    3d42:	c6 5c       	subi	r28, 0xC6	; 198
    3d44:	d0 40       	sbci	r29, 0x00	; 0
    3d46:	e1 30       	cpi	r30, 0x01	; 1
    3d48:	f1 05       	cpc	r31, r1
    3d4a:	09 f0       	breq	.+2      	; 0x3d4e <main+0x147c>
    3d4c:	41 cd       	rjmp	.-1406   	; 0x37d0 <main+0xefe>
					{
					case 1: roomComponents[0][2] = (roomComponents[0][2] == ON) ? OFF : ON;		//room1 tv
    3d4e:	80 91 d2 01 	lds	r24, 0x01D2
    3d52:	cb 53       	subi	r28, 0x3B	; 59
    3d54:	df 4f       	sbci	r29, 0xFF	; 255
    3d56:	18 82       	st	Y, r1
    3d58:	c5 5c       	subi	r28, 0xC5	; 197
    3d5a:	d0 40       	sbci	r29, 0x00	; 0
    3d5c:	81 30       	cpi	r24, 0x01	; 1
    3d5e:	31 f0       	breq	.+12     	; 0x3d6c <main+0x149a>
    3d60:	f1 e0       	ldi	r31, 0x01	; 1
    3d62:	cb 53       	subi	r28, 0x3B	; 59
    3d64:	df 4f       	sbci	r29, 0xFF	; 255
    3d66:	f8 83       	st	Y, r31
    3d68:	c5 5c       	subi	r28, 0xC5	; 197
    3d6a:	d0 40       	sbci	r29, 0x00	; 0
    3d6c:	cb 53       	subi	r28, 0x3B	; 59
    3d6e:	df 4f       	sbci	r29, 0xFF	; 255
    3d70:	28 81       	ld	r18, Y
    3d72:	c5 5c       	subi	r28, 0xC5	; 197
    3d74:	d0 40       	sbci	r29, 0x00	; 0
    3d76:	20 93 d2 01 	sts	0x01D2, r18
							SPI_voidTransmit(roomComponents[0][2] ? '2' : 'T');
    3d7a:	80 91 d2 01 	lds	r24, 0x01D2
    3d7e:	88 23       	and	r24, r24
    3d80:	39 f0       	breq	.+14     	; 0x3d90 <main+0x14be>
    3d82:	32 e3       	ldi	r19, 0x32	; 50
    3d84:	cc 53       	subi	r28, 0x3C	; 60
    3d86:	df 4f       	sbci	r29, 0xFF	; 255
    3d88:	38 83       	st	Y, r19
    3d8a:	c4 5c       	subi	r28, 0xC4	; 196
    3d8c:	d0 40       	sbci	r29, 0x00	; 0
    3d8e:	06 c0       	rjmp	.+12     	; 0x3d9c <main+0x14ca>
    3d90:	84 e5       	ldi	r24, 0x54	; 84
    3d92:	cc 53       	subi	r28, 0x3C	; 60
    3d94:	df 4f       	sbci	r29, 0xFF	; 255
    3d96:	88 83       	st	Y, r24
    3d98:	c4 5c       	subi	r28, 0xC4	; 196
    3d9a:	d0 40       	sbci	r29, 0x00	; 0
    3d9c:	cc 53       	subi	r28, 0x3C	; 60
    3d9e:	df 4f       	sbci	r29, 0xFF	; 255
    3da0:	88 81       	ld	r24, Y
    3da2:	c4 5c       	subi	r28, 0xC4	; 196
    3da4:	d0 40       	sbci	r29, 0x00	; 0
    3da6:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_voidTransmit>
    3daa:	12 cd       	rjmp	.-1500   	; 0x37d0 <main+0xefe>
							break;
					case 2:																		//room2 A/C
						Tempflag = 0 ;
    3dac:	fe 01       	movw	r30, r28
    3dae:	e0 54       	subi	r30, 0x40	; 64
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	10 82       	st	Z, r1
    3db4:	80 e0       	ldi	r24, 0x00	; 0
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	a8 ec       	ldi	r26, 0xC8	; 200
    3dba:	b2 e4       	ldi	r27, 0x42	; 66
    3dbc:	8f a3       	std	Y+39, r24	; 0x27
    3dbe:	98 a7       	std	Y+40, r25	; 0x28
    3dc0:	a9 a7       	std	Y+41, r26	; 0x29
    3dc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dc4:	6f a1       	ldd	r22, Y+39	; 0x27
    3dc6:	78 a5       	ldd	r23, Y+40	; 0x28
    3dc8:	89 a5       	ldd	r24, Y+41	; 0x29
    3dca:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	4a ef       	ldi	r20, 0xFA	; 250
    3dd2:	54 e4       	ldi	r21, 0x44	; 68
    3dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	8b a3       	std	Y+35, r24	; 0x23
    3dde:	9c a3       	std	Y+36, r25	; 0x24
    3de0:	ad a3       	std	Y+37, r26	; 0x25
    3de2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3de4:	6b a1       	ldd	r22, Y+35	; 0x23
    3de6:	7c a1       	ldd	r23, Y+36	; 0x24
    3de8:	8d a1       	ldd	r24, Y+37	; 0x25
    3dea:	9e a1       	ldd	r25, Y+38	; 0x26
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	40 e8       	ldi	r20, 0x80	; 128
    3df2:	5f e3       	ldi	r21, 0x3F	; 63
    3df4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3df8:	88 23       	and	r24, r24
    3dfa:	2c f4       	brge	.+10     	; 0x3e06 <main+0x1534>
		__ticks = 1;
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	9a a3       	std	Y+34, r25	; 0x22
    3e02:	89 a3       	std	Y+33, r24	; 0x21
    3e04:	3f c0       	rjmp	.+126    	; 0x3e84 <main+0x15b2>
	else if (__tmp > 65535)
    3e06:	6b a1       	ldd	r22, Y+35	; 0x23
    3e08:	7c a1       	ldd	r23, Y+36	; 0x24
    3e0a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e0c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	3f ef       	ldi	r19, 0xFF	; 255
    3e12:	4f e7       	ldi	r20, 0x7F	; 127
    3e14:	57 e4       	ldi	r21, 0x47	; 71
    3e16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e1a:	18 16       	cp	r1, r24
    3e1c:	4c f5       	brge	.+82     	; 0x3e70 <main+0x159e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e1e:	6f a1       	ldd	r22, Y+39	; 0x27
    3e20:	78 a5       	ldd	r23, Y+40	; 0x28
    3e22:	89 a5       	ldd	r24, Y+41	; 0x29
    3e24:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	40 e2       	ldi	r20, 0x20	; 32
    3e2c:	51 e4       	ldi	r21, 0x41	; 65
    3e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	bc 01       	movw	r22, r24
    3e38:	cd 01       	movw	r24, r26
    3e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	9a a3       	std	Y+34, r25	; 0x22
    3e44:	89 a3       	std	Y+33, r24	; 0x21
    3e46:	0f c0       	rjmp	.+30     	; 0x3e66 <main+0x1594>
    3e48:	88 ec       	ldi	r24, 0xC8	; 200
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	98 a3       	std	Y+32, r25	; 0x20
    3e4e:	8f 8f       	std	Y+31, r24	; 0x1f
    3e50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e52:	98 a1       	ldd	r25, Y+32	; 0x20
    3e54:	01 97       	sbiw	r24, 0x01	; 1
    3e56:	f1 f7       	brne	.-4      	; 0x3e54 <main+0x1582>
    3e58:	98 a3       	std	Y+32, r25	; 0x20
    3e5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e5e:	9a a1       	ldd	r25, Y+34	; 0x22
    3e60:	01 97       	sbiw	r24, 0x01	; 1
    3e62:	9a a3       	std	Y+34, r25	; 0x22
    3e64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e66:	89 a1       	ldd	r24, Y+33	; 0x21
    3e68:	9a a1       	ldd	r25, Y+34	; 0x22
    3e6a:	00 97       	sbiw	r24, 0x00	; 0
    3e6c:	69 f7       	brne	.-38     	; 0x3e48 <main+0x1576>
    3e6e:	14 c0       	rjmp	.+40     	; 0x3e98 <main+0x15c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e70:	6b a1       	ldd	r22, Y+35	; 0x23
    3e72:	7c a1       	ldd	r23, Y+36	; 0x24
    3e74:	8d a1       	ldd	r24, Y+37	; 0x25
    3e76:	9e a1       	ldd	r25, Y+38	; 0x26
    3e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	cb 01       	movw	r24, r22
    3e80:	9a a3       	std	Y+34, r25	; 0x22
    3e82:	89 a3       	std	Y+33, r24	; 0x21
    3e84:	89 a1       	ldd	r24, Y+33	; 0x21
    3e86:	9a a1       	ldd	r25, Y+34	; 0x22
    3e88:	9e 8f       	std	Y+30, r25	; 0x1e
    3e8a:	8d 8f       	std	Y+29, r24	; 0x1d
    3e8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	f1 f7       	brne	.-4      	; 0x3e90 <main+0x15be>
    3e94:	9e 8f       	std	Y+30, r25	; 0x1e
    3e96:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(100) ;
					    L_u8PressedButton = 'B' ;
    3e98:	fe 01       	movw	r30, r28
    3e9a:	ef 53       	subi	r30, 0x3F	; 63
    3e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9e:	82 e4       	ldi	r24, 0x42	; 66
    3ea0:	80 83       	st	Z, r24
					    HLCD_voidClear();
    3ea2:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
					    HLCD_voidSendString("Set Temperature:");
    3ea6:	86 e8       	ldi	r24, 0x86	; 134
    3ea8:	91 e0       	ldi	r25, 0x01	; 1
    3eaa:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
					    HLCD_voidMoveCursor(LINE_2, 7);
    3eae:	82 e0       	ldi	r24, 0x02	; 2
    3eb0:	67 e0       	ldi	r22, 0x07	; 7
    3eb2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <HLCD_voidMoveCursor>
					    while (1)
					    {
					    	L_u8PressedButton = HKPD_U8PressedKey();
    3eb6:	0e 94 1c 14 	call	0x2838	; 0x2838 <HKPD_U8PressedKey>
    3eba:	fe 01       	movw	r30, r28
    3ebc:	ef 53       	subi	r30, 0x3F	; 63
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	80 83       	st	Z, r24

					    	if (L_u8PressedButton >= '0' && L_u8PressedButton <= '9')
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	ef 53       	subi	r30, 0x3F	; 63
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	80 81       	ld	r24, Z
    3eca:	80 33       	cpi	r24, 0x30	; 48
    3ecc:	08 f4       	brcc	.+2      	; 0x3ed0 <main+0x15fe>
    3ece:	a3 c0       	rjmp	.+326    	; 0x4016 <main+0x1744>
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	ef 53       	subi	r30, 0x3F	; 63
    3ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed6:	80 81       	ld	r24, Z
    3ed8:	8a 33       	cpi	r24, 0x3A	; 58
    3eda:	08 f0       	brcs	.+2      	; 0x3ede <main+0x160c>
    3edc:	9c c0       	rjmp	.+312    	; 0x4016 <main+0x1744>
					    	{
					    		Tempflag++;
    3ede:	fe 01       	movw	r30, r28
    3ee0:	e0 54       	subi	r30, 0x40	; 64
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	80 81       	ld	r24, Z
    3ee6:	8f 5f       	subi	r24, 0xFF	; 255
    3ee8:	fe 01       	movw	r30, r28
    3eea:	e0 54       	subi	r30, 0x40	; 64
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	80 83       	st	Z, r24
					    		HLCD_voidSendData(L_u8PressedButton);
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	ef 53       	subi	r30, 0x3F	; 63
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	80 81       	ld	r24, Z
    3ef8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <HLCD_voidSendData>
					    		Temperature = (Temperature*10) + (L_u8PressedButton - '0');
    3efc:	fe 01       	movw	r30, r28
    3efe:	e1 54       	subi	r30, 0x41	; 65
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	80 81       	ld	r24, Z
    3f04:	88 2f       	mov	r24, r24
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	9c 01       	movw	r18, r24
    3f0a:	22 0f       	add	r18, r18
    3f0c:	33 1f       	adc	r19, r19
    3f0e:	c9 01       	movw	r24, r18
    3f10:	88 0f       	add	r24, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	88 0f       	add	r24, r24
    3f16:	99 1f       	adc	r25, r25
    3f18:	82 0f       	add	r24, r18
    3f1a:	93 1f       	adc	r25, r19
    3f1c:	98 2f       	mov	r25, r24
    3f1e:	fe 01       	movw	r30, r28
    3f20:	ef 53       	subi	r30, 0x3F	; 63
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	80 81       	ld	r24, Z
    3f26:	89 0f       	add	r24, r25
    3f28:	80 53       	subi	r24, 0x30	; 48
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	e1 54       	subi	r30, 0x41	; 65
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	80 83       	st	Z, r24
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	aa e7       	ldi	r26, 0x7A	; 122
    3f38:	b3 e4       	ldi	r27, 0x43	; 67
    3f3a:	89 8f       	std	Y+25, r24	; 0x19
    3f3c:	9a 8f       	std	Y+26, r25	; 0x1a
    3f3e:	ab 8f       	std	Y+27, r26	; 0x1b
    3f40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f42:	69 8d       	ldd	r22, Y+25	; 0x19
    3f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	4a ef       	ldi	r20, 0xFA	; 250
    3f50:	54 e4       	ldi	r21, 0x44	; 68
    3f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	8d 8b       	std	Y+21, r24	; 0x15
    3f5c:	9e 8b       	std	Y+22, r25	; 0x16
    3f5e:	af 8b       	std	Y+23, r26	; 0x17
    3f60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f62:	6d 89       	ldd	r22, Y+21	; 0x15
    3f64:	7e 89       	ldd	r23, Y+22	; 0x16
    3f66:	8f 89       	ldd	r24, Y+23	; 0x17
    3f68:	98 8d       	ldd	r25, Y+24	; 0x18
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	40 e8       	ldi	r20, 0x80	; 128
    3f70:	5f e3       	ldi	r21, 0x3F	; 63
    3f72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f76:	88 23       	and	r24, r24
    3f78:	2c f4       	brge	.+10     	; 0x3f84 <main+0x16b2>
		__ticks = 1;
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	9c 8b       	std	Y+20, r25	; 0x14
    3f80:	8b 8b       	std	Y+19, r24	; 0x13
    3f82:	3f c0       	rjmp	.+126    	; 0x4002 <main+0x1730>
	else if (__tmp > 65535)
    3f84:	6d 89       	ldd	r22, Y+21	; 0x15
    3f86:	7e 89       	ldd	r23, Y+22	; 0x16
    3f88:	8f 89       	ldd	r24, Y+23	; 0x17
    3f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	3f ef       	ldi	r19, 0xFF	; 255
    3f90:	4f e7       	ldi	r20, 0x7F	; 127
    3f92:	57 e4       	ldi	r21, 0x47	; 71
    3f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f98:	18 16       	cp	r1, r24
    3f9a:	4c f5       	brge	.+82     	; 0x3fee <main+0x171c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f9c:	69 8d       	ldd	r22, Y+25	; 0x19
    3f9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fa4:	20 e0       	ldi	r18, 0x00	; 0
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	40 e2       	ldi	r20, 0x20	; 32
    3faa:	51 e4       	ldi	r21, 0x41	; 65
    3fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb0:	dc 01       	movw	r26, r24
    3fb2:	cb 01       	movw	r24, r22
    3fb4:	bc 01       	movw	r22, r24
    3fb6:	cd 01       	movw	r24, r26
    3fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	9c 8b       	std	Y+20, r25	; 0x14
    3fc2:	8b 8b       	std	Y+19, r24	; 0x13
    3fc4:	0f c0       	rjmp	.+30     	; 0x3fe4 <main+0x1712>
    3fc6:	88 ec       	ldi	r24, 0xC8	; 200
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	9a 8b       	std	Y+18, r25	; 0x12
    3fcc:	89 8b       	std	Y+17, r24	; 0x11
    3fce:	89 89       	ldd	r24, Y+17	; 0x11
    3fd0:	9a 89       	ldd	r25, Y+18	; 0x12
    3fd2:	01 97       	sbiw	r24, 0x01	; 1
    3fd4:	f1 f7       	brne	.-4      	; 0x3fd2 <main+0x1700>
    3fd6:	9a 8b       	std	Y+18, r25	; 0x12
    3fd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fda:	8b 89       	ldd	r24, Y+19	; 0x13
    3fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	9c 8b       	std	Y+20, r25	; 0x14
    3fe2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    3fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    3fe8:	00 97       	sbiw	r24, 0x00	; 0
    3fea:	69 f7       	brne	.-38     	; 0x3fc6 <main+0x16f4>
    3fec:	14 c0       	rjmp	.+40     	; 0x4016 <main+0x1744>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fee:	6d 89       	ldd	r22, Y+21	; 0x15
    3ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	9c 8b       	std	Y+20, r25	; 0x14
    4000:	8b 8b       	std	Y+19, r24	; 0x13
    4002:	8b 89       	ldd	r24, Y+19	; 0x13
    4004:	9c 89       	ldd	r25, Y+20	; 0x14
    4006:	98 8b       	std	Y+16, r25	; 0x10
    4008:	8f 87       	std	Y+15, r24	; 0x0f
    400a:	8f 85       	ldd	r24, Y+15	; 0x0f
    400c:	98 89       	ldd	r25, Y+16	; 0x10
    400e:	01 97       	sbiw	r24, 0x01	; 1
    4010:	f1 f7       	brne	.-4      	; 0x400e <main+0x173c>
    4012:	98 8b       	std	Y+16, r25	; 0x10
    4014:	8f 87       	std	Y+15, r24	; 0x0f
					    		_delay_ms(250);
					    	}
					    	if (Tempflag == 2)
    4016:	fe 01       	movw	r30, r28
    4018:	e0 54       	subi	r30, 0x40	; 64
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	80 81       	ld	r24, Z
    401e:	82 30       	cpi	r24, 0x02	; 2
    4020:	09 f0       	breq	.+2      	; 0x4024 <main+0x1752>
    4022:	49 cf       	rjmp	.-366    	; 0x3eb6 <main+0x15e4>
					    	{
					    		HLCD_voidClear();
    4024:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
					    		HLCD_voidSendString("Temperature sent");
    4028:	87 e9       	ldi	r24, 0x97	; 151
    402a:	91 e0       	ldi	r25, 0x01	; 1
    402c:	0e 94 c8 12 	call	0x2590	; 0x2590 <HLCD_voidSendString>
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	aa ef       	ldi	r26, 0xFA	; 250
    4036:	b3 e4       	ldi	r27, 0x43	; 67
    4038:	8b 87       	std	Y+11, r24	; 0x0b
    403a:	9c 87       	std	Y+12, r25	; 0x0c
    403c:	ad 87       	std	Y+13, r26	; 0x0d
    403e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4040:	6b 85       	ldd	r22, Y+11	; 0x0b
    4042:	7c 85       	ldd	r23, Y+12	; 0x0c
    4044:	8d 85       	ldd	r24, Y+13	; 0x0d
    4046:	9e 85       	ldd	r25, Y+14	; 0x0e
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	4a ef       	ldi	r20, 0xFA	; 250
    404e:	54 e4       	ldi	r21, 0x44	; 68
    4050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4054:	dc 01       	movw	r26, r24
    4056:	cb 01       	movw	r24, r22
    4058:	8f 83       	std	Y+7, r24	; 0x07
    405a:	98 87       	std	Y+8, r25	; 0x08
    405c:	a9 87       	std	Y+9, r26	; 0x09
    405e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4060:	6f 81       	ldd	r22, Y+7	; 0x07
    4062:	78 85       	ldd	r23, Y+8	; 0x08
    4064:	89 85       	ldd	r24, Y+9	; 0x09
    4066:	9a 85       	ldd	r25, Y+10	; 0x0a
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	40 e8       	ldi	r20, 0x80	; 128
    406e:	5f e3       	ldi	r21, 0x3F	; 63
    4070:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4074:	88 23       	and	r24, r24
    4076:	2c f4       	brge	.+10     	; 0x4082 <main+0x17b0>
		__ticks = 1;
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	9e 83       	std	Y+6, r25	; 0x06
    407e:	8d 83       	std	Y+5, r24	; 0x05
    4080:	3f c0       	rjmp	.+126    	; 0x4100 <main+0x182e>
	else if (__tmp > 65535)
    4082:	6f 81       	ldd	r22, Y+7	; 0x07
    4084:	78 85       	ldd	r23, Y+8	; 0x08
    4086:	89 85       	ldd	r24, Y+9	; 0x09
    4088:	9a 85       	ldd	r25, Y+10	; 0x0a
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	3f ef       	ldi	r19, 0xFF	; 255
    408e:	4f e7       	ldi	r20, 0x7F	; 127
    4090:	57 e4       	ldi	r21, 0x47	; 71
    4092:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4096:	18 16       	cp	r1, r24
    4098:	4c f5       	brge	.+82     	; 0x40ec <main+0x181a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    409a:	6b 85       	ldd	r22, Y+11	; 0x0b
    409c:	7c 85       	ldd	r23, Y+12	; 0x0c
    409e:	8d 85       	ldd	r24, Y+13	; 0x0d
    40a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	40 e2       	ldi	r20, 0x20	; 32
    40a8:	51 e4       	ldi	r21, 0x41	; 65
    40aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	bc 01       	movw	r22, r24
    40b4:	cd 01       	movw	r24, r26
    40b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ba:	dc 01       	movw	r26, r24
    40bc:	cb 01       	movw	r24, r22
    40be:	9e 83       	std	Y+6, r25	; 0x06
    40c0:	8d 83       	std	Y+5, r24	; 0x05
    40c2:	0f c0       	rjmp	.+30     	; 0x40e2 <main+0x1810>
    40c4:	88 ec       	ldi	r24, 0xC8	; 200
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	9c 83       	std	Y+4, r25	; 0x04
    40ca:	8b 83       	std	Y+3, r24	; 0x03
    40cc:	8b 81       	ldd	r24, Y+3	; 0x03
    40ce:	9c 81       	ldd	r25, Y+4	; 0x04
    40d0:	01 97       	sbiw	r24, 0x01	; 1
    40d2:	f1 f7       	brne	.-4      	; 0x40d0 <main+0x17fe>
    40d4:	9c 83       	std	Y+4, r25	; 0x04
    40d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d8:	8d 81       	ldd	r24, Y+5	; 0x05
    40da:	9e 81       	ldd	r25, Y+6	; 0x06
    40dc:	01 97       	sbiw	r24, 0x01	; 1
    40de:	9e 83       	std	Y+6, r25	; 0x06
    40e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e2:	8d 81       	ldd	r24, Y+5	; 0x05
    40e4:	9e 81       	ldd	r25, Y+6	; 0x06
    40e6:	00 97       	sbiw	r24, 0x00	; 0
    40e8:	69 f7       	brne	.-38     	; 0x40c4 <main+0x17f2>
    40ea:	14 c0       	rjmp	.+40     	; 0x4114 <main+0x1842>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ec:	6f 81       	ldd	r22, Y+7	; 0x07
    40ee:	78 85       	ldd	r23, Y+8	; 0x08
    40f0:	89 85       	ldd	r24, Y+9	; 0x09
    40f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f8:	dc 01       	movw	r26, r24
    40fa:	cb 01       	movw	r24, r22
    40fc:	9e 83       	std	Y+6, r25	; 0x06
    40fe:	8d 83       	std	Y+5, r24	; 0x05
    4100:	8d 81       	ldd	r24, Y+5	; 0x05
    4102:	9e 81       	ldd	r25, Y+6	; 0x06
    4104:	9a 83       	std	Y+2, r25	; 0x02
    4106:	89 83       	std	Y+1, r24	; 0x01
    4108:	89 81       	ldd	r24, Y+1	; 0x01
    410a:	9a 81       	ldd	r25, Y+2	; 0x02
    410c:	01 97       	sbiw	r24, 0x01	; 1
    410e:	f1 f7       	brne	.-4      	; 0x410c <main+0x183a>
    4110:	9a 83       	std	Y+2, r25	; 0x02
    4112:	89 83       	std	Y+1, r24	; 0x01
					    		_delay_ms(500);
					    		HLCD_voidClear();
    4114:	0e 94 b8 11 	call	0x2370	; 0x2370 <HLCD_voidClear>
					    		break;
					    	}
					    }
					    SPI_voidTransmit(Temperature); break;
    4118:	fe 01       	movw	r30, r28
    411a:	e1 54       	subi	r30, 0x41	; 65
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	80 81       	ld	r24, Z
    4120:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_voidTransmit>
    4124:	55 cb       	rjmp	.-2390   	; 0x37d0 <main+0xefe>
					case 3: roomComponents[2][2] = (roomComponents[2][2] == ON) ? OFF : ON;			//room3 heater
    4126:	80 91 d8 01 	lds	r24, 0x01D8
    412a:	cd 53       	subi	r28, 0x3D	; 61
    412c:	df 4f       	sbci	r29, 0xFF	; 255
    412e:	18 82       	st	Y, r1
    4130:	c3 5c       	subi	r28, 0xC3	; 195
    4132:	d0 40       	sbci	r29, 0x00	; 0
    4134:	81 30       	cpi	r24, 0x01	; 1
    4136:	31 f0       	breq	.+12     	; 0x4144 <main+0x1872>
    4138:	91 e0       	ldi	r25, 0x01	; 1
    413a:	cd 53       	subi	r28, 0x3D	; 61
    413c:	df 4f       	sbci	r29, 0xFF	; 255
    413e:	98 83       	st	Y, r25
    4140:	c3 5c       	subi	r28, 0xC3	; 195
    4142:	d0 40       	sbci	r29, 0x00	; 0
    4144:	cd 53       	subi	r28, 0x3D	; 61
    4146:	df 4f       	sbci	r29, 0xFF	; 255
    4148:	e8 81       	ld	r30, Y
    414a:	c3 5c       	subi	r28, 0xC3	; 195
    414c:	d0 40       	sbci	r29, 0x00	; 0
    414e:	e0 93 d8 01 	sts	0x01D8, r30
							SPI_voidTransmit(roomComponents[2][2] ? '8' : 'X');
    4152:	80 91 d8 01 	lds	r24, 0x01D8
    4156:	88 23       	and	r24, r24
    4158:	39 f0       	breq	.+14     	; 0x4168 <main+0x1896>
    415a:	f8 e3       	ldi	r31, 0x38	; 56
    415c:	ce 53       	subi	r28, 0x3E	; 62
    415e:	df 4f       	sbci	r29, 0xFF	; 255
    4160:	f8 83       	st	Y, r31
    4162:	c2 5c       	subi	r28, 0xC2	; 194
    4164:	d0 40       	sbci	r29, 0x00	; 0
    4166:	06 c0       	rjmp	.+12     	; 0x4174 <main+0x18a2>
    4168:	28 e5       	ldi	r18, 0x58	; 88
    416a:	ce 53       	subi	r28, 0x3E	; 62
    416c:	df 4f       	sbci	r29, 0xFF	; 255
    416e:	28 83       	st	Y, r18
    4170:	c2 5c       	subi	r28, 0xC2	; 194
    4172:	d0 40       	sbci	r29, 0x00	; 0
    4174:	ce 53       	subi	r28, 0x3E	; 62
    4176:	df 4f       	sbci	r29, 0xFF	; 255
    4178:	88 81       	ld	r24, Y
    417a:	c2 5c       	subi	r28, 0xC2	; 194
    417c:	d0 40       	sbci	r29, 0x00	; 0
    417e:	0e 94 a3 06 	call	0xd46	; 0xd46 <SPI_voidTransmit>
    4182:	26 cb       	rjmp	.-2484   	; 0x37d0 <main+0xefe>
							break;
					}
                	goto option_menu;
			   }
                else if (L_u8PressedButton == '4')													//back to rooms selection
    4184:	fe 01       	movw	r30, r28
    4186:	ef 53       	subi	r30, 0x3F	; 63
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	80 81       	ld	r24, Z
    418c:	84 33       	cpi	r24, 0x34	; 52
    418e:	09 f4       	brne	.+2      	; 0x4192 <main+0x18c0>
    4190:	f6 ca       	rjmp	.-2580   	; 0x377e <main+0xeac>
    4192:	6d cb       	rjmp	.-2342   	; 0x386e <main+0xf9c>

00004194 <__mulsi3>:
    4194:	62 9f       	mul	r22, r18
    4196:	d0 01       	movw	r26, r0
    4198:	73 9f       	mul	r23, r19
    419a:	f0 01       	movw	r30, r0
    419c:	82 9f       	mul	r24, r18
    419e:	e0 0d       	add	r30, r0
    41a0:	f1 1d       	adc	r31, r1
    41a2:	64 9f       	mul	r22, r20
    41a4:	e0 0d       	add	r30, r0
    41a6:	f1 1d       	adc	r31, r1
    41a8:	92 9f       	mul	r25, r18
    41aa:	f0 0d       	add	r31, r0
    41ac:	83 9f       	mul	r24, r19
    41ae:	f0 0d       	add	r31, r0
    41b0:	74 9f       	mul	r23, r20
    41b2:	f0 0d       	add	r31, r0
    41b4:	65 9f       	mul	r22, r21
    41b6:	f0 0d       	add	r31, r0
    41b8:	99 27       	eor	r25, r25
    41ba:	72 9f       	mul	r23, r18
    41bc:	b0 0d       	add	r27, r0
    41be:	e1 1d       	adc	r30, r1
    41c0:	f9 1f       	adc	r31, r25
    41c2:	63 9f       	mul	r22, r19
    41c4:	b0 0d       	add	r27, r0
    41c6:	e1 1d       	adc	r30, r1
    41c8:	f9 1f       	adc	r31, r25
    41ca:	bd 01       	movw	r22, r26
    41cc:	cf 01       	movw	r24, r30
    41ce:	11 24       	eor	r1, r1
    41d0:	08 95       	ret

000041d2 <__udivmodsi4>:
    41d2:	a1 e2       	ldi	r26, 0x21	; 33
    41d4:	1a 2e       	mov	r1, r26
    41d6:	aa 1b       	sub	r26, r26
    41d8:	bb 1b       	sub	r27, r27
    41da:	fd 01       	movw	r30, r26
    41dc:	0d c0       	rjmp	.+26     	; 0x41f8 <__udivmodsi4_ep>

000041de <__udivmodsi4_loop>:
    41de:	aa 1f       	adc	r26, r26
    41e0:	bb 1f       	adc	r27, r27
    41e2:	ee 1f       	adc	r30, r30
    41e4:	ff 1f       	adc	r31, r31
    41e6:	a2 17       	cp	r26, r18
    41e8:	b3 07       	cpc	r27, r19
    41ea:	e4 07       	cpc	r30, r20
    41ec:	f5 07       	cpc	r31, r21
    41ee:	20 f0       	brcs	.+8      	; 0x41f8 <__udivmodsi4_ep>
    41f0:	a2 1b       	sub	r26, r18
    41f2:	b3 0b       	sbc	r27, r19
    41f4:	e4 0b       	sbc	r30, r20
    41f6:	f5 0b       	sbc	r31, r21

000041f8 <__udivmodsi4_ep>:
    41f8:	66 1f       	adc	r22, r22
    41fa:	77 1f       	adc	r23, r23
    41fc:	88 1f       	adc	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	1a 94       	dec	r1
    4202:	69 f7       	brne	.-38     	; 0x41de <__udivmodsi4_loop>
    4204:	60 95       	com	r22
    4206:	70 95       	com	r23
    4208:	80 95       	com	r24
    420a:	90 95       	com	r25
    420c:	9b 01       	movw	r18, r22
    420e:	ac 01       	movw	r20, r24
    4210:	bd 01       	movw	r22, r26
    4212:	cf 01       	movw	r24, r30
    4214:	08 95       	ret

00004216 <__divmodsi4>:
    4216:	97 fb       	bst	r25, 7
    4218:	09 2e       	mov	r0, r25
    421a:	05 26       	eor	r0, r21
    421c:	0e d0       	rcall	.+28     	; 0x423a <__divmodsi4_neg1>
    421e:	57 fd       	sbrc	r21, 7
    4220:	04 d0       	rcall	.+8      	; 0x422a <__divmodsi4_neg2>
    4222:	d7 df       	rcall	.-82     	; 0x41d2 <__udivmodsi4>
    4224:	0a d0       	rcall	.+20     	; 0x423a <__divmodsi4_neg1>
    4226:	00 1c       	adc	r0, r0
    4228:	38 f4       	brcc	.+14     	; 0x4238 <__divmodsi4_exit>

0000422a <__divmodsi4_neg2>:
    422a:	50 95       	com	r21
    422c:	40 95       	com	r20
    422e:	30 95       	com	r19
    4230:	21 95       	neg	r18
    4232:	3f 4f       	sbci	r19, 0xFF	; 255
    4234:	4f 4f       	sbci	r20, 0xFF	; 255
    4236:	5f 4f       	sbci	r21, 0xFF	; 255

00004238 <__divmodsi4_exit>:
    4238:	08 95       	ret

0000423a <__divmodsi4_neg1>:
    423a:	f6 f7       	brtc	.-4      	; 0x4238 <__divmodsi4_exit>
    423c:	90 95       	com	r25
    423e:	80 95       	com	r24
    4240:	70 95       	com	r23
    4242:	61 95       	neg	r22
    4244:	7f 4f       	sbci	r23, 0xFF	; 255
    4246:	8f 4f       	sbci	r24, 0xFF	; 255
    4248:	9f 4f       	sbci	r25, 0xFF	; 255
    424a:	08 95       	ret

0000424c <__prologue_saves__>:
    424c:	2f 92       	push	r2
    424e:	3f 92       	push	r3
    4250:	4f 92       	push	r4
    4252:	5f 92       	push	r5
    4254:	6f 92       	push	r6
    4256:	7f 92       	push	r7
    4258:	8f 92       	push	r8
    425a:	9f 92       	push	r9
    425c:	af 92       	push	r10
    425e:	bf 92       	push	r11
    4260:	cf 92       	push	r12
    4262:	df 92       	push	r13
    4264:	ef 92       	push	r14
    4266:	ff 92       	push	r15
    4268:	0f 93       	push	r16
    426a:	1f 93       	push	r17
    426c:	cf 93       	push	r28
    426e:	df 93       	push	r29
    4270:	cd b7       	in	r28, 0x3d	; 61
    4272:	de b7       	in	r29, 0x3e	; 62
    4274:	ca 1b       	sub	r28, r26
    4276:	db 0b       	sbc	r29, r27
    4278:	0f b6       	in	r0, 0x3f	; 63
    427a:	f8 94       	cli
    427c:	de bf       	out	0x3e, r29	; 62
    427e:	0f be       	out	0x3f, r0	; 63
    4280:	cd bf       	out	0x3d, r28	; 61
    4282:	09 94       	ijmp

00004284 <__epilogue_restores__>:
    4284:	2a 88       	ldd	r2, Y+18	; 0x12
    4286:	39 88       	ldd	r3, Y+17	; 0x11
    4288:	48 88       	ldd	r4, Y+16	; 0x10
    428a:	5f 84       	ldd	r5, Y+15	; 0x0f
    428c:	6e 84       	ldd	r6, Y+14	; 0x0e
    428e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4290:	8c 84       	ldd	r8, Y+12	; 0x0c
    4292:	9b 84       	ldd	r9, Y+11	; 0x0b
    4294:	aa 84       	ldd	r10, Y+10	; 0x0a
    4296:	b9 84       	ldd	r11, Y+9	; 0x09
    4298:	c8 84       	ldd	r12, Y+8	; 0x08
    429a:	df 80       	ldd	r13, Y+7	; 0x07
    429c:	ee 80       	ldd	r14, Y+6	; 0x06
    429e:	fd 80       	ldd	r15, Y+5	; 0x05
    42a0:	0c 81       	ldd	r16, Y+4	; 0x04
    42a2:	1b 81       	ldd	r17, Y+3	; 0x03
    42a4:	aa 81       	ldd	r26, Y+2	; 0x02
    42a6:	b9 81       	ldd	r27, Y+1	; 0x01
    42a8:	ce 0f       	add	r28, r30
    42aa:	d1 1d       	adc	r29, r1
    42ac:	0f b6       	in	r0, 0x3f	; 63
    42ae:	f8 94       	cli
    42b0:	de bf       	out	0x3e, r29	; 62
    42b2:	0f be       	out	0x3f, r0	; 63
    42b4:	cd bf       	out	0x3d, r28	; 61
    42b6:	ed 01       	movw	r28, r26
    42b8:	08 95       	ret

000042ba <_exit>:
    42ba:	f8 94       	cli

000042bc <__stop_program>:
    42bc:	ff cf       	rjmp	.-2      	; 0x42bc <__stop_program>
